"use strict";
// /<reference types="../../../../Core/Build/FudgeCore.js"/>
var f = FudgeCore;
var FudgePhysics_Communication;
(function (FudgePhysics_Communication) {
    window.addEventListener("load", init);
    const app = document.querySelector("canvas");
    let viewPort;
    let hierarchy;
    let fps;
    const times = [];
    let fpsDisplay = document.querySelector("h2#FPS");
    let bodies = new Array();
    let ground;
    let cmpCamera;
    let stepWidth = 0.1;
    let moveableTransform;
    //Joints
    let prismaticJoint;
    let prismaticJointSlide;
    let revoluteJointSwingDoor;
    let cylindricalJoint;
    let sphericalJoint;
    let universalJoint;
    let secondUniversalJoint;
    //Ragdoll
    let head;
    let body1;
    let body2;
    let armL;
    let armR;
    let legL;
    let legR;
    let jointHeadBody;
    let jointUpperLowerBody;
    let jointBodyArmL;
    let jointBodyArmR;
    let jointBodyLegL;
    let jointBodyLegR;
    let holder;
    function init(_event) {
        f.Debug.log(app);
        hierarchy = new f.Node("Scene");
        document.addEventListener("keypress", hndKey);
        document.addEventListener("keydown", hndKeyDown);
        ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.mtxLocal.scale(new f.Vector3(14, 0.3, 14));
        cmpGroundMesh.mtxLocal.translate(new f.Vector3(0, -1.5, 0));
        hierarchy.appendChild(ground);
        //Prismatic Joints
        bodies[0] = createCompleteMeshNode("Spring_Floor", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.4, 0.4, 0.4, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_2);
        let cmpCubeTransform = bodies[0].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[0]);
        cmpCubeTransform.mtxLocal.translate(new f.Vector3(0, 1, 0));
        cmpCubeTransform.mtxLocal.scaleY(0.2);
        prismaticJoint = new f.JointPrismatic(bodies[0].getComponent(f.ComponentRigidbody), ground.getComponent(f.ComponentRigidbody), new f.Vector3(0, 1, 0));
        bodies[0].addComponent(prismaticJoint);
        prismaticJoint.springDamping = 0;
        prismaticJoint.springFrequency = 1;
        prismaticJoint.maxMotor = 0;
        prismaticJoint.minMotor = 0;
        prismaticJoint.internalCollision = true;
        bodies[3] = createCompleteMeshNode("CubeJointBase", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.4, 0.4, 0.4, 1))), new f.MeshCube(), 1, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[3]);
        bodies[3].mtxLocal.translate(new f.Vector3(-4, 2, -2));
        bodies[3].mtxLocal.scale(new f.Vector3(2, 0.5, 0.5));
        bodies[4] = createCompleteMeshNode("CubeJointSlide", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[4]);
        bodies[4].mtxLocal.translate(new f.Vector3(-4, 2, -2));
        prismaticJointSlide = new f.JointPrismatic(bodies[3].getComponent(f.ComponentRigidbody), bodies[4].getComponent(f.ComponentRigidbody), new f.Vector3(1, 0, 0));
        bodies[3].addComponent(prismaticJointSlide);
        prismaticJointSlide.motorForce = 10; //so it does not slide too much on it's own.
        prismaticJointSlide.minMotor = -1;
        prismaticJointSlide.maxMotor = 1;
        //Revolute Joint
        bodies[5] = createCompleteMeshNode("Handle", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.4, 0.4, 0.4, 1))), new f.MeshCube(), 1, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[5]);
        bodies[5].mtxLocal.translate(new f.Vector3(3.5, 2, -2));
        bodies[5].mtxLocal.scale(new f.Vector3(0.5, 2, 0.5));
        bodies[6] = createCompleteMeshNode("SwingDoor", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[6]);
        bodies[6].mtxLocal.translate(new f.Vector3(4.25, 2, -2));
        bodies[6].mtxLocal.scale(new f.Vector3(1.5, 2, 0.2));
        revoluteJointSwingDoor = new f.JointRevolute(bodies[5].getComponent(f.ComponentRigidbody), bodies[6].getComponent(f.ComponentRigidbody), new f.Vector3(0, 1, 0));
        bodies[5].addComponent(revoluteJointSwingDoor);
        revoluteJointSwingDoor.minMotor = -60;
        revoluteJointSwingDoor.maxMotor = 60;
        //Cylindrical Joint
        bodies[7] = createCompleteMeshNode("Holder", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.4, 0.4, 0.4, 1))), new f.MeshCube(), 1, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[7]);
        bodies[7].mtxLocal.translate(new f.Vector3(1.5, 3, -2));
        bodies[7].mtxLocal.scale(new f.Vector3(0.5, 1, 0.5));
        bodies[8] = createCompleteMeshNode("MovingDrill", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[8]);
        bodies[8].mtxLocal.translate(new f.Vector3(1.5, 2.5, -2));
        bodies[8].mtxLocal.scale(new f.Vector3(0.3, 2, 0.3));
        cylindricalJoint = new f.JointCylindrical(bodies[7].getComponent(f.ComponentRigidbody), bodies[8].getComponent(f.ComponentRigidbody), new f.Vector3(0, 1, 0));
        bodies[7].addComponent(cylindricalJoint);
        cylindricalJoint.minMotor = -1.25;
        cylindricalJoint.rotorSpeed = 1;
        // cylindricalJoint.rotationalMotorTorque = 10;
        cylindricalJoint.rotorTorque = 10;
        //Spherical Joint
        bodies[9] = createCompleteMeshNode("Socket", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.4, 0.4, 0.4, 1))), new f.MeshCube(), 1, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[9]);
        bodies[9].mtxLocal.translate(new f.Vector3(-1.5, 3, 2.5));
        bodies[9].mtxLocal.scale(new f.Vector3(0.5, 0.5, 0.5));
        bodies[10] = createCompleteMeshNode("BallJoint", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[10]);
        bodies[10].mtxLocal.translate(new f.Vector3(-1.5, 2, 2.5));
        bodies[10].mtxLocal.scale(new f.Vector3(0.3, 2, 0.3));
        sphericalJoint = new f.JointSpherical(bodies[9].getComponent(f.ComponentRigidbody), bodies[10].getComponent(f.ComponentRigidbody));
        bodies[9].addComponent(sphericalJoint);
        //Universal Joint
        bodies[11] = createCompleteMeshNode("Holder", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.4, 0.4, 0.4, 1))), new f.MeshCube(), 1, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[11]);
        bodies[11].mtxLocal.translate(new f.Vector3(-5.5, 5, 2.5));
        bodies[11].mtxLocal.scale(new f.Vector3(0.5, 0.5, 0.5));
        bodies[12] = createCompleteMeshNode("Universal1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[12]);
        bodies[12].mtxLocal.translate(new f.Vector3(-5.5, 3.75, 2.5));
        bodies[12].mtxLocal.scale(new f.Vector3(0.3, 2, 0.3));
        universalJoint = new f.JointUniversal(bodies[11].getComponent(f.ComponentRigidbody), bodies[12].getComponent(f.ComponentRigidbody), new f.Vector3(0, 1, 0), new f.Vector3(1, 0, 0));
        bodies[11].addComponent(universalJoint);
        bodies[13] = createCompleteMeshNode("Universal2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        hierarchy.appendChild(bodies[13]);
        bodies[13].mtxLocal.translate(new f.Vector3(-5.5, 1.75, 2.5));
        bodies[13].mtxLocal.scale(new f.Vector3(0.3, 2, 0.3));
        secondUniversalJoint = new f.JointUniversal(bodies[12].getComponent(f.ComponentRigidbody), bodies[13].getComponent(f.ComponentRigidbody), new f.Vector3(0, 0, 1), new f.Vector3(1, 0, 0), new f.Vector3(0, -1, 0));
        bodies[12].addComponent(secondUniversalJoint);
        //Miscellaneous
        bodies[1] = createCompleteMeshNode("Cube_2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        let cmpCubeTransform2 = bodies[1].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[1]);
        cmpCubeTransform2.mtxLocal.translate(new f.Vector3(0, 2, 0));
        bodies[2] = createCompleteMeshNode("Cube_3", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC);
        let cmpCubeTransform3 = bodies[2].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[2]);
        cmpCubeTransform3.mtxLocal.translate(new f.Vector3(0.5, 3, 0.5));
        bodies[40] = createCompleteMeshNode("Cube_NonePhysics", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 1, 1, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC);
        bodies[40].removeComponent(bodies[40].getComponent(f.ComponentRigidbody));
        hierarchy.appendChild(bodies[40]);
        bodies[40].mtxLocal.translate(new f.Vector3(-4.5, 3.5, 0.5));
        //Kinematic
        bodies[3] = createCompleteMeshNode("PlayerControlledCube", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0, 1, 1))), new f.MeshCube(), 1, f.BODY_TYPE.KINEMATIC);
        moveableTransform = bodies[3].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[3]);
        moveableTransform.mtxLocal.translate(new f.Vector3(5, 6, 5));
        //Ragdoll
        createRagdoll();
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.mtxPivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        cmpCamera = new f.ComponentCamera();
        cmpCamera.clrBackground = f.Color.CSS("GREY");
        cmpCamera.mtxPivot.translate(new f.Vector3(0, 2, 17));
        cmpCamera.mtxPivot.lookAt(f.Vector3.ZERO());
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        viewPort.activatePointerEvent("\u0192pointerdown" /* DOWN */, true);
        viewPort.addEventListener("\u0192pointerdown" /* DOWN */, hndPointerDown);
        viewPort.activatePointerEvent("\u0192pointerup" /* UP */, true);
        viewPort.addEventListener("\u0192pointerup" /* UP */, hndPointerUp);
        f.Physics.adjustTransforms(hierarchy);
        f.Loop.start();
    }
    function update() {
        f.Physics.world.simulate();
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(() => {
            const now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function createCompleteMeshNode(_name, _material, _mesh, _mass, _physicsType, _group = f.COLLISION_GROUP.DEFAULT, _colType = f.COLLIDER_TYPE.CUBE) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        let cmpRigidbody = new f.ComponentRigidbody(_mass, _physicsType, _colType, _group);
        cmpRigidbody.restitution = 0.2;
        cmpRigidbody.friction = 0.8;
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        node.addComponent(cmpRigidbody);
        return node;
    }
    function hndKey(_event) {
        let horizontal = 0;
        let vertical = 0;
        let height = 0;
        if (_event.code == f.KEYBOARD_CODE.A) {
            horizontal -= 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.D) {
            horizontal += 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.W) {
            vertical -= 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.S) {
            vertical += 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.Q) {
            height += 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.E) {
            height -= 1 * stepWidth;
        }
        let pos = moveableTransform.mtxLocal.translation;
        pos.add(new f.Vector3(horizontal, height, vertical));
        moveableTransform.mtxLocal.translation = pos;
    }
    function hndKeyDown(_event) {
        if (_event.code == f.KEYBOARD_CODE.Y) {
            prismaticJoint.bodyAnchor.applyForce(new f.Vector3(0, 1 * 1000, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.U) {
            prismaticJointSlide.bodyTied.applyForce(new f.Vector3(1 * -100, 0, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.I) {
            prismaticJointSlide.bodyTied.applyForce(new f.Vector3(1 * 100, 0, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.O) {
            revoluteJointSwingDoor.bodyTied.applyForce(new f.Vector3(0, 0, 1 * 100));
        }
        if (_event.code == f.KEYBOARD_CODE.P) {
            revoluteJointSwingDoor.bodyTied.applyForce(new f.Vector3(0, 0, 1 * -100));
        }
        if (_event.code == f.KEYBOARD_CODE.F) {
            cylindricalJoint.bodyTied.applyForce(new f.Vector3(0, 1 * 300, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.V) {
            cylindricalJoint.bodyTied.applyTorque(new f.Vector3(0, 1 * 100, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.G) {
            sphericalJoint.bodyTied.applyTorque(new f.Vector3(0, 1 * 100, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.H) {
            secondUniversalJoint.bodyTied.applyForce(new f.Vector3(0, 0, 1 * 100));
        }
        if (_event.code == f.KEYBOARD_CODE.J) {
            secondUniversalJoint.bodyTied.applyTorque(new f.Vector3(0, 1 * 100, 0));
        }
        //Physics Debugs
        if (_event.code == f.KEYBOARD_CODE.N) { //Toggle Debug Draw
            f.Physics.settings.debugDraw = !f.Physics.settings.debugDraw;
        }
        if (_event.code == f.KEYBOARD_CODE.M) { //Go through the different modes
            let currentMode = f.Physics.settings.debugMode;
            currentMode = currentMode == 4 ? 0 : f.Physics.settings.debugMode += 1;
            f.Physics.settings.debugMode = currentMode;
        }
    }
    function hndPointerDown(_event) {
        let mouse = new f.Vector2(_event.pointerX, _event.pointerY);
        let posProjection = viewPort.pointClientToProjection(mouse);
        let ray = new f.Ray(new f.Vector3(-posProjection.x, posProjection.y, 1));
        ray.origin.transform(cmpCamera.mtxPivot);
        ray.direction.transform(cmpCamera.mtxPivot, false);
        //Ray
        let hitInfo = f.Physics.raycast(ray.origin, ray.direction, 20);
        if (hitInfo.hit)
            f.Debug.log(hitInfo.rigidbodyComponent.node.name);
        else
            f.Debug.log("miss");
        let pos = hitInfo.hitPoint;
        moveableTransform.mtxLocal.translation = pos;
    }
    function hndPointerUp(_event) {
        //
    }
    function createRagdoll() {
        let pos = new f.Vector3(5, 4, 5);
        let scale = new f.Vector3(0.4, 0.5, 0.4);
        head = createCompleteMeshNode("HeadRD", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(head);
        pos.add(new f.Vector3(0, 0.4, 0));
        head.mtxLocal.translate(pos);
        head.mtxLocal.scale(scale);
        body1 = createCompleteMeshNode("body1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(body1);
        pos.add(new f.Vector3(0, -0.55, 0));
        scale = new f.Vector3(0.6, 0.6, 0.4);
        body1.mtxLocal.translate(pos);
        body1.mtxLocal.scale(scale);
        body2 = createCompleteMeshNode("body2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(body2);
        pos.add(new f.Vector3(0, -0.35, 0));
        scale = new f.Vector3(0.4, 0.4, 0.35);
        body2.mtxLocal.translate(pos);
        body2.mtxLocal.scale(scale);
        legL = createCompleteMeshNode("legL", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(legL);
        pos.add(new f.Vector3(-0.25, -0.8, 0));
        scale = new f.Vector3(0.3, 1, 0.3);
        legL.mtxLocal.translate(pos);
        legL.mtxLocal.scale(scale);
        legR = createCompleteMeshNode("legR", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(legR);
        pos.add(new f.Vector3(0.5, 0, 0));
        scale = new f.Vector3(0.3, 1, 0.3);
        legR.mtxLocal.translate(pos);
        legR.mtxLocal.scale(scale);
        armR = createCompleteMeshNode("armR", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(armR);
        pos.add(new f.Vector3(0.45, 1.5, 0));
        scale = new f.Vector3(1, 0.2, 0.2);
        armR.mtxLocal.translate(pos);
        armR.mtxLocal.scale(scale);
        armL = createCompleteMeshNode("armL", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 1, 0.3, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.CUBE);
        hierarchy.appendChild(armL);
        pos.add(new f.Vector3(-1.45, 0, 0));
        scale = new f.Vector3(1, 0.2, 0.2);
        armL.mtxLocal.translate(pos);
        armL.mtxLocal.scale(scale);
        let x = new f.Vector3(1, 0, 0);
        let y = new f.Vector3(0, 1, 0);
        let z = new f.Vector3(0, 0, 1);
        jointHeadBody = new f.JointRagdoll(head.getComponent(f.ComponentRigidbody), body1.getComponent(f.ComponentRigidbody), y, x, new f.Vector3(0, -0.2, 0));
        jointHeadBody.springFrequencySwing = 10;
        jointHeadBody.springDampingSwing = 1;
        jointHeadBody.maxAngleFirstAxis = 90;
        jointHeadBody.maxAngleSecondAxis = 70;
        jointHeadBody.minMotorTwist = -90;
        jointHeadBody.maxMotorTwist = 90;
        jointHeadBody.springFrequencyTwist = 10;
        jointHeadBody.springDampingTwist = 1;
        head.addComponent(jointHeadBody);
        jointUpperLowerBody = new f.JointRagdoll(body1.getComponent(f.ComponentRigidbody), body2.getComponent(f.ComponentRigidbody), y, x, new f.Vector3(0, -0.4, 0));
        jointUpperLowerBody.springFrequencySwing = 10;
        jointUpperLowerBody.springDampingSwing = 1;
        jointUpperLowerBody.maxAngleFirstAxis = 90;
        jointUpperLowerBody.maxAngleSecondAxis = 90;
        jointUpperLowerBody.minMotorTwist = -90;
        jointUpperLowerBody.maxMotorTwist = 90;
        jointUpperLowerBody.springFrequencyTwist = 10;
        jointUpperLowerBody.springDampingTwist = 1;
        body1.addComponent(jointUpperLowerBody);
        jointBodyArmL = new f.JointRagdoll(armL.getComponent(f.ComponentRigidbody), body1.getComponent(f.ComponentRigidbody), x, z, new f.Vector3(0.5, 0, 0));
        jointBodyArmL.springFrequencySwing = 10;
        jointBodyArmL.springDampingSwing = 1;
        jointBodyArmL.maxAngleFirstAxis = 90;
        jointBodyArmL.maxAngleSecondAxis = 90;
        jointBodyArmL.minMotorTwist = -90;
        jointBodyArmL.maxMotorTwist = 90;
        jointBodyArmL.springFrequencyTwist = 10;
        jointBodyArmL.springDampingTwist = 1;
        armL.addComponent(jointBodyArmL);
        x.x = -1;
        jointBodyArmR = new f.JointRagdoll(armR.getComponent(f.ComponentRigidbody), body1.getComponent(f.ComponentRigidbody), x, z, new f.Vector3(-0.5, 0, 0));
        jointBodyArmR.springFrequencySwing = 10;
        jointBodyArmR.springDampingSwing = 1;
        jointBodyArmR.maxAngleFirstAxis = 90;
        jointBodyArmR.maxAngleSecondAxis = 90;
        jointBodyArmR.minMotorTwist = -90;
        jointBodyArmR.maxMotorTwist = 90;
        jointBodyArmR.springFrequencyTwist = 10;
        jointBodyArmR.springDampingTwist = 1;
        armR.addComponent(jointBodyArmR);
        jointBodyLegL = new f.JointRagdoll(legL.getComponent(f.ComponentRigidbody), body1.getComponent(f.ComponentRigidbody), y, x, new f.Vector3(0, 0.5, 0));
        jointBodyLegL.springFrequencySwing = 10;
        jointBodyLegL.springDampingSwing = 1;
        jointBodyLegL.maxAngleFirstAxis = 90;
        jointBodyLegL.maxAngleSecondAxis = 90;
        jointBodyLegL.minMotorTwist = -90;
        jointBodyLegL.maxMotorTwist = 90;
        jointBodyLegL.springFrequencyTwist = 10;
        jointBodyLegL.springDampingTwist = 1;
        legL.addComponent(jointBodyLegL);
        jointBodyLegR = new f.JointRagdoll(legR.getComponent(f.ComponentRigidbody), body1.getComponent(f.ComponentRigidbody), y, x, new f.Vector3(0, 0.5, 0));
        jointBodyLegR.springFrequencySwing = 10;
        jointBodyLegR.springDampingSwing = 1;
        jointBodyLegR.maxAngleFirstAxis = 90;
        jointBodyLegR.maxAngleSecondAxis = 90;
        jointBodyLegR.minMotorTwist = -90;
        jointBodyLegR.maxMotorTwist = 90;
        jointBodyLegR.springFrequencyTwist = 10;
        jointBodyLegR.springDampingTwist = 1;
        legR.addComponent(jointBodyLegR);
        holder = new f.JointSpherical(moveableTransform.node.getComponent(f.ComponentRigidbody), head.getComponent(f.ComponentRigidbody), new f.Vector3(0, 0, 0));
        moveableTransform.node.addComponent(holder);
        holder.springDamping = 0.1;
        holder.springFrequency = 1;
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCxJQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7QUFJckIsSUFBVSwwQkFBMEIsQ0ErY25DO0FBL2NELFdBQVUsMEJBQTBCO0lBRWhDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxHQUFHLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsSUFBSSxRQUFvQixDQUFDO0lBQ3pCLElBQUksU0FBaUIsQ0FBQztJQUN0QixJQUFJLEdBQVcsQ0FBQztJQUNoQixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsSUFBSSxVQUFVLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFL0QsSUFBSSxNQUFNLEdBQWEsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUNuQyxJQUFJLE1BQWMsQ0FBQztJQUNuQixJQUFJLFNBQTRCLENBQUM7SUFFakMsSUFBSSxTQUFTLEdBQVcsR0FBRyxDQUFDO0lBQzVCLElBQUksaUJBQXVDLENBQUM7SUFFNUMsUUFBUTtJQUNSLElBQUksY0FBZ0MsQ0FBQztJQUNyQyxJQUFJLG1CQUFxQyxDQUFDO0lBQzFDLElBQUksc0JBQXVDLENBQUM7SUFDNUMsSUFBSSxnQkFBb0MsQ0FBQztJQUN6QyxJQUFJLGNBQWdDLENBQUM7SUFDckMsSUFBSSxjQUFnQyxDQUFDO0lBQ3JDLElBQUksb0JBQXNDLENBQUM7SUFFM0MsU0FBUztJQUNULElBQUksSUFBWSxDQUFDO0lBQ2pCLElBQUksS0FBYSxDQUFDO0lBQ2xCLElBQUksS0FBYSxDQUFDO0lBQ2xCLElBQUksSUFBWSxDQUFDO0lBQ2pCLElBQUksSUFBWSxDQUFDO0lBQ2pCLElBQUksSUFBWSxDQUFDO0lBQ2pCLElBQUksSUFBWSxD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QyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELElBQUksR0FBRyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pOLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTNCLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pOLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVCLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pOLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElB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LEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQixJQUFJLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2TixTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FB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QUNqQyxhQUFhLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO1FBQ3hDLGFBQWEsQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVqQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFKLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7UUFDM0IsTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFL0IsQ0FBQztBQUVMLENBQUMsRUEvY1MsMEJBQTBCLEtBQTFCLDBCQUEwQixRQStjbkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvPHJlZmVyZW5jZSB0eXBlcz1cIi4uLy4uLy4uLy4uL0NvcmUvQnVpbGQvRnVkZ2VDb3JlLmpzXCIvPlxyXG5pbXBvcnQgZiA9IEZ1ZGdlQ29yZTtcclxuXHJcblxyXG5cclxubmFtZXNwYWNlIEZ1ZGdlUGh5c2ljc19Db21tdW5pY2F0aW9uIHtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaW5pdCk7XHJcbiAgICBjb25zdCBhcHA6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcclxuICAgIGxldCB2aWV3UG9ydDogZi5WaWV3cG9ydDtcclxuICAgIGxldCBoaWVyYXJjaHk6IGYuTm9kZTtcclxuICAgIGxldCBmcHM6IG51bWJlcjtcclxuICAgIGNvbnN0IHRpbWVzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgbGV0IGZwc0Rpc3BsYXk6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImgyI0ZQU1wiKTtcclxuXHJcbiAgICBsZXQgYm9kaWVzOiBmLk5vZGVbXSA9IG5ldyBBcnJheSgpO1xyXG4gICAgbGV0IGdyb3VuZDogZi5Ob2RlO1xyXG4gICAgbGV0IGNtcENhbWVyYTogZi5Db21wb25lbnRDYW1lcmE7XHJcblxyXG4gICAgbGV0IHN0ZXBXaWR0aDogbnVtYmVyID0gMC4xO1xyXG4gICAgbGV0IG1vdmVhYmxlVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybTtcclxuXHJcbiAgICAvL0pvaW50c1xyXG4gICAgbGV0IHByaXNtYXRpY0pvaW50OiBmLkpvaW50UHJpc21hdGljO1xyXG4gICAgbGV0IHByaXNtYXRpY0pvaW50U2xpZGU6IGYuSm9pbnRQcmlzbWF0aWM7XHJcbiAgICBsZXQgcmV2b2x1dGVKb2ludFN3aW5nRG9vcjogZi5Kb2ludFJldm9sdXRlO1xyXG4gICAgbGV0IGN5bGluZHJpY2FsSm9pbnQ6IGYuSm9pbnRDeWxpbmRyaWNhbDtcclxuICAgIGxldCBzcGhlcmljYWxKb2ludDogZi5Kb2ludFNwaGVyaWNhbDtcclxuICAgIGxldCB1bml2ZXJzYWxKb2ludDogZi5Kb2ludFVuaXZlcnNhbDtcclxuICAgIGxldCBzZWNvbmRVbml2ZXJzYWxKb2ludDogZi5Kb2ludFVuaXZlcnNhbDtcclxuXHJcbiAgICAvL1JhZ2RvbGxcclxuICAgIGxldCBoZWFkOiBmLk5vZGU7XHJcbiAgICBsZXQgYm9keTE6IGYuTm9kZTtcclxuICAgIGxldCBib2R5MjogZi5Ob2RlO1xyXG4gICAgbGV0IGFybUw6IGYuTm9kZTtcclxuICAgIGxldCBhcm1SOiBmLk5vZGU7XHJcbiAgICBsZXQgbGVnTDogZi5Ob2RlO1xyXG4gICAgbGV0IGxlZ1I6IGYuTm9kZTtcclxuICAgIGxldCBqb2ludEhlYWRCb2R5OiBmLkpvaW50UmFnZG9sbDtcclxuICAgIGxldCBqb2ludFVwcGVyTG93ZXJCb2R5OiBmLkpvaW50UmFnZG9sbDtcclxuICAgIGxldCBqb2ludEJvZHlBcm1MOiBmLkpvaW50UmFnZG9sbDtcclxuICAgIGxldCBqb2ludEJvZHlBcm1SOiBmLkpvaW50UmFnZG9sbDtcclxuICAgIGxldCBqb2ludEJvZHlMZWdMOiBmLkpvaW50UmFnZG9sbDtcclxuICAgIGxldCBqb2ludEJvZHlMZWdSOiBmLkpvaW50UmFnZG9sbDtcclxuICAgIGxldCBob2xkZXI6IGYuSm9pbnRTcGhlcmljYWw7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXQoX2V2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGYuRGVidWcubG9nKGFwcCk7XHJcbiAgICAgICAgaGllcmFyY2h5ID0gbmV3IGYuTm9kZShcIlNjZW5lXCIpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgaG5kS2V5KTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBobmRLZXlEb3duKTtcclxuXHJcbiAgICAgICAgZ3JvdW5kID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIkdyb3VuZFwiLCBuZXcgZi5NYXRlcmlhbChcIkdyb3VuZFwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuMiwgMC4yLCAwLjIsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDAsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSk7XHJcbiAgICAgICAgbGV0IGNtcEdyb3VuZE1lc2g6IGYuQ29tcG9uZW50VHJhbnNmb3JtID0gZ3JvdW5kLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSk7XHJcbiAgICAgICAgY21wR3JvdW5kTWVzaC5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDE0LCAwLjMsIDE0KSk7XHJcblxyXG4gICAgICAgIGNtcEdyb3VuZE1lc2gubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgLTEuNSwgMCkpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChncm91bmQpO1xyXG5cclxuICAgICAgICAvL1ByaXNtYXRpYyBKb2ludHNcclxuICAgICAgICBib2RpZXNbMF0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiU3ByaW5nX0Zsb29yXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuNCwgMC40LCAwLjQsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzIpO1xyXG4gICAgICAgIGxldCBjbXBDdWJlVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IGJvZGllc1swXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMF0pO1xyXG4gICAgICAgIGNtcEN1YmVUcmFuc2Zvcm0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgMSwgMCkpO1xyXG4gICAgICAgIGNtcEN1YmVUcmFuc2Zvcm0ubXR4TG9jYWwuc2NhbGVZKDAuMik7XHJcbiAgICAgICAgcHJpc21hdGljSm9pbnQgPSBuZXcgZi5Kb2ludFByaXNtYXRpYyhib2RpZXNbMF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgZ3JvdW5kLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIG5ldyBmLlZlY3RvcjMoMCwgMSwgMCkpO1xyXG4gICAgICAgIGJvZGllc1swXS5hZGRDb21wb25lbnQocHJpc21hdGljSm9pbnQpO1xyXG4gICAgICAgIHByaXNtYXRpY0pvaW50LnNwcmluZ0RhbXBpbmcgPSAwO1xyXG4gICAgICAgIHByaXNtYXRpY0pvaW50LnNwcmluZ0ZyZXF1ZW5jeSA9IDE7XHJcbiAgICAgICAgcHJpc21hdGljSm9pbnQubWF4TW90b3IgPSAwO1xyXG4gICAgICAgIHByaXNtYXRpY0pvaW50Lm1pbk1vdG9yID0gMDtcclxuICAgICAgICBwcmlzbWF0aWNKb2ludC5pbnRlcm5hbENvbGxpc2lvbiA9IHRydWU7XHJcblxyXG4gICAgICAgIGJvZGllc1szXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlSm9pbnRCYXNlXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuNCwgMC40LCAwLjQsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1szXSk7XHJcbiAgICAgICAgYm9kaWVzWzNdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC00LCAyLCAtMikpO1xyXG4gICAgICAgIGJvZGllc1szXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDIsIDAuNSwgMC41KSk7XHJcblxyXG4gICAgICAgIGJvZGllc1s0XSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlSm9pbnRTbGlkZVwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigxLCAxLCAwLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzRdKTtcclxuICAgICAgICBib2RpZXNbNF0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoLTQsIDIsIC0yKSk7XHJcbiAgICAgICAgcHJpc21hdGljSm9pbnRTbGlkZSA9IG5ldyBmLkpvaW50UHJpc21hdGljKGJvZGllc1szXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCBib2RpZXNbNF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygxLCAwLCAwKSk7XHJcbiAgICAgICAgYm9kaWVzWzNdLmFkZENvbXBvbmVudChwcmlzbWF0aWNKb2ludFNsaWRlKTtcclxuICAgICAgICBwcmlzbWF0aWNKb2ludFNsaWRlLm1vdG9yRm9yY2UgPSAxMDsgLy9zbyBpdCBkb2VzIG5vdCBzbGlkZSB0b28gbXVjaCBvbiBpdCdzIG93bi5cclxuICAgICAgICBwcmlzbWF0aWNKb2ludFNsaWRlLm1pbk1vdG9yID0gLTE7XHJcbiAgICAgICAgcHJpc21hdGljSm9pbnRTbGlkZS5tYXhNb3RvciA9IDE7XHJcblxyXG4gICAgICAgIC8vUmV2b2x1dGUgSm9pbnRcclxuICAgICAgICBib2RpZXNbNV0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiSGFuZGxlXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuNCwgMC40LCAwLjQsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1s1XSk7XHJcbiAgICAgICAgYm9kaWVzWzVdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDMuNSwgMiwgLTIpKTtcclxuICAgICAgICBib2RpZXNbNV0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjUsIDIsIDAuNSkpO1xyXG5cclxuICAgICAgICBib2RpZXNbNl0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiU3dpbmdEb29yXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDEsIDEsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbNl0pO1xyXG4gICAgICAgIGJvZGllc1s2XS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMyg0LjI1LCAyLCAtMikpO1xyXG4gICAgICAgIGJvZGllc1s2XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEuNSwgMiwgMC4yKSk7XHJcblxyXG4gICAgICAgIHJldm9sdXRlSm9pbnRTd2luZ0Rvb3IgPSBuZXcgZi5Kb2ludFJldm9sdXRlKGJvZGllc1s1XS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCBib2RpZXNbNl0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygwLCAxLCAwKSk7XHJcbiAgICAgICAgYm9kaWVzWzVdLmFkZENvbXBvbmVudChyZXZvbHV0ZUpvaW50U3dpbmdEb29yKTtcclxuICAgICAgICByZXZvbHV0ZUpvaW50U3dpbmdEb29yLm1pbk1vdG9yID0gLTYwO1xyXG4gICAgICAgIHJldm9sdXRlSm9pbnRTd2luZ0Rvb3IubWF4TW90b3IgPSA2MDtcclxuXHJcbiAgICAgICAgLy9DeWxpbmRyaWNhbCBKb2ludFxyXG4gICAgICAgIGJvZGllc1s3XSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJIb2xkZXJcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC40LCAwLjQsIDAuNCwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuU1RBVElDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzddKTtcclxuICAgICAgICBib2RpZXNbN10ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMS41LCAzLCAtMikpO1xyXG4gICAgICAgIGJvZGllc1s3XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDAuNSwgMSwgMC41KSk7XHJcblxyXG4gICAgICAgIGJvZGllc1s4XSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJNb3ZpbmdEcmlsbFwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigxLCAxLCAwLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzhdKTtcclxuICAgICAgICBib2RpZXNbOF0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMS41LCAyLjUsIC0yKSk7XHJcbiAgICAgICAgYm9kaWVzWzhdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMC4zLCAyLCAwLjMpKTtcclxuICAgICAgICBjeWxpbmRyaWNhbEpvaW50ID0gbmV3IGYuSm9pbnRDeWxpbmRyaWNhbChib2RpZXNbN10uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgYm9kaWVzWzhdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIG5ldyBmLlZlY3RvcjMoMCwgMSwgMCkpO1xyXG4gICAgICAgIGJvZGllc1s3XS5hZGRDb21wb25lbnQoY3lsaW5kcmljYWxKb2ludCk7XHJcbiAgICAgICAgY3lsaW5kcmljYWxKb2ludC5taW5Nb3RvciA9IC0xLjI1O1xyXG4gICAgICAgIGN5bGluZHJpY2FsSm9pbnQucm90b3JTcGVlZCA9IDE7XHJcbiAgICAgICAgLy8gY3lsaW5kcmljYWxKb2ludC5yb3RhdGlvbmFsTW90b3JUb3JxdWUgPSAxMDtcclxuICAgICAgICBjeWxpbmRyaWNhbEpvaW50LnJvdG9yVG9ycXVlID0gMTA7XHJcblxyXG4gICAgICAgIC8vU3BoZXJpY2FsIEpvaW50XHJcbiAgICAgICAgYm9kaWVzWzldID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIlNvY2tldFwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjQsIDAuNCwgMC40LCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5TVEFUSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbOV0pO1xyXG4gICAgICAgIGJvZGllc1s5XS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygtMS41LCAzLCAyLjUpKTtcclxuICAgICAgICBib2RpZXNbOV0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjUsIDAuNSwgMC41KSk7XHJcblxyXG4gICAgICAgIGJvZGllc1sxMF0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiQmFsbEpvaW50XCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDEsIDEsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMTBdKTtcclxuICAgICAgICBib2RpZXNbMTBdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC0xLjUsIDIsIDIuNSkpO1xyXG4gICAgICAgIGJvZGllc1sxMF0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjMsIDIsIDAuMykpO1xyXG4gICAgICAgIHNwaGVyaWNhbEpvaW50ID0gbmV3IGYuSm9pbnRTcGhlcmljYWwoYm9kaWVzWzldLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZGllc1sxMF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XHJcbiAgICAgICAgYm9kaWVzWzldLmFkZENvbXBvbmVudChzcGhlcmljYWxKb2ludCk7XHJcblxyXG4gICAgICAgIC8vVW5pdmVyc2FsIEpvaW50XHJcbiAgICAgICAgYm9kaWVzWzExXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJIb2xkZXJcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC40LCAwLjQsIDAuNCwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuU1RBVElDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzExXSk7XHJcbiAgICAgICAgYm9kaWVzWzExXS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygtNS41LCA1LCAyLjUpKTtcclxuICAgICAgICBib2RpZXNbMTFdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMC41LCAwLjUsIDAuNSkpO1xyXG5cclxuICAgICAgICBib2RpZXNbMTJdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIlVuaXZlcnNhbDFcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMSwgMSwgMCwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxMl0pO1xyXG4gICAgICAgIGJvZGllc1sxMl0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoLTUuNSwgMy43NSwgMi41KSk7XHJcbiAgICAgICAgYm9kaWVzWzEyXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDAuMywgMiwgMC4zKSk7XHJcbiAgICAgICAgdW5pdmVyc2FsSm9pbnQgPSBuZXcgZi5Kb2ludFVuaXZlcnNhbChib2RpZXNbMTFdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZGllc1sxMl0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygwLCAxLCAwKSwgbmV3IGYuVmVjdG9yMygxLCAwLCAwKSk7XHJcbiAgICAgICAgYm9kaWVzWzExXS5hZGRDb21wb25lbnQodW5pdmVyc2FsSm9pbnQpO1xyXG5cclxuXHJcbiAgICAgICAgYm9kaWVzWzEzXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJVbml2ZXJzYWwyXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDEsIDEsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMTNdKTtcclxuICAgICAgICBib2RpZXNbMTNdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC01LjUsIDEuNzUsIDIuNSkpO1xyXG4gICAgICAgIGJvZGllc1sxM10ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjMsIDIsIDAuMykpO1xyXG4gICAgICAgIHNlY29uZFVuaXZlcnNhbEpvaW50ID0gbmV3IGYuSm9pbnRVbml2ZXJzYWwoYm9kaWVzWzEyXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCBib2RpZXNbMTNdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIG5ldyBmLlZlY3RvcjMoMCwgMCwgMSksIG5ldyBmLlZlY3RvcjMoMSwgMCwgMCksIG5ldyBmLlZlY3RvcjMoMCwgLTEsIDApKTtcclxuICAgICAgICBib2RpZXNbMTJdLmFkZENvbXBvbmVudChzZWNvbmRVbml2ZXJzYWxKb2ludCk7XHJcblxyXG5cclxuICAgICAgICAvL01pc2NlbGxhbmVvdXNcclxuICAgICAgICBib2RpZXNbMV0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiQ3ViZV8yXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDEsIDEsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEpO1xyXG4gICAgICAgIGxldCBjbXBDdWJlVHJhbnNmb3JtMjogZi5Db21wb25lbnRUcmFuc2Zvcm0gPSBib2RpZXNbMV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50VHJhbnNmb3JtKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzFdKTtcclxuICAgICAgICBjbXBDdWJlVHJhbnNmb3JtMi5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygwLCAyLCAwKSk7XHJcblxyXG4gICAgICAgIGJvZGllc1syXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlXzNcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMSwgMCwgMCwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQyk7XHJcbiAgICAgICAgbGV0IGNtcEN1YmVUcmFuc2Zvcm0zOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IGJvZGllc1syXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMl0pO1xyXG4gICAgICAgIGNtcEN1YmVUcmFuc2Zvcm0zLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDAuNSwgMywgMC41KSk7XHJcblxyXG4gICAgICAgIGJvZGllc1s0MF0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiQ3ViZV9Ob25lUGh5c2ljc1wiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLCAxLCAxLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDKTtcclxuICAgICAgICBib2RpZXNbNDBdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbNDBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSkpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbNDBdKTtcclxuICAgICAgICBib2RpZXNbNDBdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC00LjUsIDMuNSwgMC41KSk7XHJcblxyXG4gICAgICAgIC8vS2luZW1hdGljXHJcbiAgICAgICAgYm9kaWVzWzNdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIlBsYXllckNvbnRyb2xsZWRDdWJlXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAsIDAsIDEsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLktJTkVNQVRJQyk7XHJcbiAgICAgICAgbW92ZWFibGVUcmFuc2Zvcm0gPSBib2RpZXNbM10uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50VHJhbnNmb3JtKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzNdKTtcclxuICAgICAgICBtb3ZlYWJsZVRyYW5zZm9ybS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMyg1LCA2LCA1KSk7XHJcblxyXG4gICAgICAgIC8vUmFnZG9sbFxyXG4gICAgICAgIGNyZWF0ZVJhZ2RvbGwoKTtcclxuXHJcbiAgICAgICAgbGV0IGNtcExpZ2h0OiBmLkNvbXBvbmVudExpZ2h0ID0gbmV3IGYuQ29tcG9uZW50TGlnaHQobmV3IGYuTGlnaHREaXJlY3Rpb25hbChmLkNvbG9yLkNTUyhcIldISVRFXCIpKSk7XHJcbiAgICAgICAgY21wTGlnaHQubXR4UGl2b3QubG9va0F0KG5ldyBmLlZlY3RvcjMoMC41LCAtMSwgLTAuOCkpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hZGRDb21wb25lbnQoY21wTGlnaHQpO1xyXG5cclxuICAgICAgICBjbXBDYW1lcmEgPSBuZXcgZi5Db21wb25lbnRDYW1lcmEoKTtcclxuICAgICAgICBjbXBDYW1lcmEuY2xyQmFja2dyb3VuZCA9IGYuQ29sb3IuQ1NTKFwiR1JFWVwiKTtcclxuICAgICAgICBjbXBDYW1lcmEubXR4UGl2b3QudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgMiwgMTcpKTtcclxuICAgICAgICBjbXBDYW1lcmEubXR4UGl2b3QubG9va0F0KGYuVmVjdG9yMy5aRVJPKCkpO1xyXG5cclxuXHJcbiAgICAgICAgdmlld1BvcnQgPSBuZXcgZi5WaWV3cG9ydCgpO1xyXG4gICAgICAgIHZpZXdQb3J0LmluaXRpYWxpemUoXCJWaWV3cG9ydFwiLCBoaWVyYXJjaHksIGNtcENhbWVyYSwgYXBwKTtcclxuXHJcbiAgICAgICAgdmlld1BvcnQuc2hvd1NjZW5lR3JhcGgoKTtcclxuICAgICAgICBmLkxvb3AuYWRkRXZlbnRMaXN0ZW5lcihmLkVWRU5ULkxPT1BfRlJBTUUsIHVwZGF0ZSk7XHJcblxyXG4gICAgICAgIHZpZXdQb3J0LmFjdGl2YXRlUG9pbnRlckV2ZW50KGYuRVZFTlRfUE9JTlRFUi5ET1dOLCB0cnVlKTtcclxuICAgICAgICB2aWV3UG9ydC5hZGRFdmVudExpc3RlbmVyKGYuRVZFTlRfUE9JTlRFUi5ET1dOLCBobmRQb2ludGVyRG93bik7XHJcbiAgICAgICAgdmlld1BvcnQuYWN0aXZhdGVQb2ludGVyRXZlbnQoZi5FVkVOVF9QT0lOVEVSLlVQLCB0cnVlKTtcclxuICAgICAgICB2aWV3UG9ydC5hZGRFdmVudExpc3RlbmVyKGYuRVZFTlRfUE9JTlRFUi5VUCwgaG5kUG9pbnRlclVwKTtcclxuXHJcbiAgICAgICAgZi5QaHlzaWNzLmFkanVzdFRyYW5zZm9ybXMoaGllcmFyY2h5KTtcclxuICAgICAgICBmLkxvb3Auc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgZi5QaHlzaWNzLndvcmxkLnNpbXVsYXRlKCk7XHJcbiAgICAgICAgdmlld1BvcnQuZHJhdygpO1xyXG4gICAgICAgIG1lYXN1cmVGUFMoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtZWFzdXJlRlBTKCk6IHZvaWQge1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBub3c6IG51bWJlciA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgICAgICAgICB3aGlsZSAodGltZXMubGVuZ3RoID4gMCAmJiB0aW1lc1swXSA8PSBub3cgLSAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRpbWVzLnB1c2gobm93KTtcclxuICAgICAgICAgICAgZnBzID0gdGltZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmcHNEaXNwbGF5LnRleHRDb250ZW50ID0gXCJGUFM6IFwiICsgZnBzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShfbmFtZTogc3RyaW5nLCBfbWF0ZXJpYWw6IGYuTWF0ZXJpYWwsIF9tZXNoOiBmLk1lc2gsIF9tYXNzOiBudW1iZXIsIF9waHlzaWNzVHlwZTogZi5CT0RZX1RZUEUsIF9ncm91cDogZi5DT0xMSVNJT05fR1JPVVAgPSBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBfY29sVHlwZTogZi5DT0xMSURFUl9UWVBFID0gZi5DT0xMSURFUl9UWVBFLkNVQkUpOiBmLk5vZGUge1xyXG4gICAgICAgIGxldCBub2RlOiBmLk5vZGUgPSBuZXcgZi5Ob2RlKF9uYW1lKTtcclxuICAgICAgICBsZXQgY21wTWVzaDogZi5Db21wb25lbnRNZXNoID0gbmV3IGYuQ29tcG9uZW50TWVzaChfbWVzaCk7XHJcbiAgICAgICAgbGV0IGNtcE1hdGVyaWFsOiBmLkNvbXBvbmVudE1hdGVyaWFsID0gbmV3IGYuQ29tcG9uZW50TWF0ZXJpYWwoX21hdGVyaWFsKTtcclxuXHJcbiAgICAgICAgbGV0IGNtcFRyYW5zZm9ybTogZi5Db21wb25lbnRUcmFuc2Zvcm0gPSBuZXcgZi5Db21wb25lbnRUcmFuc2Zvcm0oKTtcclxuXHJcbiAgICAgICAgbGV0IGNtcFJpZ2lkYm9keTogZi5Db21wb25lbnRSaWdpZGJvZHkgPSBuZXcgZi5Db21wb25lbnRSaWdpZGJvZHkoX21hc3MsIF9waHlzaWNzVHlwZSwgX2NvbFR5cGUsIF9ncm91cCk7XHJcbiAgICAgICAgY21wUmlnaWRib2R5LnJlc3RpdHV0aW9uID0gMC4yO1xyXG4gICAgICAgIGNtcFJpZ2lkYm9keS5mcmljdGlvbiA9IDAuODtcclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBNZXNoKTtcclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBNYXRlcmlhbCk7XHJcbiAgICAgICAgbm9kZS5hZGRDb21wb25lbnQoY21wVHJhbnNmb3JtKTtcclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBSaWdpZGJvZHkpO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGhuZEtleShfZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgaG9yaXpvbnRhbDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgdmVydGljYWw6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGhlaWdodDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5BKSB7XHJcbiAgICAgICAgICAgIGhvcml6b250YWwgLT0gMSAqIHN0ZXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5EKSB7XHJcbiAgICAgICAgICAgIGhvcml6b250YWwgKz0gMSAqIHN0ZXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5XKSB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsIC09IDEgKiBzdGVwV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuUykge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbCArPSAxICogc3RlcFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLlEpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ICs9IDEgKiBzdGVwV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuRSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gMSAqIHN0ZXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBvczogZi5WZWN0b3IzID0gbW92ZWFibGVUcmFuc2Zvcm0ubXR4TG9jYWwudHJhbnNsYXRpb247XHJcbiAgICAgICAgcG9zLmFkZChuZXcgZi5WZWN0b3IzKGhvcml6b250YWwsIGhlaWdodCwgdmVydGljYWwpKTtcclxuICAgICAgICBtb3ZlYWJsZVRyYW5zZm9ybS5tdHhMb2NhbC50cmFuc2xhdGlvbiA9IHBvcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBobmRLZXlEb3duKF9ldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQgeyAvL1Rlc3QgZm9yIGpvaW50IGNoYW5nZXNcclxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLlkpIHtcclxuICAgICAgICAgICAgcHJpc21hdGljSm9pbnQuYm9keUFuY2hvci5hcHBseUZvcmNlKG5ldyBmLlZlY3RvcjMoMCwgMSAqIDEwMDAsIDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5VKSB7XHJcbiAgICAgICAgICAgIHByaXNtYXRpY0pvaW50U2xpZGUuYm9keVRpZWQuYXBwbHlGb3JjZShuZXcgZi5WZWN0b3IzKDEgKiAtMTAwLCAwLCAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuSSkge1xyXG4gICAgICAgICAgICBwcmlzbWF0aWNKb2ludFNsaWRlLmJvZHlUaWVkLmFwcGx5Rm9yY2UobmV3IGYuVmVjdG9yMygxICogMTAwLCAwLCAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuTykge1xyXG4gICAgICAgICAgICByZXZvbHV0ZUpvaW50U3dpbmdEb29yLmJvZHlUaWVkLmFwcGx5Rm9yY2UobmV3IGYuVmVjdG9yMygwLCAwLCAxICogMTAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuUCkge1xyXG4gICAgICAgICAgICByZXZvbHV0ZUpvaW50U3dpbmdEb29yLmJvZHlUaWVkLmFwcGx5Rm9yY2UobmV3IGYuVmVjdG9yMygwLCAwLCAxICogLTEwMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLkYpIHtcclxuICAgICAgICAgICAgY3lsaW5kcmljYWxKb2ludC5ib2R5VGllZC5hcHBseUZvcmNlKG5ldyBmLlZlY3RvcjMoMCwgMSAqIDMwMCwgMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLlYpIHtcclxuICAgICAgICAgICAgY3lsaW5kcmljYWxKb2ludC5ib2R5VGllZC5hcHBseVRvcnF1ZShuZXcgZi5WZWN0b3IzKDAsIDEgKiAxMDAsIDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5HKSB7XHJcbiAgICAgICAgICAgIHNwaGVyaWNhbEpvaW50LmJvZHlUaWVkLmFwcGx5VG9ycXVlKG5ldyBmLlZlY3RvcjMoMCwgMSAqIDEwMCwgMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLkgpIHtcclxuICAgICAgICAgICAgc2Vjb25kVW5pdmVyc2FsSm9pbnQuYm9keVRpZWQuYXBwbHlGb3JjZShuZXcgZi5WZWN0b3IzKDAsIDAsIDEgKiAxMDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5KKSB7XHJcbiAgICAgICAgICAgIHNlY29uZFVuaXZlcnNhbEpvaW50LmJvZHlUaWVkLmFwcGx5VG9ycXVlKG5ldyBmLlZlY3RvcjMoMCwgMSAqIDEwMCwgMCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9QaHlzaWNzIERlYnVnc1xyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuTikgeyAvL1RvZ2dsZSBEZWJ1ZyBEcmF3XHJcbiAgICAgICAgICAgIGYuUGh5c2ljcy5zZXR0aW5ncy5kZWJ1Z0RyYXcgPSAhZi5QaHlzaWNzLnNldHRpbmdzLmRlYnVnRHJhdztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5NKSB7IC8vR28gdGhyb3VnaCB0aGUgZGlmZmVyZW50IG1vZGVzXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50TW9kZTogbnVtYmVyID0gZi5QaHlzaWNzLnNldHRpbmdzLmRlYnVnTW9kZTtcclxuICAgICAgICAgICAgY3VycmVudE1vZGUgPSBjdXJyZW50TW9kZSA9PSA0ID8gMCA6IGYuUGh5c2ljcy5zZXR0aW5ncy5kZWJ1Z01vZGUgKz0gMTtcclxuICAgICAgICAgICAgZi5QaHlzaWNzLnNldHRpbmdzLmRlYnVnTW9kZSA9IGN1cnJlbnRNb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaG5kUG9pbnRlckRvd24oX2V2ZW50OiBmLkV2ZW50UG9pbnRlcik6IHZvaWQge1xyXG4gICAgICAgIGxldCBtb3VzZTogZi5WZWN0b3IyID0gbmV3IGYuVmVjdG9yMihfZXZlbnQucG9pbnRlclgsIF9ldmVudC5wb2ludGVyWSk7XHJcbiAgICAgICAgbGV0IHBvc1Byb2plY3Rpb246IGYuVmVjdG9yMiA9IHZpZXdQb3J0LnBvaW50Q2xpZW50VG9Qcm9qZWN0aW9uKG1vdXNlKTtcclxuXHJcbiAgICAgICAgbGV0IHJheTogZi5SYXkgPSBuZXcgZi5SYXkobmV3IGYuVmVjdG9yMygtcG9zUHJvamVjdGlvbi54LCBwb3NQcm9qZWN0aW9uLnksIDEpKTtcclxuXHJcblxyXG4gICAgICAgIHJheS5vcmlnaW4udHJhbnNmb3JtKGNtcENhbWVyYS5tdHhQaXZvdCk7XHJcbiAgICAgICAgcmF5LmRpcmVjdGlvbi50cmFuc2Zvcm0oY21wQ2FtZXJhLm10eFBpdm90LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vUmF5XHJcbiAgICAgICAgbGV0IGhpdEluZm86IGYuUmF5SGl0SW5mbyA9IGYuUGh5c2ljcy5yYXljYXN0KHJheS5vcmlnaW4sIHJheS5kaXJlY3Rpb24sIDIwKTtcclxuICAgICAgICBpZiAoaGl0SW5mby5oaXQpXHJcbiAgICAgICAgICAgIGYuRGVidWcubG9nKGhpdEluZm8ucmlnaWRib2R5Q29tcG9uZW50Lm5vZGUubmFtZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBmLkRlYnVnLmxvZyhcIm1pc3NcIik7XHJcbiAgICAgICAgbGV0IHBvczogZi5WZWN0b3IzID0gaGl0SW5mby5oaXRQb2ludDtcclxuICAgICAgICBtb3ZlYWJsZVRyYW5zZm9ybS5tdHhMb2NhbC50cmFuc2xhdGlvbiA9IHBvcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBobmRQb2ludGVyVXAoX2V2ZW50OiBmLkV2ZW50UG9pbnRlcik6IHZvaWQge1xyXG4gICAgICAvL1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhZ2RvbGwoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHBvczogZi5WZWN0b3IzID0gbmV3IGYuVmVjdG9yMyg1LCA0LCA1KTtcclxuICAgICAgICBsZXQgc2NhbGU6IGYuVmVjdG9yMyA9IG5ldyBmLlZlY3RvcjMoMC40LCAwLjUsIDAuNCk7XHJcbiAgICAgICAgaGVhZCA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJIZWFkUkRcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC43LCAxLCAwLjMsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEsIGYuQ09MTElERVJfVFlQRS5DVUJFKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoaGVhZCk7XHJcbiAgICAgICAgcG9zLmFkZChuZXcgZi5WZWN0b3IzKDAsIDAuNCwgMCkpO1xyXG4gICAgICAgIGhlYWQubXR4TG9jYWwudHJhbnNsYXRlKHBvcyk7XHJcbiAgICAgICAgaGVhZC5tdHhMb2NhbC5zY2FsZShzY2FsZSk7XHJcblxyXG4gICAgICAgIGJvZHkxID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcImJvZHkxXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuNywgMSwgMC4zLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xLCBmLkNPTExJREVSX1RZUEUuQ1VCRSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZHkxKTtcclxuICAgICAgICBwb3MuYWRkKG5ldyBmLlZlY3RvcjMoMCwgLTAuNTUsIDApKTtcclxuICAgICAgICBzY2FsZSA9IG5ldyBmLlZlY3RvcjMoMC42LCAwLjYsIDAuNCk7XHJcbiAgICAgICAgYm9keTEubXR4TG9jYWwudHJhbnNsYXRlKHBvcyk7XHJcbiAgICAgICAgYm9keTEubXR4TG9jYWwuc2NhbGUoc2NhbGUpO1xyXG5cclxuICAgICAgICBib2R5MiA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJib2R5MlwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjcsIDEsIDAuMywgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSwgZi5DT0xMSURFUl9UWVBFLkNVQkUpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2R5Mik7XHJcbiAgICAgICAgcG9zLmFkZChuZXcgZi5WZWN0b3IzKDAsIC0wLjM1LCAwKSk7XHJcbiAgICAgICAgc2NhbGUgPSBuZXcgZi5WZWN0b3IzKDAuNCwgMC40LCAwLjM1KTtcclxuICAgICAgICBib2R5Mi5tdHhMb2NhbC50cmFuc2xhdGUocG9zKTtcclxuICAgICAgICBib2R5Mi5tdHhMb2NhbC5zY2FsZShzY2FsZSk7XHJcblxyXG4gICAgICAgIGxlZ0wgPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwibGVnTFwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjcsIDEsIDAuMywgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSwgZi5DT0xMSURFUl9UWVBFLkNVQkUpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChsZWdMKTtcclxuICAgICAgICBwb3MuYWRkKG5ldyBmLlZlY3RvcjMoLTAuMjUsIC0wLjgsIDApKTtcclxuICAgICAgICBzY2FsZSA9IG5ldyBmLlZlY3RvcjMoMC4zLCAxLCAwLjMpO1xyXG4gICAgICAgIGxlZ0wubXR4TG9jYWwudHJhbnNsYXRlKHBvcyk7XHJcbiAgICAgICAgbGVnTC5tdHhMb2NhbC5zY2FsZShzY2FsZSk7XHJcblxyXG4gICAgICAgIGxlZ1IgPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwibGVnUlwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjcsIDEsIDAuMywgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSwgZi5DT0xMSURFUl9UWVBFLkNVQkUpO1xyXG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChsZWdSKTtcclxuICAgICAgICBwb3MuYWRkKG5ldyBmLlZlY3RvcjMoMC41LCAwLCAwKSk7XHJcbiAgICAgICAgc2NhbGUgPSBuZXcgZi5WZWN0b3IzKDAuMywgMSwgMC4zKTtcclxuICAgICAgICBsZWdSLm10eExvY2FsLnRyYW5zbGF0ZShwb3MpO1xyXG4gICAgICAgIGxlZ1IubXR4TG9jYWwuc2NhbGUoc2NhbGUpO1xyXG5cclxuICAgICAgICBhcm1SID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcImFybVJcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC43LCAxLCAwLjMsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEsIGYuQ09MTElERVJfVFlQRS5DVUJFKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYXJtUik7XHJcbiAgICAgICAgcG9zLmFkZChuZXcgZi5WZWN0b3IzKDAuNDUsIDEuNSwgMCkpO1xyXG4gICAgICAgIHNjYWxlID0gbmV3IGYuVmVjdG9yMygxLCAwLjIsIDAuMik7XHJcbiAgICAgICAgYXJtUi5tdHhMb2NhbC50cmFuc2xhdGUocG9zKTtcclxuICAgICAgICBhcm1SLm10eExvY2FsLnNjYWxlKHNjYWxlKTtcclxuXHJcbiAgICAgICAgYXJtTCA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJhcm1MXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuNywgMSwgMC4zLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xLCBmLkNPTExJREVSX1RZUEUuQ1VCRSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGFybUwpO1xyXG4gICAgICAgIHBvcy5hZGQobmV3IGYuVmVjdG9yMygtMS40NSwgMCwgMCkpO1xyXG4gICAgICAgIHNjYWxlID0gbmV3IGYuVmVjdG9yMygxLCAwLjIsIDAuMik7XHJcbiAgICAgICAgYXJtTC5tdHhMb2NhbC50cmFuc2xhdGUocG9zKTtcclxuICAgICAgICBhcm1MLm10eExvY2FsLnNjYWxlKHNjYWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHg6IGYuVmVjdG9yMyA9IG5ldyBmLlZlY3RvcjMoMSwgMCwgMCk7XHJcbiAgICAgICAgbGV0IHk6IGYuVmVjdG9yMyA9IG5ldyBmLlZlY3RvcjMoMCwgMSwgMCk7XHJcbiAgICAgICAgbGV0IHo6IGYuVmVjdG9yMyA9IG5ldyBmLlZlY3RvcjMoMCwgMCwgMSk7XHJcblxyXG4gICAgICAgIGpvaW50SGVhZEJvZHkgPSBuZXcgZi5Kb2ludFJhZ2RvbGwoaGVhZC5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCBib2R5MS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCB5LCB4LCBuZXcgZi5WZWN0b3IzKDAsIC0wLjIsIDApKTtcclxuICAgICAgICBqb2ludEhlYWRCb2R5LnNwcmluZ0ZyZXF1ZW5jeVN3aW5nID0gMTA7XHJcbiAgICAgICAgam9pbnRIZWFkQm9keS5zcHJpbmdEYW1waW5nU3dpbmcgPSAxO1xyXG4gICAgICAgIGpvaW50SGVhZEJvZHkubWF4QW5nbGVGaXJzdEF4aXMgPSA5MDtcclxuICAgICAgICBqb2ludEhlYWRCb2R5Lm1heEFuZ2xlU2Vjb25kQXhpcyA9IDcwO1xyXG4gICAgICAgIGpvaW50SGVhZEJvZHkubWluTW90b3JUd2lzdCA9IC05MDtcclxuICAgICAgICBqb2ludEhlYWRCb2R5Lm1heE1vdG9yVHdpc3QgPSA5MDtcclxuICAgICAgICBqb2ludEhlYWRCb2R5LnNwcmluZ0ZyZXF1ZW5jeVR3aXN0ID0gMTA7XHJcbiAgICAgICAgam9pbnRIZWFkQm9keS5zcHJpbmdEYW1waW5nVHdpc3QgPSAxO1xyXG4gICAgICAgIGhlYWQuYWRkQ29tcG9uZW50KGpvaW50SGVhZEJvZHkpO1xyXG5cclxuICAgICAgICBqb2ludFVwcGVyTG93ZXJCb2R5ID0gbmV3IGYuSm9pbnRSYWdkb2xsKGJvZHkxLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZHkyLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIHksIHgsIG5ldyBmLlZlY3RvcjMoMCwgLTAuNCwgMCkpO1xyXG4gICAgICAgIGpvaW50VXBwZXJMb3dlckJvZHkuc3ByaW5nRnJlcXVlbmN5U3dpbmcgPSAxMDtcclxuICAgICAgICBqb2ludFVwcGVyTG93ZXJCb2R5LnNwcmluZ0RhbXBpbmdTd2luZyA9IDE7XHJcbiAgICAgICAgam9pbnRVcHBlckxvd2VyQm9keS5tYXhBbmdsZUZpcnN0QXhpcyA9IDkwO1xyXG4gICAgICAgIGpvaW50VXBwZXJMb3dlckJvZHkubWF4QW5nbGVTZWNvbmRBeGlzID0gOTA7XHJcbiAgICAgICAgam9pbnRVcHBlckxvd2VyQm9keS5taW5Nb3RvclR3aXN0ID0gLTkwO1xyXG4gICAgICAgIGpvaW50VXBwZXJMb3dlckJvZHkubWF4TW90b3JUd2lzdCA9IDkwO1xyXG4gICAgICAgIGpvaW50VXBwZXJMb3dlckJvZHkuc3ByaW5nRnJlcXVlbmN5VHdpc3QgPSAxMDtcclxuICAgICAgICBqb2ludFVwcGVyTG93ZXJCb2R5LnNwcmluZ0RhbXBpbmdUd2lzdCA9IDE7XHJcbiAgICAgICAgYm9keTEuYWRkQ29tcG9uZW50KGpvaW50VXBwZXJMb3dlckJvZHkpO1xyXG5cclxuICAgICAgICBqb2ludEJvZHlBcm1MID0gbmV3IGYuSm9pbnRSYWdkb2xsKGFybUwuZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgYm9keTEuZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgeCwgeiwgbmV3IGYuVmVjdG9yMygwLjUsIDAsIDApKTtcclxuICAgICAgICBqb2ludEJvZHlBcm1MLnNwcmluZ0ZyZXF1ZW5jeVN3aW5nID0gMTA7XHJcbiAgICAgICAgam9pbnRCb2R5QXJtTC5zcHJpbmdEYW1waW5nU3dpbmcgPSAxO1xyXG4gICAgICAgIGpvaW50Qm9keUFybUwubWF4QW5nbGVGaXJzdEF4aXMgPSA5MDtcclxuICAgICAgICBqb2ludEJvZHlBcm1MLm1heEFuZ2xlU2Vjb25kQXhpcyA9IDkwO1xyXG4gICAgICAgIGpvaW50Qm9keUFybUwubWluTW90b3JUd2lzdCA9IC05MDtcclxuICAgICAgICBqb2ludEJvZHlBcm1MLm1heE1vdG9yVHdpc3QgPSA5MDtcclxuICAgICAgICBqb2ludEJvZHlBcm1MLnNwcmluZ0ZyZXF1ZW5jeVR3aXN0ID0gMTA7XHJcbiAgICAgICAgam9pbnRCb2R5QXJtTC5zcHJpbmdEYW1waW5nVHdpc3QgPSAxO1xyXG4gICAgICAgIGFybUwuYWRkQ29tcG9uZW50KGpvaW50Qm9keUFybUwpO1xyXG5cclxuICAgICAgICB4LnggPSAtMTtcclxuICAgICAgICBqb2ludEJvZHlBcm1SID0gbmV3IGYuSm9pbnRSYWdkb2xsKGFybVIuZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgYm9keTEuZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgeCwgeiwgbmV3IGYuVmVjdG9yMygtMC41LCAwLCAwKSk7XHJcbiAgICAgICAgam9pbnRCb2R5QXJtUi5zcHJpbmdGcmVxdWVuY3lTd2luZyA9IDEwO1xyXG4gICAgICAgIGpvaW50Qm9keUFybVIuc3ByaW5nRGFtcGluZ1N3aW5nID0gMTtcclxuICAgICAgICBqb2ludEJvZHlBcm1SLm1heEFuZ2xlRmlyc3RBeGlzID0gOTA7XHJcbiAgICAgICAgam9pbnRCb2R5QXJtUi5tYXhBbmdsZVNlY29uZEF4aXMgPSA5MDtcclxuICAgICAgICBqb2ludEJvZHlBcm1SLm1pbk1vdG9yVHdpc3QgPSAtOTA7XHJcbiAgICAgICAgam9pbnRCb2R5QXJtUi5tYXhNb3RvclR3aXN0ID0gOTA7XHJcbiAgICAgICAgam9pbnRCb2R5QXJtUi5zcHJpbmdGcmVxdWVuY3lUd2lzdCA9IDEwO1xyXG4gICAgICAgIGpvaW50Qm9keUFybVIuc3ByaW5nRGFtcGluZ1R3aXN0ID0gMTtcclxuICAgICAgICBhcm1SLmFkZENvbXBvbmVudChqb2ludEJvZHlBcm1SKTtcclxuXHJcbiAgICAgICAgam9pbnRCb2R5TGVnTCA9IG5ldyBmLkpvaW50UmFnZG9sbChsZWdMLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZHkxLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIHksIHgsIG5ldyBmLlZlY3RvcjMoMCwgMC41LCAwKSk7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnTC5zcHJpbmdGcmVxdWVuY3lTd2luZyA9IDEwO1xyXG4gICAgICAgIGpvaW50Qm9keUxlZ0wuc3ByaW5nRGFtcGluZ1N3aW5nID0gMTtcclxuICAgICAgICBqb2ludEJvZHlMZWdMLm1heEFuZ2xlRmlyc3RBeGlzID0gOTA7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnTC5tYXhBbmdsZVNlY29uZEF4aXMgPSA5MDtcclxuICAgICAgICBqb2ludEJvZHlMZWdMLm1pbk1vdG9yVHdpc3QgPSAtOTA7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnTC5tYXhNb3RvclR3aXN0ID0gOTA7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnTC5zcHJpbmdGcmVxdWVuY3lUd2lzdCA9IDEwO1xyXG4gICAgICAgIGpvaW50Qm9keUxlZ0wuc3ByaW5nRGFtcGluZ1R3aXN0ID0gMTtcclxuICAgICAgICBsZWdMLmFkZENvbXBvbmVudChqb2ludEJvZHlMZWdMKTtcclxuXHJcbiAgICAgICAgam9pbnRCb2R5TGVnUiA9IG5ldyBmLkpvaW50UmFnZG9sbChsZWdSLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZHkxLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIHksIHgsIG5ldyBmLlZlY3RvcjMoMCwgMC41LCAwKSk7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnUi5zcHJpbmdGcmVxdWVuY3lTd2luZyA9IDEwO1xyXG4gICAgICAgIGpvaW50Qm9keUxlZ1Iuc3ByaW5nRGFtcGluZ1N3aW5nID0gMTtcclxuICAgICAgICBqb2ludEJvZHlMZWdSLm1heEFuZ2xlRmlyc3RBeGlzID0gOTA7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnUi5tYXhBbmdsZVNlY29uZEF4aXMgPSA5MDtcclxuICAgICAgICBqb2ludEJvZHlMZWdSLm1pbk1vdG9yVHdpc3QgPSAtOTA7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnUi5tYXhNb3RvclR3aXN0ID0gOTA7XHJcbiAgICAgICAgam9pbnRCb2R5TGVnUi5zcHJpbmdGcmVxdWVuY3lUd2lzdCA9IDEwO1xyXG4gICAgICAgIGpvaW50Qm9keUxlZ1Iuc3ByaW5nRGFtcGluZ1R3aXN0ID0gMTtcclxuICAgICAgICBsZWdSLmFkZENvbXBvbmVudChqb2ludEJvZHlMZWdSKTtcclxuXHJcbiAgICAgICAgaG9sZGVyID0gbmV3IGYuSm9pbnRTcGhlcmljYWwobW92ZWFibGVUcmFuc2Zvcm0ubm9kZS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCBoZWFkLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIG5ldyBmLlZlY3RvcjMoMCwgMCwgMCkpO1xyXG4gICAgICAgIG1vdmVhYmxlVHJhbnNmb3JtLm5vZGUuYWRkQ29tcG9uZW50KGhvbGRlcik7XHJcbiAgICAgICAgaG9sZGVyLnNwcmluZ0RhbXBpbmcgPSAwLjE7XHJcbiAgICAgICAgaG9sZGVyLnNwcmluZ0ZyZXF1ZW5jeSA9IDE7XHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==