"use strict";
// /<reference types="../../../../Core/Build/FudgeCore.js"/>
var f = FudgeCore;
var FudgePhysics_Communication;
(function (FudgePhysics_Communication) {
    window.addEventListener("load", init);
    const app = document.querySelector("canvas");
    let viewPort;
    let hierarchy;
    let fps;
    const times = [];
    let fpsDisplay = document.querySelector("h2#FPS");
    let bodies = new Array();
    let origin = new f.Vector3(-5, 0.25, 0);
    let direction = new f.Vector3(1, 0, 0);
    let hitInfo = new f.RayHitInfo();
    let ground;
    let stepWidth = 0.1;
    let moveableTransform;
    function init(_event) {
        f.Debug.log(app);
        //f.RenderManager.initialize();
        //f.Physics.initializePhysics();
        hierarchy = new f.Node("Scene");
        document.addEventListener("keypress", hndKey);
        ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_1);
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.mtxLocal.scale(new f.Vector3(10, 0.3, 10));
        cmpGroundMesh.mtxLocal.translate(new f.Vector3(0, -1.5, 0));
        hierarchy.appendChild(ground);
        bodies[0] = createCompleteMeshNode("Cube_1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_2);
        let cmpCubeTransform = bodies[0].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[0]);
        cmpCubeTransform.mtxLocal.translate(new f.Vector3(0, 7, 0));
        bodies[1] = createCompleteMeshNode("Cube_2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 1, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1);
        let cmpCubeTransform2 = bodies[1].getComponent(f.ComponentTransform);
        bodies[0].appendChild(bodies[1]);
        bodies[1].removeComponent(bodies[1].getComponent(f.ComponentRigidbody));
        cmpCubeTransform2.mtxLocal.translate(new f.Vector3(0, 1, 0));
        bodies[2] = createCompleteMeshNode("Cube_3", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC);
        let cmpCubeTransform3 = bodies[2].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[2]);
        cmpCubeTransform3.mtxLocal.translate(new f.Vector3(0.5, 3, 0.5));
        bodies[3] = createCompleteMeshNode("Cube_3", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0, 1, 1))), new f.MeshCube(), 1, f.BODY_TYPE.KINEMATIC);
        moveableTransform = bodies[3].getComponent(f.ComponentTransform);
        hierarchy.appendChild(bodies[3]);
        moveableTransform.mtxLocal.translate(new f.Vector3(-4, 1, 0));
        bodies[4] = createCompleteMeshNode("Pyramid", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.GROUP_1, f.COLLIDER_TYPE.PYRAMID);
        hierarchy.appendChild(bodies[4]);
        bodies[4].mtxLocal.translate(new f.Vector3(0, 4, 3));
        bodies[4].mtxLocal.scale(new f.Vector3(1.5, 1.5, 1.5));
        bodies[4].mtxLocal.rotateY(120, false);
        //#region  CompoundCollider Workaround
        //Compound Collider Workaround, through making ONE convex collider on a main object that has the shape of the result object instead of having multiple shapes on a rigidbody
        let colVertices = new Float32Array([
            1, -1, 1,
            0, -2, 0,
            1, 1, 1,
            -1, 1, 1,
            -1, -1, 1,
            -2, 0, 0,
            1, 1, -1,
            -1, 1, -1,
            -1, -1, -1,
            0, 0, -2,
            1, -1, -1,
            2, 0, 0,
            0, 2, 0,
            0, 0, 2
        ]);
        //Main Shape
        bodies[5] = createCompleteMeshNode("Compound", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshCube, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.CONVEX, colVertices);
        hierarchy.appendChild(bodies[5]);
        bodies[5].mtxLocal.translate(new f.Vector3(2.5, 4, 3.5));
        bodies[5].mtxLocal.rotateX(27);
        bodies[5].mtxLocal.rotateY(32);
        //Components
        bodies[6] = createCompleteMeshNode("CompoundUpper", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[6].removeComponent(bodies[6].getComponent(f.ComponentRigidbody));
        bodies[6].mtxLocal.translateY(0.5);
        bodies[6].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[6]);
        bodies[7] = createCompleteMeshNode("CompoundLower", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[7].removeComponent(bodies[7].getComponent(f.ComponentRigidbody));
        bodies[7].mtxLocal.rotateX(180);
        bodies[7].mtxLocal.translateY(0.5);
        bodies[7].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[7]);
        bodies[8] = createCompleteMeshNode("CompoundLeft", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[8].removeComponent(bodies[8].getComponent(f.ComponentRigidbody));
        bodies[8].mtxLocal.rotateZ(90);
        bodies[8].mtxLocal.translateY(0.5);
        bodies[8].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[8]);
        bodies[9] = createCompleteMeshNode("CompoundRight", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[9].removeComponent(bodies[9].getComponent(f.ComponentRigidbody));
        bodies[9].mtxLocal.rotateZ(-90);
        bodies[9].mtxLocal.translateY(0.5);
        bodies[9].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[9]);
        bodies[10] = createCompleteMeshNode("CompoundFront", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[10].removeComponent(bodies[10].getComponent(f.ComponentRigidbody));
        bodies[10].mtxLocal.rotateX(90);
        bodies[10].mtxLocal.translateY(0.5);
        bodies[10].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[10]);
        bodies[11] = createCompleteMeshNode("CompoundBack", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(0, 0.3, 1, 1))), new f.MeshPyramid, 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[11].removeComponent(bodies[11].getComponent(f.ComponentRigidbody));
        bodies[11].mtxLocal.rotateX(-90);
        bodies[11].mtxLocal.translateY(0.5);
        bodies[11].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[11]);
        bodies[5].getComponent(f.ComponentRigidbody).restitution = 2;
        //#endregion
        //Rest initialization
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.mtxPivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        let cmpCamera = new f.ComponentCamera();
        cmpCamera.clrBackground = f.Color.CSS("GREY");
        cmpCamera.mtxPivot.translate(new f.Vector3(2, 2, 10));
        cmpCamera.mtxPivot.lookAt(f.Vector3.ZERO());
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Physics.adjustTransforms(hierarchy);
        f.Loop.start();
        f.Physics.settings.debugMode = f.PHYSICS_DEBUGMODE.JOINTS_AND_COLLIDER;
    }
    function update() {
        f.Physics.world.simulate();
        hitInfo = f.Physics.raycast(origin, direction, 10);
        if (hitInfo.hit == true && hitInfo.rigidbodyComponent.node.name == "Cube_1") {
            f.Debug.log(hitInfo);
        }
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(() => {
            const now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function createCompleteMeshNode(_name, _material, _mesh, _mass, _physicsType, _group = f.COLLISION_GROUP.DEFAULT, _colType = f.COLLIDER_TYPE.CUBE, _convexMesh = null) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        let cmpRigidbody = new f.ComponentRigidbody(_mass, _physicsType, _colType, _group, null, _convexMesh);
        cmpRigidbody.restitution = 0.2;
        cmpRigidbody.friction = 0.8;
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        node.addComponent(cmpRigidbody);
        return node;
    }
    function hndKey(_event) {
        let horizontal = 0;
        let vertical = 0;
        let height = 0;
        if (_event.code == f.KEYBOARD_CODE.A) {
            horizontal -= 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.D) {
            horizontal += 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.W) {
            vertical -= 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.S) {
            vertical += 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.Q) {
            height += 1 * stepWidth;
        }
        if (_event.code == f.KEYBOARD_CODE.E) {
            height -= 1 * stepWidth;
        }
        let pos = moveableTransform.mtxLocal.translation;
        pos.add(new f.Vector3(horizontal, height, vertical));
        moveableTransform.mtxLocal.translation = pos;
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCxJQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7QUFJckIsSUFBVSwwQkFBMEIsQ0EyTm5DO0FBM05ELFdBQVUsMEJBQTBCO0lBRWhDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxHQUFHLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsSUFBSSxRQUFvQixDQUFDO0lBQ3pCLElBQUksU0FBaUIsQ0FBQztJQUN0QixJQUFJLEdBQVcsQ0FBQztJQUNoQixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsSUFBSSxVQUFVLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFL0QsSUFBSSxNQUFNLEdBQWEsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUNuQyxJQUFJLE1BQU0sR0FBYyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELElBQUksU0FBUyxHQUFjLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQUksT0FBTyxHQUFpQixJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMvQyxJQUFJLE1BQWMsQ0FBQztJQUVuQixJQUFJLFNBQVMsR0FBVyxHQUFHLENBQUM7SUFFNUIsSUFBSSxpQkFBdUMsQ0FBQztJQUk1QyxTQUFTLElBQUksQ0FBQyxNQUFhO1FBQ3ZCLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLCtCQUErQjtRQUMvQixnQ0FBZ0M7UUFDaEMsU0FBUyxHQUFHLElBQUks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LElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsUUFBUSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDN0I7UUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDM0I7UUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDM0I7UUFDRCxJQUFJLEdBQUcsR0FBYyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQzVELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNyRCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUNqRCxDQUFDO0FBRUwsQ0FBQyxFQTNOUywwQkFBMEIsS0FBMUIsMEJBQTBCLFFBMk5uQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC88cmVmZXJlbmNlIHR5cGVzPVwiLi4vLi4vLi4vLi4vQ29yZS9CdWlsZC9GdWRnZUNvcmUuanNcIi8+XHJcbmltcG9ydCBmID0gRnVkZ2VDb3JlO1xyXG5cclxuXHJcblxyXG5uYW1lc3BhY2UgRnVkZ2VQaHlzaWNzX0NvbW11bmljYXRpb24ge1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBpbml0KTtcclxuICAgIGNvbnN0IGFwcDogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpO1xyXG4gICAgbGV0IHZpZXdQb3J0OiBmLlZpZXdwb3J0O1xyXG4gICAgbGV0IGhpZXJhcmNoeTogZi5Ob2RlO1xyXG4gICAgbGV0IGZwczogbnVtYmVyO1xyXG4gICAgY29uc3QgdGltZXM6IG51bWJlcltdID0gW107XHJcbiAgICBsZXQgZnBzRGlzcGxheTogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaDIjRlBTXCIpO1xyXG5cclxuICAgIGxldCBib2RpZXM6IGYuTm9kZVtdID0gbmV3IEFycmF5KCk7XHJcbiAgICBsZXQgb3JpZ2luOiBmLlZlY3RvcjMgPSBuZXcgZi5WZWN0b3IzKC01LCAwLjI1LCAwKTtcclxuICAgIGxldCBkaXJlY3Rpb246IGYuVmVjdG9yMyA9IG5ldyBmLlZlY3RvcjMoMSwgMCwgMCk7XHJcbiAgICBsZXQgaGl0SW5mbzogZi5SYXlIaXRJbmZvID0gbmV3IGYuUmF5SGl0SW5mbygpO1xyXG4gICAgbGV0IGdyb3VuZDogZi5Ob2RlO1xyXG5cclxuICAgIGxldCBzdGVwV2lkdGg6IG51bWJlciA9IDAuMTtcclxuXHJcbiAgICBsZXQgbW92ZWFibGVUcmFuc2Zvcm06IGYuQ29tcG9uZW50VHJhbnNmb3JtO1xyXG5cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdChfZXZlbnQ6IEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgZi5EZWJ1Zy5sb2coYXBwKTtcclxuICAgICAgICAvL2YuUmVuZGVyTWFuYWdlci5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgLy9mLlBoeXNpY3MuaW5pdGlhbGl6ZVBoeXNpY3MoKTtcclxuICAgICAgICBoaWVyYXJjaHkgPSBuZXcgZi5Ob2RlKFwiU2NlbmVcIik7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCBobmRLZXkpO1xyXG5cclxuICAgICAgICBncm91bmQgPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiR3JvdW5kXCIsIG5ldyBmLk1hdGVyaWFsKFwiR3JvdW5kXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC4yLCAwLjIsIDAuMiwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMCwgZi5CT0RZX1RZUEUuU1RBVElDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8xKTtcclxuICAgICAgICBsZXQgY21wR3JvdW5kTWVzaDogZi5Db21wb25lbnRUcmFuc2Zvcm0gPSBncm91bmQuZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50VHJhbnNmb3JtKTtcclxuICAgICAgICBjbXBHcm91bmRNZXNoLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMTAsIDAuMywgMTApKTtcclxuXHJcbiAgICAgICAgY21wR3JvdW5kTWVzaC5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygwLCAtMS41LCAwKSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGdyb3VuZCk7XHJcblxyXG4gICAgICAgIGJvZGllc1swXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlXzFcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMSwgMCwgMCwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMik7XHJcbiAgICAgICAgbGV0IGNtcEN1YmVUcmFuc2Zvcm06IGYuQ29tcG9uZW50VHJhbnNmb3JtID0gYm9kaWVzWzBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1swXSk7XHJcbiAgICAgICAgY21wQ3ViZVRyYW5zZm9ybS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygwLCA3LCAwKSk7XHJcblxyXG4gICAgICAgIGJvZGllc1sxXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlXzJcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMSwgMSwgMCwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMSk7XHJcbiAgICAgICAgbGV0IGNtcEN1YmVUcmFuc2Zvcm0yOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IGJvZGllc1sxXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gICAgICAgIGJvZGllc1swXS5hcHBlbmRDaGlsZChib2RpZXNbMV0pO1xyXG4gICAgICAgIGJvZGllc1sxXS5yZW1vdmVDb21wb25lbnQoYm9kaWVzWzFdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSkpO1xyXG4gICAgICAgIGNtcEN1YmVUcmFuc2Zvcm0yLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDAsIDEsIDApKTtcclxuXHJcbiAgICAgICAgYm9kaWVzWzJdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIkN1YmVfM1wiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigxLCAwLCAwLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDKTtcclxuICAgICAgICBsZXQgY21wQ3ViZVRyYW5zZm9ybTM6IGYuQ29tcG9uZW50VHJhbnNmb3JtID0gYm9kaWVzWzJdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1syXSk7XHJcbiAgICAgICAgY21wQ3ViZVRyYW5zZm9ybTMubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMC41LCAzLCAwLjUpKTtcclxuXHJcbiAgICAgICAgYm9kaWVzWzNdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIkN1YmVfM1wiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLCAwLCAxLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5LSU5FTUFUSUMpO1xyXG4gICAgICAgIG1vdmVhYmxlVHJhbnNmb3JtID0gYm9kaWVzWzNdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1szXSk7XHJcbiAgICAgICAgbW92ZWFibGVUcmFuc2Zvcm0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoLTQsIDEsIDApKTtcclxuXHJcbiAgICAgICAgYm9kaWVzWzRdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIlB5cmFtaWRcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMCwgMCwgMSwgMSkpKSwgbmV3IGYuTWVzaFB5cmFtaWQsIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzEsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcclxuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzRdKTtcclxuICAgICAgICBib2RpZXNbNF0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgNCwgMykpO1xyXG4gICAgICAgIGJvZGllc1s0XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEuNSwgMS41LCAxLjUpKTtcclxuICAgICAgICBib2RpZXNbNF0ubXR4TG9jYWwucm90YXRlWSgxMjAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8jcmVnaW9uICBDb21wb3VuZENvbGxpZGVyIFdvcmthcm91bmRcclxuICAgICAgICAvL0NvbXBvdW5kIENvbGxpZGVyIFdvcmthcm91bmQsIHRocm91Z2ggbWFraW5nIE9ORSBjb252ZXggY29sbGlkZXIgb24gYSBtYWluIG9iamVjdCB0aGF0IGhhcyB0aGUgc2hhcGUgb2YgdGhlIHJlc3VsdCBvYmplY3QgaW5zdGVhZCBvZiBoYXZpbmcgbXVsdGlwbGUgc2hhcGVzIG9uIGEgcmlnaWRib2R5XHJcbiAgICAgICAgbGV0IGNvbFZlcnRpY2VzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5XHJcbiAgICAgICAgICAgIChbXHJcbiAgICAgICAgICAgICAgICAxLCAtMSwgMSxcclxuICAgICAgICAgICAgICAgIDAsIC0yLCAwLFxyXG4gICAgICAgICAgICAgICAgMSwgMSwgMSxcclxuICAgICAgICAgICAgICAgIC0gMSwgMSwgMSxcclxuICAgICAgICAgICAgICAgIC0gMSwgLTEsIDEsXHJcbiAgICAgICAgICAgICAgICAtMiwgMCwgMCxcclxuICAgICAgICAgICAgICAgIDEsIDEsIC0xLFxyXG4gICAgICAgICAgICAgICAgLSAxLCAxLCAtMSxcclxuICAgICAgICAgICAgICAgIC0gMSwgLTEsIC0xLFxyXG4gICAgICAgICAgICAgICAgMCwgMCwgLTIsXHJcbiAgICAgICAgICAgICAgICAxLCAtMSwgLTEsXHJcbiAgICAgICAgICAgICAgICAyLCAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMCwgMiwgMCxcclxuICAgICAgICAgICAgICAgIDAsIDAsIDJcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIC8vTWFpbiBTaGFwZVxyXG4gICAgICAgIGJvZGllc1s1XSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDb21wb3VuZFwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLCAwLjMsIDEsIDEpKSksIG5ldyBmLk1lc2hDdWJlLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuQ09OVkVYLCBjb2xWZXJ0aWNlcyk7XHJcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1s1XSk7XHJcbiAgICAgICAgYm9kaWVzWzVdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDIuNSwgNCwgMy41KSk7XHJcbiAgICAgICAgYm9kaWVzWzVdLm10eExvY2FsLnJvdGF0ZVgoMjcpO1xyXG4gICAgICAgIGJvZGllc1s1XS5tdHhMb2NhbC5yb3RhdGVZKDMyKTtcclxuICAgICAgICAvL0NvbXBvbmVudHNcclxuICAgICAgICBib2RpZXNbNl0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiQ29tcG91bmRVcHBlclwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLCAwLjMsIDEsIDEpKSksIG5ldyBmLk1lc2hQeXJhbWlkLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuUFlSQU1JRCk7XHJcbiAgICAgICAgYm9kaWVzWzZdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbNl0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XHJcbiAgICAgICAgYm9kaWVzWzZdLm10eExvY2FsLnRyYW5zbGF0ZVkoMC41KTtcclxuICAgICAgICBib2RpZXNbNl0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygxLCAwLjUsIDEpKTtcclxuICAgICAgICBib2RpZXNbNV0uYXBwZW5kQ2hpbGQoYm9kaWVzWzZdKTtcclxuICAgICAgICBib2RpZXNbN10gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiQ29tcG91bmRMb3dlclwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLCAwLjMsIDEsIDEpKSksIG5ldyBmLk1lc2hQeXJhbWlkLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuUFlSQU1JRCk7XHJcbiAgICAgICAgYm9kaWVzWzddLnJlbW92ZUNvbXBvbmVudChib2RpZXNbN10uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XHJcbiAgICAgICAgYm9kaWVzWzddLm10eExvY2FsLnJvdGF0ZVgoMTgwKTtcclxuICAgICAgICBib2RpZXNbN10ubXR4TG9jYWwudHJhbnNsYXRlWSgwLjUpO1xyXG4gICAgICAgIGJvZGllc1s3XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xyXG4gICAgICAgIGJvZGllc1s1XS5hcHBlbmRDaGlsZChib2RpZXNbN10pO1xyXG4gICAgICAgIGJvZGllc1s4XSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDb21wb3VuZExlZnRcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMCwgMC4zLCAxLCAxKSkpLCBuZXcgZi5NZXNoUHlyYW1pZCwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuREVGQVVMVCwgZi5DT0xMSURFUl9UWVBFLlBZUkFNSUQpO1xyXG4gICAgICAgIGJvZGllc1s4XS5yZW1vdmVDb21wb25lbnQoYm9kaWVzWzhdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSkpO1xyXG4gICAgICAgIGJvZGllc1s4XS5tdHhMb2NhbC5yb3RhdGVaKDkwKTtcclxuICAgICAgICBib2RpZXNbOF0ubXR4TG9jYWwudHJhbnNsYXRlWSgwLjUpO1xyXG4gICAgICAgIGJvZGllc1s4XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xyXG4gICAgICAgIGJvZGllc1s1XS5hcHBlbmRDaGlsZChib2RpZXNbOF0pO1xyXG4gICAgICAgIGJvZGllc1s5XSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDb21wb3VuZFJpZ2h0XCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAsIDAuMywgMSwgMSkpKSwgbmV3IGYuTWVzaFB5cmFtaWQsIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcclxuICAgICAgICBib2RpZXNbOV0ucmVtb3ZlQ29tcG9uZW50KGJvZGllc1s5XS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpKTtcclxuICAgICAgICBib2RpZXNbOV0ubXR4TG9jYWwucm90YXRlWigtOTApO1xyXG4gICAgICAgIGJvZGllc1s5XS5tdHhMb2NhbC50cmFuc2xhdGVZKDAuNSk7XHJcbiAgICAgICAgYm9kaWVzWzldLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMSwgMC41LCAxKSk7XHJcbiAgICAgICAgYm9kaWVzWzVdLmFwcGVuZENoaWxkKGJvZGllc1s5XSk7XHJcbiAgICAgICAgYm9kaWVzWzEwXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDb21wb3VuZEZyb250XCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAsIDAuMywgMSwgMSkpKSwgbmV3IGYuTWVzaFB5cmFtaWQsIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcclxuICAgICAgICBib2RpZXNbMTBdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbMTBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSkpO1xyXG4gICAgICAgIGJvZGllc1sxMF0ubXR4TG9jYWwucm90YXRlWCg5MCk7XHJcbiAgICAgICAgYm9kaWVzWzEwXS5tdHhMb2NhbC50cmFuc2xhdGVZKDAuNSk7XHJcbiAgICAgICAgYm9kaWVzWzEwXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xyXG4gICAgICAgIGJvZGllc1s1XS5hcHBlbmRDaGlsZChib2RpZXNbMTBdKTtcclxuICAgICAgICBib2RpZXNbMTFdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIkNvbXBvdW5kQmFja1wiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLCAwLjMsIDEsIDEpKSksIG5ldyBmLk1lc2hQeXJhbWlkLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuUFlSQU1JRCk7XHJcbiAgICAgICAgYm9kaWVzWzExXS5yZW1vdmVDb21wb25lbnQoYm9kaWVzWzExXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpKTtcclxuICAgICAgICBib2RpZXNbMTFdLm10eExvY2FsLnJvdGF0ZVgoLTkwKTtcclxuICAgICAgICBib2RpZXNbMTFdLm10eExvY2FsLnRyYW5zbGF0ZVkoMC41KTtcclxuICAgICAgICBib2RpZXNbMTFdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMSwgMC41LCAxKSk7XHJcbiAgICAgICAgYm9kaWVzWzVdLmFwcGVuZENoaWxkKGJvZGllc1sxMV0pO1xyXG4gICAgICAgIGJvZGllc1s1XS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLnJlc3RpdHV0aW9uID0gMjtcclxuICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcblxyXG4gICAgICAgIC8vUmVzdCBpbml0aWFsaXphdGlvblxyXG4gICAgICAgIGxldCBjbXBMaWdodDogZi5Db21wb25lbnRMaWdodCA9IG5ldyBmLkNvbXBvbmVudExpZ2h0KG5ldyBmLkxpZ2h0RGlyZWN0aW9uYWwoZi5Db2xvci5DU1MoXCJXSElURVwiKSkpO1xyXG4gICAgICAgIGNtcExpZ2h0Lm10eFBpdm90Lmxvb2tBdChuZXcgZi5WZWN0b3IzKDAuNSwgLTEsIC0wLjgpKTtcclxuICAgICAgICBoaWVyYXJjaHkuYWRkQ29tcG9uZW50KGNtcExpZ2h0KTtcclxuXHJcbiAgICAgICAgbGV0IGNtcENhbWVyYTogZi5Db21wb25lbnRDYW1lcmEgPSBuZXcgZi5Db21wb25lbnRDYW1lcmEoKTtcclxuICAgICAgICBjbXBDYW1lcmEuY2xyQmFja2dyb3VuZCA9IGYuQ29sb3IuQ1NTKFwiR1JFWVwiKTtcclxuICAgICAgICBjbXBDYW1lcmEubXR4UGl2b3QudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMiwgMiwgMTApKTtcclxuICAgICAgICBjbXBDYW1lcmEubXR4UGl2b3QubG9va0F0KGYuVmVjdG9yMy5aRVJPKCkpO1xyXG5cclxuXHJcbiAgICAgICAgdmlld1BvcnQgPSBuZXcgZi5WaWV3cG9ydCgpO1xyXG4gICAgICAgIHZpZXdQb3J0LmluaXRpYWxpemUoXCJWaWV3cG9ydFwiLCBoaWVyYXJjaHksIGNtcENhbWVyYSwgYXBwKTtcclxuXHJcbiAgICAgICAgdmlld1BvcnQuc2hvd1NjZW5lR3JhcGgoKTtcclxuICAgICAgICBmLkxvb3AuYWRkRXZlbnRMaXN0ZW5lcihmLkVWRU5ULkxPT1BfRlJBTUUsIHVwZGF0ZSk7XHJcbiAgICAgICAgZi5QaHlzaWNzLmFkanVzdFRyYW5zZm9ybXMoaGllcmFyY2h5KTtcclxuICAgICAgICBmLkxvb3Auc3RhcnQoKTtcclxuICAgICAgICBmLlBoeXNpY3Muc2V0dGluZ3MuZGVidWdNb2RlID0gZi5QSFlTSUNTX0RFQlVHTU9ERS5KT0lOVFNfQU5EX0NPTExJREVSO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICBmLlBoeXNpY3Mud29ybGQuc2ltdWxhdGUoKTtcclxuICAgICAgICBoaXRJbmZvID0gZi5QaHlzaWNzLnJheWNhc3Qob3JpZ2luLCBkaXJlY3Rpb24sIDEwKTtcclxuICAgICAgICBpZiAoaGl0SW5mby5oaXQgPT0gdHJ1ZSAmJiBoaXRJbmZvLnJpZ2lkYm9keUNvbXBvbmVudC5ub2RlLm5hbWUgPT0gXCJDdWJlXzFcIikge1xyXG4gICAgICAgICAgICBmLkRlYnVnLmxvZyhoaXRJbmZvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZpZXdQb3J0LmRyYXcoKTtcclxuICAgICAgICBtZWFzdXJlRlBTKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWVhc3VyZUZQUygpOiB2b2lkIHtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm93OiBudW1iZXIgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgICAgICAgd2hpbGUgKHRpbWVzLmxlbmd0aCA+IDAgJiYgdGltZXNbMF0gPD0gbm93IC0gMTAwMCkge1xyXG4gICAgICAgICAgICAgICAgdGltZXMuc2hpZnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aW1lcy5wdXNoKG5vdyk7XHJcbiAgICAgICAgICAgIGZwcyA9IHRpbWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgZnBzRGlzcGxheS50ZXh0Q29udGVudCA9IFwiRlBTOiBcIiArIGZwcy50b1N0cmluZygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoX25hbWU6IHN0cmluZywgX21hdGVyaWFsOiBmLk1hdGVyaWFsLCBfbWVzaDogZi5NZXNoLCBfbWFzczogbnVtYmVyLCBfcGh5c2ljc1R5cGU6IGYuQk9EWV9UWVBFLCBfZ3JvdXA6IGYuQ09MTElTSU9OX0dST1VQID0gZi5DT0xMSVNJT05fR1JPVVAuREVGQVVMVCwgX2NvbFR5cGU6IGYuQ09MTElERVJfVFlQRSA9IGYuQ09MTElERVJfVFlQRS5DVUJFLCBfY29udmV4TWVzaDogRmxvYXQzMkFycmF5ID0gbnVsbCk6IGYuTm9kZSB7XHJcbiAgICAgICAgbGV0IG5vZGU6IGYuTm9kZSA9IG5ldyBmLk5vZGUoX25hbWUpO1xyXG4gICAgICAgIGxldCBjbXBNZXNoOiBmLkNvbXBvbmVudE1lc2ggPSBuZXcgZi5Db21wb25lbnRNZXNoKF9tZXNoKTtcclxuICAgICAgICBsZXQgY21wTWF0ZXJpYWw6IGYuQ29tcG9uZW50TWF0ZXJpYWwgPSBuZXcgZi5Db21wb25lbnRNYXRlcmlhbChfbWF0ZXJpYWwpO1xyXG5cclxuICAgICAgICBsZXQgY21wVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IG5ldyBmLkNvbXBvbmVudFRyYW5zZm9ybSgpO1xyXG4gICAgICAgIGxldCBjbXBSaWdpZGJvZHk6IGYuQ29tcG9uZW50UmlnaWRib2R5ID0gbmV3IGYuQ29tcG9uZW50UmlnaWRib2R5KF9tYXNzLCBfcGh5c2ljc1R5cGUsIF9jb2xUeXBlLCBfZ3JvdXAsIG51bGwsIF9jb252ZXhNZXNoKTtcclxuICAgICAgICBjbXBSaWdpZGJvZHkucmVzdGl0dXRpb24gPSAwLjI7XHJcbiAgICAgICAgY21wUmlnaWRib2R5LmZyaWN0aW9uID0gMC44O1xyXG4gICAgICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcE1lc2gpO1xyXG4gICAgICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcE1hdGVyaWFsKTtcclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBUcmFuc2Zvcm0pO1xyXG4gICAgICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcFJpZ2lkYm9keSk7XHJcblxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGhuZEtleShfZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgaG9yaXpvbnRhbDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgdmVydGljYWw6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGhlaWdodDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5BKSB7XHJcbiAgICAgICAgICAgIGhvcml6b250YWwgLT0gMSAqIHN0ZXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5EKSB7XHJcbiAgICAgICAgICAgIGhvcml6b250YWwgKz0gMSAqIHN0ZXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5XKSB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsIC09IDEgKiBzdGVwV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuUykge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbCArPSAxICogc3RlcFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLlEpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ICs9IDEgKiBzdGVwV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuRSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gMSAqIHN0ZXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBvczogZi5WZWN0b3IzID0gbW92ZWFibGVUcmFuc2Zvcm0ubXR4TG9jYWwudHJhbnNsYXRpb247XHJcbiAgICAgICAgcG9zLmFkZChuZXcgZi5WZWN0b3IzKGhvcml6b250YWwsIGhlaWdodCwgdmVydGljYWwpKTtcclxuICAgICAgICBtb3ZlYWJsZVRyYW5zZm9ybS5tdHhMb2NhbC50cmFuc2xhdGlvbiA9IHBvcztcclxuICAgIH1cclxuXHJcbn0iXX0=