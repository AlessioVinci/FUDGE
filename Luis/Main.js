"use strict";
var Test;
(function (Test) {
    var fudge = FudgeCore;
    window.addEventListener("load", hndLoad);
    let color = fudge.Color.CSS("GREEN");
    // let sphereSize: number = 25;
    let ambIntensity = 0.2;
    let dirIntensity = 0.7;
    let shininess = 128;
    let dirRotation = new fudge.Vector3(20, 20, 0);
    let shaders = [fudge.ShaderFlat, fudge.ShaderGouraud, fudge.ShaderPhong];
    let object0;
    let object1;
    let object2;
    function hndLoad(_event) {
        const canvas0 = document.getElementById("c0");
        const canvas1 = document.getElementById("c1");
        const canvas2 = document.getElementById("c2");
        fudge.Render.initialize();
        Test.viewport0 = new fudge.Viewport();
        Test.viewport1 = new fudge.Viewport();
        Test.viewport2 = new fudge.Viewport();
        object0 = new ObjectWithLights("Object0", color, shaders[0]);
        object1 = new ObjectWithLights("Object1", color, shaders[1]);
        object2 = new ObjectWithLights("Object2", color, shaders[2]);
        let cmpCamera = new fudge.ComponentCamera();
        cmpCamera.mtxPivot.translateZ(-2);
        Test.viewport0.initialize("Viewport", object0, cmpCamera, canvas0);
        Test.viewport0.draw();
        Test.viewport1.initialize("Viewport", object1, cmpCamera, canvas1);
        Test.viewport1.draw();
        Test.viewport2.initialize("Viewport", object2, cmpCamera, canvas2);
        Test.viewport2.draw();
        window.setInterval(update, 50);
    }
    function update() {
        object0.object.cmpTransform.mtxLocal.rotateY(.5);
        Test.viewport0.draw();
        object1.object.cmpTransform.mtxLocal.rotateY(.5);
        Test.viewport1.draw();
        object2.object.cmpTransform.mtxLocal.rotateY(.5);
        Test.viewport2.draw();
    }
    class ObjectWithLights extends fudge.Node {
        constructor(_name, _color, _shader) {
            super(_name);
            let mtr = new fudge.Material("mtr" + _color.toString(), _shader, new fudge.CoatColored(_color, shininess));
            let cmpMaterial = new fudge.ComponentMaterial(mtr);
            this.object = new fudge.Node("");
            this.appendChild(this.object);
            // this.object.addComponent(new fudge.ComponentMesh(new fudge.MeshSphere(sphereSize.toString(), sphereSize, sphereSize)));
            this.object.addComponent(new fudge.ComponentMesh(new fudge.MeshObj(Test.Object.obj)));
            // this.object.addComponent(new fudge.ComponentMesh(fudge.MeshObj.LOAD_MESH("Monkey.obj")));
            this.object.addComponent(cmpMaterial);
            this.object.addComponent(new fudge.ComponentTransform());
            let cmpLight = new fudge.ComponentLight(new fudge.LightDirectional(new fudge.Color(dirIntensity, dirIntensity, dirIntensity, 1)));
            let light = new fudge.Node("Light");
            light.addComponent(cmpLight);
            light.addComponent(new fudge.ComponentTransform());
            light.cmpTransform.mtxLocal.rotate(dirRotation);
            this.appendChild(light);
            let cmpLightAmb = new fudge.ComponentLight(new fudge.LightAmbient(new fudge.Color(ambIntensity, ambIntensity, ambIntensity, 1)));
            let lightAmb = new fudge.Node("LightAmb");
            lightAmb.addComponent(cmpLightAmb);
            this.appendChild(lightAmb);
        }
    }
    Test.ObjectWithLights = ObjectWithLights;
})(Test || (Test = {}));
//# sourceMappingURL=data:application/json;base64,