"use strict";
var Test;
(function (Test) {
    var fudge = FudgeCore;
    window.addEventListener("load", hndLoad);
    let sphereColor = fudge.Color.CSS("GREEN");
    let sphereSize = 25;
    let ambIntensity = 0.2;
    let dirIntensity = 0.7;
    let shininess = 200;
    let dirRotation = new fudge.Vector3(0, 0, 0);
    let shaders = [fudge.ShaderFlat, fudge.ShaderGouraud, fudge.ShaderPhong];
    function hndLoad(_event) {
        const canvas0 = document.getElementById("c0");
        const canvas1 = document.getElementById("c1");
        const canvas2 = document.getElementById("c2");
        fudge.Render.initialize();
        Test.viewport0 = new fudge.Viewport();
        Test.viewport1 = new fudge.Viewport();
        Test.viewport2 = new fudge.Viewport();
        //FLAT
        // fudge.ShaderModular.addVertexShaderModule([
        //     fudge.SHADER_MODULE.LIGHTS, 
        //     fudge.SHADER_MODULE.MATRIX_WORLD,
        //     fudge.SHADER_MODULE.MATRIX_PROJECTION,
        //     fudge.SHADER_MODULE.NORMAL_FACE, 
        //     fudge.SHADER_MODULE.COLOR_OUT_FLAT, 
        //     fudge.SHADER_MODULE.FLAT_VERT_MAIN
        // ]);
        // fudge.ShaderModular.addFragmentShaderModule([
        //     fudge.SHADER_MODULE.COLOR_U, 
        //     fudge.SHADER_MODULE.COLOR_IN_FLAT, 
        //     fudge.SHADER_MODULE.FRAG_OUT, 
        //     fudge.SHADER_MODULE.FLAT_FRAG_MAIN
        // ]);
        //GOURAUD
        // fudge.ShaderModular.addVertexShaderModule([
        //     fudge.SHADER_MODULE.LIGHTS, 
        //     fudge.SHADER_MODULE.MATRIX_WORLD, 
        //     fudge.SHADER_MODULE.COLOR_OUT,
        //     fudge.SHADER_MODULE.NORMAL_VERTEX, 
        //     fudge.SHADER_MODULE.MATRIX_PROJECTION, 
        //     fudge.SHADER_MODULE.SHININESS,
        //     fudge.SHADER_MODULE.REFLECTION, 
        //     fudge.SHADER_MODULE.GOURAUD_VERT_MAIN
        // ]);
        // fudge.ShaderModular.addFragmentShaderModule([
        //     fudge.SHADER_MODULE.COLOR_U, 
        //     fudge.SHADER_MODULE.COLOR_IN, 
        //     fudge.SHADER_MODULE.FRAG_OUT, 
        //     fudge.SHADER_MODULE.GOURAUD_FRAG_MAIN
        // ]);
        //PHONG
        // fudge.ShaderModular.addVertexShaderModule([
        //     fudge.SHADER_MODULE.MATRIX_WORLD,
        //     fudge.SHADER_MODULE.MATRIX_PROJECTION, 
        //     fudge.SHADER_MODULE.MATRIX_NORMAL,
        //     fudge.SHADER_MODULE.NORMAL_VERTEX, 
        //     fudge.SHADER_MODULE.PHONG_VERT_MAIN
        // ]);
        // fudge.ShaderModular.addFragmentShaderModule([
        //     fudge.SHADER_MODULE.LIGHTS, 
        //     fudge.SHADER_MODULE.COLOR_U, 
        //     fudge.SHADER_MODULE.SHININESS,
        //     fudge.SHADER_MODULE.REFLECTION, 
        //     fudge.SHADER_MODULE.FRAG_OUT, 
        //     fudge.SHADER_MODULE.PHONG_FRAG_MAIN
        // ]);
        let sphere0 = new SphereWithLights("Sphere0", sphereColor, Test.ShaderCustom);
        let sphere1 = new SphereWithLights("Sphere1", sphereColor, shaders[1]);
        let sphere2 = new SphereWithLights("Sphere2", sphereColor, shaders[2]);
        let cmpCamera = new fudge.ComponentCamera();
        cmpCamera.mtxPivot.translateZ(-2);
        Test.viewport0.initialize("Viewport", sphere0, cmpCamera, canvas0);
        Test.viewport0.draw();
        Test.viewport1.initialize("Viewport", sphere1, cmpCamera, canvas1);
        Test.viewport1.draw();
        Test.viewport2.initialize("Viewport", sphere2, cmpCamera, canvas2);
        Test.viewport2.draw();
    }
    class SphereWithLights extends fudge.Node {
        constructor(_name, _color, _shader) {
            super(_name);
            this.sphere = new fudge.Node("");
            this.appendChild(this.sphere);
            let mtr = new fudge.Material("mtr" + _color.toString(), _shader, new fudge.CoatColored(_color, shininess));
            let cmpMaterial = new fudge.ComponentMaterial(mtr);
            this.sphere.addComponent(new fudge.ComponentMesh(new fudge.MeshSphere(sphereSize.toString(), sphereSize, sphereSize)));
            // this.sphere.addComponent(new fudge.ComponentMesh(new fudge.MeshObj(Object.obj)));
            this.sphere.addComponent(cmpMaterial);
            this.sphere.addComponent(new fudge.ComponentTransform());
            this.sphere.cmpTransform.mtxLocal.rotateX(0);
            let cmpLight = new fudge.ComponentLight(new fudge.LightDirectional(new fudge.Color(dirIntensity, dirIntensity, dirIntensity, 1)));
            let light = new fudge.Node("Light");
            light.addComponent(cmpLight);
            light.addComponent(new fudge.ComponentTransform());
            light.cmpTransform.mtxLocal.rotate(dirRotation);
            this.appendChild(light);
            let cmpLightAmb = new fudge.ComponentLight(new fudge.LightAmbient(new fudge.Color(ambIntensity, ambIntensity, ambIntensity, 1)));
            let lightAmb = new fudge.Node("LightAmb");
            lightAmb.addComponent(cmpLightAmb);
            this.appendChild(lightAmb);
        }
    }
    Test.SphereWithLights = SphereWithLights;
})(Test || (Test = {}));
//# sourceMappingURL=data:application/json;base64,