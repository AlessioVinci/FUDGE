"use strict";
///<reference types="../../../../Core/Build/FudgeCore.js"/>
var f = FudgeCore;
//Reference Fudge, getting code completion ready and creating a shortcut f to write FudgeCode more comfortably
var Turorials_FUDGEPhysics_Lesson1;
//Reference Fudge, getting code completion ready and creating a shortcut f to write FudgeCode more comfortably
(function (Turorials_FUDGEPhysics_Lesson1) {
    //GOALS: Learning how to define shpes to create a not predefined collider shape.
    //Built a simple physics car with wheel colliders (different approach than a raycast car (default))
    //Fudge Basic Variables
    window.addEventListener("load", init);
    const app = document.querySelector("canvas"); // The html element where the scene is drawn to
    let viewPort; // The scene visualization
    let hierarchy; // You're object scene tree
    //Physical Objects
    let bodies = new Array(); // Array of all physical objects in the scene to have a quick reference
    let carBody;
    //Setting Variables
    let materialPlayer = new f.Material("Player", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 0.5, 0.35, 1)));
    //Car Settings / Joints
    let frontSuspensionRight;
    let frontSuspensionLeft;
    let backSuspensionRight;
    let backSuspensionLeft;
    let wheelJoint_frontR;
    let wheelJoint_frontL;
    let wheelJoint_backR;
    let wheelJoint_backL;
    let maxAngle = 30;
    let currentAngle = 0;
    //Function to initialize the Fudge Scene with a camera, light, viewport and PHYSCIAL Objects
    function init(_event) {
        hierarchy = new f.Node("Scene"); //create the root Node where every object is parented to. Should never be changed
        //#region PHYSICS
        //For this demo we want a higher accuracy since semi-real car physics are very delicate to calculate (thats why normally a raycast car is used for approximation)
        //OimoPhysics which is integrated in Fudge is using a correctionAlgorithm on solver iterations instead of fully recalculate physics too often, 
        //so you can crank the number of solver iterations higher than with most engines. But Oimo is in general less accurate.
        f.Physics.world.setSolverIterations(1000);
        f.Physics.settings.defaultRestitution = 0.15;
        f.Physics.settings.defaultFriction = 0.95;
        f.Physics.settings.defaultConstraintSolverType = 1; //Use most accurate joint solving, slower but needed for complex things like cars
        //Experiment with defaultConstraintSolverType and defaultCorrectionAlgorithm
        //PHYSICS 
        //Creating a physically static ground plane for our physics playground. A simple scaled cube but with physics type set to static
        bodies[0] = createCompleteNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube(), 0, f.PHYSICS_TYPE.STATIC, f.PHYSICS_GROUP.GROUP_2);
        bodies[0].mtxLocal.scale(new f.Vector3(14, 0.3, 14)); //Scale the body with it's standard ComponentTransform
        //bodies[0].mtxLocal.rotateX(4, true); //Give it a slight rotation so the physical objects are sliding, always from left when it's after a scaling
        hierarchy.appendChild(bodies[0]); //Add the node to the scene by adding it to the scene-root
        //A car is basically wheels on a suspension. A suspension is a prismatic spring and a wheel is on a revolute joint.
        //But the joints, wheels need to be very well placed, could not get it done even in unity with this setup. 
        //(Unity has wheelcolliders and things to make it easier), so different setup would be done there
        settingUpCar();
        //#endregion PHYSICS
        //Standard Fudge Scene Initialization - Creating a directional light, a camera and initialize the viewport
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8)); //Set light direction
        hierarchy.addComponent(cmpLight);
        let cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(17, 4, 17)); //Move camera far back so the whole scene is visible
        cmpCamera.pivot.lookAt(f.Vector3.ZERO()); //Set the camera matrix so that it looks at the center of the scene
        viewPort = new f.Viewport(); //Creating a viewport that is rendered onto the html canvas element
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app); //initialize the viewport with the root node, camera and canvas
        document.addEventListener("keypress", hndKey); //Adding a listener for keypress handling
        //PHYSICS - Start using physics by telling the physics the scene root object. Physics will recalculate every transform and initialize
        f.Physics.start(hierarchy);
        f.Physics.settings.debugDraw = true;
        //Important start the game loop after starting physics, so physics can use the current transform before it's first iteration
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update); //Tell the game loop to call the update function on each frame
        f.Loop.start(); //Stard the game loop
    }
    //Function to animate/update the Fudge scene, commonly known as gameloop
    function update() {
        //PHYSICS - Simulate physical changes each frame, parameter to set time between frames
        f.Physics.world.simulate(f.Loop.timeFrameReal / 1000);
        viewPort.draw(); // Draw the current Fudge Scene to the canvas
    }
    // Function to quickly create a node with multiple needed FudgeComponents, including a physics component
    function createCompleteNode(_name, _material, _mesh, _mass, _physicsType, _group = f.PHYSICS_GROUP.DEFAULT, _colType = f.COLLIDER_TYPE.CUBE, _convexMesh = null) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        let cmpRigidbody = new f.ComponentRigidbody(_mass, _physicsType, _colType, _group, null, _convexMesh); //add a Float32 Array of points to the rb constructor to create a convex collider
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        node.addComponent(cmpRigidbody);
        return node;
    }
    function settingUpCar() {
        //Setting up visuals
        //Best practice to place the main body and place every suspension and wheel locally to the body. Not in this tutorial to make it more clear
        //CarBody
        bodies[12] = createCompleteNode("Car_Base", materialPlayer, new f.MeshCube(), 500, f.PHYSICS_TYPE.DYNAMIC);
        carBody = bodies[12].getComponent(f.ComponentRigidbody);
        bodies[12].mtxLocal.translate(new f.Vector3(0, 2.5, 0));
        bodies[12].mtxLocal.scale(new f.Vector3(1, 0.5, 2));
        hierarchy.appendChild(bodies[12]);
        //CarWheels - Important to balance the car out correctly
        bodies[13] = createCompleteNode("Car_WheelRight_Front", materialPlayer, new f.MeshCube(), 5, f.PHYSICS_TYPE.DYNAMIC, f.PHYSICS_GROUP.DEFAULT, f.COLLIDER_TYPE.CYLINDER);
        bodies[13].mtxLocal.translate(new f.Vector3(1, 1.50, -0.75));
        bodies[13].mtxLocal.scale(new f.Vector3(0.5, 0.85, 0.85)); //Wheels the as a cylinder use the x, for the height of the cylinder, y for the diameter and z is just for the f.MeshCube to scale.
        bodies[13].mtxLocal.rotateZ(90, false);
        hierarchy.appendChild(bodies[13]);
        bodies[14] = createCompleteNode("Car_WheelRight_Back", materialPlayer, new f.MeshCube(), 5, f.PHYSICS_TYPE.DYNAMIC, f.PHYSICS_GROUP.DEFAULT, f.COLLIDER_TYPE.CYLINDER);
        bodies[14].mtxLocal.translate(new f.Vector3(1, 1.50, 0.75));
        bodies[14].mtxLocal.scale(new f.Vector3(0.5, 0.85, 0.85));
        bodies[14].mtxLocal.rotateZ(90, false);
        hierarchy.appendChild(bodies[14]);
        bodies[15] = createCompleteNode("Car_WheelLeft_Front", materialPlayer, new f.MeshCube(), 5, f.PHYSICS_TYPE.DYNAMIC, f.PHYSICS_GROUP.DEFAULT, f.COLLIDER_TYPE.CYLINDER);
        bodies[15].mtxLocal.translate(new f.Vector3(-1, 1.50, -0.75));
        bodies[15].mtxLocal.scale(new f.Vector3(0.5, 0.85, 0.85));
        bodies[15].mtxLocal.rotateZ(90, false);
        hierarchy.appendChild(bodies[15]);
        bodies[16] = createCompleteNode("Car_WheelLeft_Back", materialPlayer, new f.MeshCube(), 5, f.PHYSICS_TYPE.DYNAMIC, f.PHYSICS_GROUP.DEFAULT, f.COLLIDER_TYPE.CYLINDER);
        bodies[16].mtxLocal.translate(new f.Vector3(-1, 1.50, 0.75));
        bodies[16].mtxLocal.scale(new f.Vector3(0.5, 0.85, 0.85));
        bodies[16].mtxLocal.rotateZ(90, false);
        hierarchy.appendChild(bodies[16]);
        //SuspensionHolders
        bodies[17] = createCompleteNode("Car_HolderRight_Front", materialPlayer, new f.MeshCube(), 20, f.PHYSICS_TYPE.DYNAMIC);
        bodies[17].mtxLocal.translate(new f.Vector3(0.4, 1.5, -0.75));
        bodies[17].mtxLocal.scale(new f.Vector3(0.5, 0.5, 0.5));
        hierarchy.appendChild(bodies[17]);
        bodies[18] = createCompleteNode("Car_HolderRight_Back", materialPlayer, new f.MeshCube(), 20, f.PHYSICS_TYPE.DYNAMIC);
        bodies[18].mtxLocal.translate(new f.Vector3(0.4, 1.5, 0.75));
        bodies[18].mtxLocal.scale(new f.Vector3(0.5, 0.5, 0.5));
        hierarchy.appendChild(bodies[18]);
        bodies[19] = createCompleteNode("Car_HolderLeft_Front", materialPlayer, new f.MeshCube(), 20, f.PHYSICS_TYPE.DYNAMIC);
        bodies[19].mtxLocal.translate(new f.Vector3(-0.4, 1.5, -0.75));
        bodies[19].mtxLocal.scale(new f.Vector3(0.5, 0.5, 0.5));
        hierarchy.appendChild(bodies[19]);
        bodies[20] = createCompleteNode("Car_HolderLeft_Back", materialPlayer, new f.MeshCube(), 20, f.PHYSICS_TYPE.DYNAMIC);
        bodies[20].mtxLocal.translate(new f.Vector3(-0.4, 1.5, 0.75));
        bodies[20].mtxLocal.scale(new f.Vector3(0.5, 0.5, 0.5));
        hierarchy.appendChild(bodies[20]);
        //Connecting them with joints
        //Sliding, Prismatic, Spring Joint between the body and the suspension
        //In -Y-Axis positioned where the holder is located locally to the car_base
        frontSuspensionRight = new f.ComponentJointCylindrical(carBody, bodies[17].getComponent(f.ComponentRigidbody), new f.Vector3(0, -1, 0), new f.Vector3(0.50, -1, -0.75));
        carBody.getContainer().addComponent(frontSuspensionRight);
        frontSuspensionRight.springDamping = 100;
        frontSuspensionRight.springFrequency = 2;
        frontSuspensionRight.translationMotorLimitUpper = 0;
        frontSuspensionRight.translationMotorLimitLower = 0;
        frontSuspensionRight.rotationalMotorLimitUpper = 0;
        frontSuspensionRight.rotationalMotorLimitLower = 0;
        frontSuspensionRight.internalCollision = true;
        frontSuspensionLeft = new f.ComponentJointCylindrical(carBody, bodies[19].getComponent(f.ComponentRigidbody), new f.Vector3(0, -1, 0), new f.Vector3(-0.50, -1, -0.75));
        carBody.getContainer().addComponent(frontSuspensionLeft);
        frontSuspensionLeft.springDamping = 100;
        frontSuspensionLeft.springFrequency = 2;
        frontSuspensionLeft.translationMotorLimitUpper = 0;
        frontSuspensionLeft.translationMotorLimitLower = 0;
        frontSuspensionLeft.rotationalMotorLimitUpper = 0;
        frontSuspensionLeft.rotationalMotorLimitLower = 0;
        frontSuspensionLeft.internalCollision = true;
        backSuspensionLeft = new f.ComponentJointCylindrical(carBody, bodies[20].getComponent(f.ComponentRigidbody), new f.Vector3(0, -1, 0), new f.Vector3(-0.50, -1, 0.75));
        carBody.getContainer().addComponent(backSuspensionLeft);
        backSuspensionLeft.springDamping = 100;
        backSuspensionLeft.springFrequency = 2;
        backSuspensionLeft.translationMotorLimitUpper = 0;
        backSuspensionLeft.translationMotorLimitLower = 0;
        backSuspensionLeft.rotationalMotorLimitUpper = 0;
        backSuspensionLeft.rotationalMotorLimitLower = 0;
        backSuspensionLeft.internalCollision = true;
        backSuspensionRight = new f.ComponentJointCylindrical(carBody, bodies[18].getComponent(f.ComponentRigidbody), new f.Vector3(0, -1, 0), new f.Vector3(0.50, -1, 0.75));
        carBody.getContainer().addComponent(backSuspensionRight);
        backSuspensionRight.springDamping = 100;
        backSuspensionRight.springFrequency = 2;
        backSuspensionRight.translationMotorLimitUpper = 0;
        backSuspensionRight.translationMotorLimitLower = 0;
        backSuspensionRight.rotationalMotorLimitUpper = 0;
        backSuspensionRight.rotationalMotorLimitLower = 0;
        backSuspensionRight.internalCollision = true;
        //Connect Wheels to suspension - Hinge (revolute) joints that can rotate 360° in X-Axis but not move
        wheelJoint_frontR = new f.ComponentJointRevolute(bodies[17].getComponent(f.ComponentRigidbody), bodies[13].getComponent(f.ComponentRigidbody), new f.Vector3(-1, 0, 0));
        bodies[17].addComponent(wheelJoint_frontR);
        wheelJoint_frontL = new f.ComponentJointRevolute(bodies[19].getComponent(f.ComponentRigidbody), bodies[15].getComponent(f.ComponentRigidbody), new f.Vector3(-1, 0, 0));
        bodies[19].addComponent(wheelJoint_frontL);
        wheelJoint_backR = new f.ComponentJointRevolute(bodies[18].getComponent(f.ComponentRigidbody), bodies[14].getComponent(f.ComponentRigidbody), new f.Vector3(-1, 0, 0));
        bodies[18].addComponent(wheelJoint_backR);
        wheelJoint_backL = new f.ComponentJointRevolute(bodies[20].getComponent(f.ComponentRigidbody), bodies[16].getComponent(f.ComponentRigidbody), new f.Vector3(-1, 0, 0));
        bodies[20].addComponent(wheelJoint_backL);
        wheelJoint_frontR.motorSpeed = -5;
        wheelJoint_frontR.motorTorque = 50;
        wheelJoint_frontL.motorSpeed = -5;
        wheelJoint_frontL.motorTorque = 50;
        // wheelJoint_backR.motorSpeed = -5;
        // wheelJoint_backR.motorTorque = 50;
        // wheelJoint_backL.motorSpeed = -5;
        // wheelJoint_backL.motorTorque = 50;
    }
    // Event Function handling keyboard input
    function hndKey(_event) {
        if (_event.code == f.KEYBOARD_CODE.A) { //Steering the wheels by giving them a new angle limit so they are fixed on this angle
            frontSuspensionLeft.rotationalMotorLimitUpper = currentAngle < maxAngle ? currentAngle++ : currentAngle;
            frontSuspensionLeft.rotationalMotorLimitLower = currentAngle < maxAngle ? currentAngle++ : currentAngle;
            frontSuspensionRight.rotationalMotorLimitUpper = currentAngle < maxAngle ? currentAngle++ : currentAngle;
            frontSuspensionRight.rotationalMotorLimitLower = currentAngle < maxAngle ? currentAngle++ : currentAngle;
        }
        if (_event.code == f.KEYBOARD_CODE.W) {
            bodies[12].getComponent(f.ComponentRigidbody).applyForce(new f.Vector3(0, 10, 0));
            wheelJoint_frontR.motorSpeed++;
            wheelJoint_frontL.motorSpeed++;
        }
        if (_event.code == f.KEYBOARD_CODE.S) {
        }
        if (_event.code == f.KEYBOARD_CODE.D) {
            frontSuspensionLeft.rotationalMotorLimitUpper = currentAngle > -maxAngle ? currentAngle-- : currentAngle;
            frontSuspensionLeft.rotationalMotorLimitLower = currentAngle > -maxAngle ? currentAngle-- : currentAngle;
            frontSuspensionRight.rotationalMotorLimitUpper = currentAngle < maxAngle ? currentAngle-- : currentAngle;
            frontSuspensionRight.rotationalMotorLimitLower = currentAngle < maxAngle ? currentAngle-- : currentAngle;
        }
        if (_event.code == f.KEYBOARD_CODE.T) {
            f.Physics.settings.debugMode = f.Physics.settings.debugMode == f.PHYSICS_DEBUGMODE.JOINTS_AND_COLLIDER ? f.PHYSICS_DEBUGMODE.PHYSIC_OBJECTS_ONLY : f.PHYSICS_DEBUGMODE.JOINTS_AND_COLLIDER;
        }
    }
})(Turorials_FUDGEPhysics_Lesson1 || (Turorials_FUDGEPhysics_Lesson1 = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJEQUEyRDtBQUMzRCxJQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDckIsOEdBQThHO0FBRTlHLElBQVUsOEJBQThCLENBbVF2QztBQXJRRCw4R0FBOEc7QUFFOUcsV0FBVSw4QkFBOEI7SUFFdEMsZ0ZBQWdGO0lBQ2hGLG1HQUFtRztJQUVuRyx1QkFBdUI7SUFDdkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxNQUFNLEdBQUcsR0FBc0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLCtDQUErQztJQUNoSCxJQUFJLFFBQW9CLENBQUMsQ0FBQywwQkFBMEI7SUFDcEQsSUFBSSxTQUFpQixDQUFDLENBQUMsMkJBQTJCO0lBR2xELGtCQUFrQjtJQUNsQixJQUFJLE1BQU0sR0FBYSxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsdUVBQXVFO0lBQzNHLElBQUksT0FBNkIsQ0FBQztJQUVsQyxtQkFBbUI7SUFDbkIsSUFBSSxjQUFjLEdBQWUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTNILHVCQUF1QjtJQUN2QixJQUFJLG9CQUFpRCxDQUFDO0lBQ3RELElBQUksbUJBQWdELENBQUM7SUFDckQsSUFBSSxtQkFBZ0QsQ0FBQztJQUNyRCxJQUFJLGtCQUErQyxDQUFDO0lBQ3BELElBQUksaUJBQTJDLENBQUM7SUFDaEQsSUFBSSxpQkFBMkMsQ0FBQztJQUNoRCxJQUFJLGdCQUEwQyxDQUFDO0lBQy9DLElBQUksZ0JBQTBDLENBQUM7SUFDL0MsSUFBSSxRQUFRLEdBQVcsRUFBRSxDQUFDO0lBQzFCLElBQUksWUFBWSxHQUFXLENBQUMsQ0FBQztJQUc3Qiw0RkFBNEY7SUFDNUYsU0FBUyxJQUFJLENBQUMsTUFBYTtRQUV6QixTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUZBQWlGO1FBRWxILGlCQUFpQjtRQUNqQixpS0FBaUs7UUFDakssK0lBQStJO1FBQy9JLHVIQUF1SDtRQUN2SCxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDN0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUMxQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxpRkFBaUY7UUFDckksNEVBQTRFO1FBRTVFLFVBQVU7UUFDVixnSUFBZ0k7UUFDaEksTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeE0sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHNEQUFzRDtRQUM1RyxrSkFBa0o7UUFDbEosU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDBEQUEwRDtRQUU1RixtSEFBbUg7UUFDbkgsMkdBQTJHO1FBQzNHLGlHQUFpRztRQUNqRyxZQUFZLEVBQUUsQ0FBQztRQUVmLG9CQUFvQjtRQUdwQiwwR0FBMEc7UUFDMUcsSUFBSSxRQUFRLEdBQXFCLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUFDMUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVqQyxJQUFJLFNBQVMsR0FBc0IsSUFBSSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDM0QsU0FBUyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRCxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsb0RBQW9EO1FBQ3pHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLG1FQUFtRTtRQUU3RyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxtRUFBbUU7UUFDaEcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLCtEQUErRDtRQUUzSCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMseUNBQXlDO1FBRXhGLHFJQUFxSTtRQUNySSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUzQixDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXBDLDRIQUE0SDtRQUM1SCxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQiwrQkFBcUIsTUFBTSxDQUFDLENBQUMsQ0FBQyw4REFBOEQ7UUFDbkgsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtJQUN2QyxDQUFDO0lBRUQsd0VBQXdFO0lBQ3hFLFNBQVMsTUFBTTtRQUNiLHNGQUFzRjtRQUN0RixDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFdEQsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsNkNBQTZDO0lBQ2hFLENBQUM7SUFFRCx3R0FBd0c7SUFDeEcsU0FBUyxrQkFBa0IsQ0FBQyxLQUFhLEVBQUUsU0FBcUIsRUFBRSxLQUFhLEVBQUUsS0FBYSxFQUFFLFlBQTRCLEVBQUUsU0FBMEIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsV0FBNEIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsY0FBNEIsSUFBSTtRQUNqUSxJQUFJLElBQUksR0FBVyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsSUFBSSxPQUFPLEdBQW9CLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRCxJQUFJLFdBQVcsR0FBd0IsSUFBSSxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUUsSUFBSSxZQUFZLEdBQXlCLElBQUksQ0FBQyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDcEUsSUFBSSxZQUFZLEdBQXlCLElBQUksQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxpRkFBaUY7UUFDOU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxTQUFTLFlBQVk7UUFDbkIsb0JBQW9CO1FBQ3BCLDJJQUEySTtRQUMzSSxTQUFTO1FBQ1QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0csT0FBTyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbEMsd0RBQXdEO1FBQ3hELE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxzQkFBc0IsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEssTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxtSUFBbUk7UUFDOUwsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2SyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2SyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRWpDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEssTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFakMsbUJBQW1CO1FBQ25CLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyx1QkFBdUIsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEQsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUVqQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsa0JBQWtCLENBQUMsc0JBQXNCLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RILE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4RCxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRWpDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxzQkFBc0IsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4RCxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRWpDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEQsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUdqQyw2QkFBNkI7UUFDN0Isc0VBQXNFO1FBQ3RFLDJFQUEyRTtRQUMzRSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hLLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUMxRCxvQkFBb0IsQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3pDLG9CQUFvQixDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDekMsb0JBQW9CLENBQUMsMEJBQTBCLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELG9CQUFvQixDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUNwRCxvQkFBb0IsQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7UUFDbkQsb0JBQW9CLENBQUMseUJBQXlCLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELG9CQUFvQixDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUM5QyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEssT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3pELG1CQUFtQixDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7UUFDeEMsbUJBQW1CLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN4QyxtQkFBbUIsQ0FBQywwQkFBMEIsR0FBRyxDQUFDLENBQUM7UUFDbkQsbUJBQW1CLENBQUMsMEJBQTBCLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELG1CQUFtQixDQUFDLHlCQUF5QixHQUFHLENBQUMsQ0FBQztRQUNsRCxtQkFBbUIsQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7UUFDbEQsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzdDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdEssT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3hELGtCQUFrQixDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7UUFDdkMsa0JBQWtCLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN2QyxrQkFBa0IsQ0FBQywwQkFBMEIsR0FBRyxDQUFDLENBQUM7UUFDbEQsa0JBQWtCLENBQUMsMEJBQTBCLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELGtCQUFrQixDQUFDLHlCQUF5QixHQUFHLENBQUMsQ0FBQztRQUNqRCxrQkFBa0IsQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7UUFDakQsa0JBQWtCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzVDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RLLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6RCxtQkFBbUIsQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3hDLG1CQUFtQixDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDeEMsbUJBQW1CLENBQUMsMEJBQTBCLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELG1CQUFtQixDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUNuRCxtQkFBbUIsQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7UUFDbEQsbUJBQW1CLENBQUMseUJBQXlCLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELG1CQUFtQixDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUU3QyxvR0FBb0c7UUFDcEcsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4SyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDM0MsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4SyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDM0MsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2SyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDMUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2SyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFMUMsaUJBQWlCLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDbkMsaUJBQWlCLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDbkMsb0NBQW9DO1FBQ3BDLHFDQUFxQztRQUNyQyxvQ0FBb0M7UUFDcEMscUNBQXFDO0lBQ3ZDLENBQUM7SUFHRCx5Q0FBeUM7SUFDekMsU0FBUyxNQUFNLENBQUMsTUFBcUI7UUFFbkMsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEVBQUUsc0ZBQXNGO1lBQzVILG1CQUFtQixDQUFDLHlCQUF5QixHQUFHLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFDeEcsbUJBQW1CLENBQUMseUJBQXlCLEdBQUcsWUFBWSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztZQUN4RyxvQkFBb0IsQ0FBQyx5QkFBeUIsR0FBRyxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1lBQ3pHLG9CQUFvQixDQUFDLHlCQUF5QixHQUFHLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7U0FDMUc7UUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRixpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMvQixpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNoQztRQUNELElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtTQUVyQztRQUNELElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUNwQyxtQkFBbUIsQ0FBQyx5QkFBeUIsR0FBRyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFDekcsbUJBQW1CLENBQUMseUJBQXlCLEdBQUcsWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1lBQ3pHLG9CQUFvQixDQUFDLHlCQUF5QixHQUFHLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFDekcsb0JBQW9CLENBQUMseUJBQXlCLEdBQUcsWUFBWSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztTQUMxRztRQUVELElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUNwQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7U0FDNUw7SUFHSCxDQUFDO0FBRUgsQ0FBQyxFQW5RUyw4QkFBOEIsS0FBOUIsOEJBQThCLFFBbVF2QyIsInNvdXJjZXNDb250ZW50IjpbIi8vLzxyZWZlcmVuY2UgdHlwZXM9XCIuLi8uLi8uLi8uLi9Db3JlL0J1aWxkL0Z1ZGdlQ29yZS5qc1wiLz5cclxuaW1wb3J0IGYgPSBGdWRnZUNvcmU7XHJcbi8vUmVmZXJlbmNlIEZ1ZGdlLCBnZXR0aW5nIGNvZGUgY29tcGxldGlvbiByZWFkeSBhbmQgY3JlYXRpbmcgYSBzaG9ydGN1dCBmIHRvIHdyaXRlIEZ1ZGdlQ29kZSBtb3JlIGNvbWZvcnRhYmx5XHJcblxyXG5uYW1lc3BhY2UgVHVyb3JpYWxzX0ZVREdFUGh5c2ljc19MZXNzb24xIHtcclxuXHJcbiAgLy9HT0FMUzogTGVhcm5pbmcgaG93IHRvIGRlZmluZSBzaHBlcyB0byBjcmVhdGUgYSBub3QgcHJlZGVmaW5lZCBjb2xsaWRlciBzaGFwZS5cclxuICAvL0J1aWx0IGEgc2ltcGxlIHBoeXNpY3MgY2FyIHdpdGggd2hlZWwgY29sbGlkZXJzIChkaWZmZXJlbnQgYXBwcm9hY2ggdGhhbiBhIHJheWNhc3QgY2FyIChkZWZhdWx0KSlcclxuXHJcbiAgLy9GdWRnZSBCYXNpYyBWYXJpYWJsZXNcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaW5pdCk7XHJcbiAgY29uc3QgYXBwOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYW52YXNcIik7IC8vIFRoZSBodG1sIGVsZW1lbnQgd2hlcmUgdGhlIHNjZW5lIGlzIGRyYXduIHRvXHJcbiAgbGV0IHZpZXdQb3J0OiBmLlZpZXdwb3J0OyAvLyBUaGUgc2NlbmUgdmlzdWFsaXphdGlvblxyXG4gIGxldCBoaWVyYXJjaHk6IGYuTm9kZTsgLy8gWW91J3JlIG9iamVjdCBzY2VuZSB0cmVlXHJcblxyXG5cclxuICAvL1BoeXNpY2FsIE9iamVjdHNcclxuICBsZXQgYm9kaWVzOiBmLk5vZGVbXSA9IG5ldyBBcnJheSgpOyAvLyBBcnJheSBvZiBhbGwgcGh5c2ljYWwgb2JqZWN0cyBpbiB0aGUgc2NlbmUgdG8gaGF2ZSBhIHF1aWNrIHJlZmVyZW5jZVxyXG4gIGxldCBjYXJCb2R5OiBmLkNvbXBvbmVudFJpZ2lkYm9keTtcclxuXHJcbiAgLy9TZXR0aW5nIFZhcmlhYmxlc1xyXG4gIGxldCBtYXRlcmlhbFBsYXllcjogZi5NYXRlcmlhbCA9IG5ldyBmLk1hdGVyaWFsKFwiUGxheWVyXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC43LCAwLjUsIDAuMzUsIDEpKSk7XHJcblxyXG4gIC8vQ2FyIFNldHRpbmdzIC8gSm9pbnRzXHJcbiAgbGV0IGZyb250U3VzcGVuc2lvblJpZ2h0OiBmLkNvbXBvbmVudEpvaW50Q3lsaW5kcmljYWw7XHJcbiAgbGV0IGZyb250U3VzcGVuc2lvbkxlZnQ6IGYuQ29tcG9uZW50Sm9pbnRDeWxpbmRyaWNhbDtcclxuICBsZXQgYmFja1N1c3BlbnNpb25SaWdodDogZi5Db21wb25lbnRKb2ludEN5bGluZHJpY2FsO1xyXG4gIGxldCBiYWNrU3VzcGVuc2lvbkxlZnQ6IGYuQ29tcG9uZW50Sm9pbnRDeWxpbmRyaWNhbDtcclxuICBsZXQgd2hlZWxKb2ludF9mcm9udFI6IGYuQ29tcG9uZW50Sm9pbnRSZXZvbHV0ZTtcclxuICBsZXQgd2hlZWxKb2ludF9mcm9udEw6IGYuQ29tcG9uZW50Sm9pbnRSZXZvbHV0ZTtcclxuICBsZXQgd2hlZWxKb2ludF9iYWNrUjogZi5Db21wb25lbnRKb2ludFJldm9sdXRlO1xyXG4gIGxldCB3aGVlbEpvaW50X2JhY2tMOiBmLkNvbXBvbmVudEpvaW50UmV2b2x1dGU7XHJcbiAgbGV0IG1heEFuZ2xlOiBudW1iZXIgPSAzMDtcclxuICBsZXQgY3VycmVudEFuZ2xlOiBudW1iZXIgPSAwO1xyXG5cclxuXHJcbiAgLy9GdW5jdGlvbiB0byBpbml0aWFsaXplIHRoZSBGdWRnZSBTY2VuZSB3aXRoIGEgY2FtZXJhLCBsaWdodCwgdmlld3BvcnQgYW5kIFBIWVNDSUFMIE9iamVjdHNcclxuICBmdW5jdGlvbiBpbml0KF9ldmVudDogRXZlbnQpOiB2b2lkIHtcclxuXHJcbiAgICBoaWVyYXJjaHkgPSBuZXcgZi5Ob2RlKFwiU2NlbmVcIik7IC8vY3JlYXRlIHRoZSByb290IE5vZGUgd2hlcmUgZXZlcnkgb2JqZWN0IGlzIHBhcmVudGVkIHRvLiBTaG91bGQgbmV2ZXIgYmUgY2hhbmdlZFxyXG5cclxuICAgIC8vI3JlZ2lvbiBQSFlTSUNTXHJcbiAgICAvL0ZvciB0aGlzIGRlbW8gd2Ugd2FudCBhIGhpZ2hlciBhY2N1cmFjeSBzaW5jZSBzZW1pLXJlYWwgY2FyIHBoeXNpY3MgYXJlIHZlcnkgZGVsaWNhdGUgdG8gY2FsY3VsYXRlICh0aGF0cyB3aHkgbm9ybWFsbHkgYSByYXljYXN0IGNhciBpcyB1c2VkIGZvciBhcHByb3hpbWF0aW9uKVxyXG4gICAgLy9PaW1vUGh5c2ljcyB3aGljaCBpcyBpbnRlZ3JhdGVkIGluIEZ1ZGdlIGlzIHVzaW5nIGEgY29ycmVjdGlvbkFsZ29yaXRobSBvbiBzb2x2ZXIgaXRlcmF0aW9ucyBpbnN0ZWFkIG9mIGZ1bGx5IHJlY2FsY3VsYXRlIHBoeXNpY3MgdG9vIG9mdGVuLCBcclxuICAgIC8vc28geW91IGNhbiBjcmFuayB0aGUgbnVtYmVyIG9mIHNvbHZlciBpdGVyYXRpb25zIGhpZ2hlciB0aGFuIHdpdGggbW9zdCBlbmdpbmVzLiBCdXQgT2ltbyBpcyBpbiBnZW5lcmFsIGxlc3MgYWNjdXJhdGUuXHJcbiAgICBmLlBoeXNpY3Mud29ybGQuc2V0U29sdmVySXRlcmF0aW9ucygxMDAwKTtcclxuICAgIGYuUGh5c2ljcy5zZXR0aW5ncy5kZWZhdWx0UmVzdGl0dXRpb24gPSAwLjE1O1xyXG4gICAgZi5QaHlzaWNzLnNldHRpbmdzLmRlZmF1bHRGcmljdGlvbiA9IDAuOTU7XHJcbiAgICBmLlBoeXNpY3Muc2V0dGluZ3MuZGVmYXVsdENvbnN0cmFpbnRTb2x2ZXJUeXBlID0gMTsgLy9Vc2UgbW9zdCBhY2N1cmF0ZSBqb2ludCBzb2x2aW5nLCBzbG93ZXIgYnV0IG5lZWRlZCBmb3IgY29tcGxleCB0aGluZ3MgbGlrZSBjYXJzXHJcbiAgICAvL0V4cGVyaW1lbnQgd2l0aCBkZWZhdWx0Q29uc3RyYWludFNvbHZlclR5cGUgYW5kIGRlZmF1bHRDb3JyZWN0aW9uQWxnb3JpdGhtXHJcblxyXG4gICAgLy9QSFlTSUNTIFxyXG4gICAgLy9DcmVhdGluZyBhIHBoeXNpY2FsbHkgc3RhdGljIGdyb3VuZCBwbGFuZSBmb3Igb3VyIHBoeXNpY3MgcGxheWdyb3VuZC4gQSBzaW1wbGUgc2NhbGVkIGN1YmUgYnV0IHdpdGggcGh5c2ljcyB0eXBlIHNldCB0byBzdGF0aWNcclxuICAgIGJvZGllc1swXSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkdyb3VuZFwiLCBuZXcgZi5NYXRlcmlhbChcIkdyb3VuZFwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAuMiwgMC4yLCAwLjIsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCksIDAsIGYuUEhZU0lDU19UWVBFLlNUQVRJQywgZi5QSFlTSUNTX0dST1VQLkdST1VQXzIpO1xyXG4gICAgYm9kaWVzWzBdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMTQsIDAuMywgMTQpKTsgLy9TY2FsZSB0aGUgYm9keSB3aXRoIGl0J3Mgc3RhbmRhcmQgQ29tcG9uZW50VHJhbnNmb3JtXHJcbiAgICAvL2JvZGllc1swXS5tdHhMb2NhbC5yb3RhdGVYKDQsIHRydWUpOyAvL0dpdmUgaXQgYSBzbGlnaHQgcm90YXRpb24gc28gdGhlIHBoeXNpY2FsIG9iamVjdHMgYXJlIHNsaWRpbmcsIGFsd2F5cyBmcm9tIGxlZnQgd2hlbiBpdCdzIGFmdGVyIGEgc2NhbGluZ1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1swXSk7IC8vQWRkIHRoZSBub2RlIHRvIHRoZSBzY2VuZSBieSBhZGRpbmcgaXQgdG8gdGhlIHNjZW5lLXJvb3RcclxuXHJcbiAgICAvL0EgY2FyIGlzIGJhc2ljYWxseSB3aGVlbHMgb24gYSBzdXNwZW5zaW9uLiBBIHN1c3BlbnNpb24gaXMgYSBwcmlzbWF0aWMgc3ByaW5nIGFuZCBhIHdoZWVsIGlzIG9uIGEgcmV2b2x1dGUgam9pbnQuXHJcbiAgICAvL0J1dCB0aGUgam9pbnRzLCB3aGVlbHMgbmVlZCB0byBiZSB2ZXJ5IHdlbGwgcGxhY2VkLCBjb3VsZCBub3QgZ2V0IGl0IGRvbmUgZXZlbiBpbiB1bml0eSB3aXRoIHRoaXMgc2V0dXAuIFxyXG4gICAgLy8oVW5pdHkgaGFzIHdoZWVsY29sbGlkZXJzIGFuZCB0aGluZ3MgdG8gbWFrZSBpdCBlYXNpZXIpLCBzbyBkaWZmZXJlbnQgc2V0dXAgd291bGQgYmUgZG9uZSB0aGVyZVxyXG4gICAgc2V0dGluZ1VwQ2FyKCk7XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uIFBIWVNJQ1NcclxuXHJcblxyXG4gICAgLy9TdGFuZGFyZCBGdWRnZSBTY2VuZSBJbml0aWFsaXphdGlvbiAtIENyZWF0aW5nIGEgZGlyZWN0aW9uYWwgbGlnaHQsIGEgY2FtZXJhIGFuZCBpbml0aWFsaXplIHRoZSB2aWV3cG9ydFxyXG4gICAgbGV0IGNtcExpZ2h0OiBmLkNvbXBvbmVudExpZ2h0ID0gbmV3IGYuQ29tcG9uZW50TGlnaHQobmV3IGYuTGlnaHREaXJlY3Rpb25hbChmLkNvbG9yLkNTUyhcIldISVRFXCIpKSk7XHJcbiAgICBjbXBMaWdodC5waXZvdC5sb29rQXQobmV3IGYuVmVjdG9yMygwLjUsIC0xLCAtMC44KSk7IC8vU2V0IGxpZ2h0IGRpcmVjdGlvblxyXG4gICAgaGllcmFyY2h5LmFkZENvbXBvbmVudChjbXBMaWdodCk7XHJcblxyXG4gICAgbGV0IGNtcENhbWVyYTogZi5Db21wb25lbnRDYW1lcmEgPSBuZXcgZi5Db21wb25lbnRDYW1lcmEoKTtcclxuICAgIGNtcENhbWVyYS5iYWNrZ3JvdW5kQ29sb3IgPSBmLkNvbG9yLkNTUyhcIkdSRVlcIik7XHJcbiAgICBjbXBDYW1lcmEucGl2b3QudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMTcsIDQsIDE3KSk7IC8vTW92ZSBjYW1lcmEgZmFyIGJhY2sgc28gdGhlIHdob2xlIHNjZW5lIGlzIHZpc2libGVcclxuICAgIGNtcENhbWVyYS5waXZvdC5sb29rQXQoZi5WZWN0b3IzLlpFUk8oKSk7IC8vU2V0IHRoZSBjYW1lcmEgbWF0cml4IHNvIHRoYXQgaXQgbG9va3MgYXQgdGhlIGNlbnRlciBvZiB0aGUgc2NlbmVcclxuXHJcbiAgICB2aWV3UG9ydCA9IG5ldyBmLlZpZXdwb3J0KCk7IC8vQ3JlYXRpbmcgYSB2aWV3cG9ydCB0aGF0IGlzIHJlbmRlcmVkIG9udG8gdGhlIGh0bWwgY2FudmFzIGVsZW1lbnRcclxuICAgIHZpZXdQb3J0LmluaXRpYWxpemUoXCJWaWV3cG9ydFwiLCBoaWVyYXJjaHksIGNtcENhbWVyYSwgYXBwKTsgLy9pbml0aWFsaXplIHRoZSB2aWV3cG9ydCB3aXRoIHRoZSByb290IG5vZGUsIGNhbWVyYSBhbmQgY2FudmFzXHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGhuZEtleSk7IC8vQWRkaW5nIGEgbGlzdGVuZXIgZm9yIGtleXByZXNzIGhhbmRsaW5nXHJcblxyXG4gICAgLy9QSFlTSUNTIC0gU3RhcnQgdXNpbmcgcGh5c2ljcyBieSB0ZWxsaW5nIHRoZSBwaHlzaWNzIHRoZSBzY2VuZSByb290IG9iamVjdC4gUGh5c2ljcyB3aWxsIHJlY2FsY3VsYXRlIGV2ZXJ5IHRyYW5zZm9ybSBhbmQgaW5pdGlhbGl6ZVxyXG4gICAgZi5QaHlzaWNzLnN0YXJ0KGhpZXJhcmNoeSk7XHJcblxyXG4gICAgZi5QaHlzaWNzLnNldHRpbmdzLmRlYnVnRHJhdyA9IHRydWU7XHJcblxyXG4gICAgLy9JbXBvcnRhbnQgc3RhcnQgdGhlIGdhbWUgbG9vcCBhZnRlciBzdGFydGluZyBwaHlzaWNzLCBzbyBwaHlzaWNzIGNhbiB1c2UgdGhlIGN1cnJlbnQgdHJhbnNmb3JtIGJlZm9yZSBpdCdzIGZpcnN0IGl0ZXJhdGlvblxyXG4gICAgZi5Mb29wLmFkZEV2ZW50TGlzdGVuZXIoZi5FVkVOVC5MT09QX0ZSQU1FLCB1cGRhdGUpOyAvL1RlbGwgdGhlIGdhbWUgbG9vcCB0byBjYWxsIHRoZSB1cGRhdGUgZnVuY3Rpb24gb24gZWFjaCBmcmFtZVxyXG4gICAgZi5Mb29wLnN0YXJ0KCk7IC8vU3RhcmQgdGhlIGdhbWUgbG9vcFxyXG4gIH1cclxuXHJcbiAgLy9GdW5jdGlvbiB0byBhbmltYXRlL3VwZGF0ZSB0aGUgRnVkZ2Ugc2NlbmUsIGNvbW1vbmx5IGtub3duIGFzIGdhbWVsb29wXHJcbiAgZnVuY3Rpb24gdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgLy9QSFlTSUNTIC0gU2ltdWxhdGUgcGh5c2ljYWwgY2hhbmdlcyBlYWNoIGZyYW1lLCBwYXJhbWV0ZXIgdG8gc2V0IHRpbWUgYmV0d2VlbiBmcmFtZXNcclxuICAgIGYuUGh5c2ljcy53b3JsZC5zaW11bGF0ZShmLkxvb3AudGltZUZyYW1lUmVhbCAvIDEwMDApO1xyXG5cclxuICAgIHZpZXdQb3J0LmRyYXcoKTsgLy8gRHJhdyB0aGUgY3VycmVudCBGdWRnZSBTY2VuZSB0byB0aGUgY2FudmFzXHJcbiAgfVxyXG5cclxuICAvLyBGdW5jdGlvbiB0byBxdWlja2x5IGNyZWF0ZSBhIG5vZGUgd2l0aCBtdWx0aXBsZSBuZWVkZWQgRnVkZ2VDb21wb25lbnRzLCBpbmNsdWRpbmcgYSBwaHlzaWNzIGNvbXBvbmVudFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBsZXRlTm9kZShfbmFtZTogc3RyaW5nLCBfbWF0ZXJpYWw6IGYuTWF0ZXJpYWwsIF9tZXNoOiBmLk1lc2gsIF9tYXNzOiBudW1iZXIsIF9waHlzaWNzVHlwZTogZi5QSFlTSUNTX1RZUEUsIF9ncm91cDogZi5QSFlTSUNTX0dST1VQID0gZi5QSFlTSUNTX0dST1VQLkRFRkFVTFQsIF9jb2xUeXBlOiBmLkNPTExJREVSX1RZUEUgPSBmLkNPTExJREVSX1RZUEUuQ1VCRSwgX2NvbnZleE1lc2g6IEZsb2F0MzJBcnJheSA9IG51bGwpOiBmLk5vZGUge1xyXG4gICAgbGV0IG5vZGU6IGYuTm9kZSA9IG5ldyBmLk5vZGUoX25hbWUpO1xyXG4gICAgbGV0IGNtcE1lc2g6IGYuQ29tcG9uZW50TWVzaCA9IG5ldyBmLkNvbXBvbmVudE1lc2goX21lc2gpO1xyXG4gICAgbGV0IGNtcE1hdGVyaWFsOiBmLkNvbXBvbmVudE1hdGVyaWFsID0gbmV3IGYuQ29tcG9uZW50TWF0ZXJpYWwoX21hdGVyaWFsKTtcclxuXHJcbiAgICBsZXQgY21wVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IG5ldyBmLkNvbXBvbmVudFRyYW5zZm9ybSgpO1xyXG4gICAgbGV0IGNtcFJpZ2lkYm9keTogZi5Db21wb25lbnRSaWdpZGJvZHkgPSBuZXcgZi5Db21wb25lbnRSaWdpZGJvZHkoX21hc3MsIF9waHlzaWNzVHlwZSwgX2NvbFR5cGUsIF9ncm91cCwgbnVsbCwgX2NvbnZleE1lc2gpOyAvL2FkZCBhIEZsb2F0MzIgQXJyYXkgb2YgcG9pbnRzIHRvIHRoZSByYiBjb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBjb252ZXggY29sbGlkZXJcclxuICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcE1lc2gpO1xyXG4gICAgbm9kZS5hZGRDb21wb25lbnQoY21wTWF0ZXJpYWwpO1xyXG4gICAgbm9kZS5hZGRDb21wb25lbnQoY21wVHJhbnNmb3JtKTtcclxuICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcFJpZ2lkYm9keSk7XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldHRpbmdVcENhcigpOiB2b2lkIHtcclxuICAgIC8vU2V0dGluZyB1cCB2aXN1YWxzXHJcbiAgICAvL0Jlc3QgcHJhY3RpY2UgdG8gcGxhY2UgdGhlIG1haW4gYm9keSBhbmQgcGxhY2UgZXZlcnkgc3VzcGVuc2lvbiBhbmQgd2hlZWwgbG9jYWxseSB0byB0aGUgYm9keS4gTm90IGluIHRoaXMgdHV0b3JpYWwgdG8gbWFrZSBpdCBtb3JlIGNsZWFyXHJcbiAgICAvL0NhckJvZHlcclxuICAgIGJvZGllc1sxMl0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDYXJfQmFzZVwiLCBtYXRlcmlhbFBsYXllciwgbmV3IGYuTWVzaEN1YmUoKSwgNTAwLCBmLlBIWVNJQ1NfVFlQRS5EWU5BTUlDKTtcclxuICAgIGNhckJvZHkgPSBib2RpZXNbMTJdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSk7XHJcbiAgICBib2RpZXNbMTJdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDAsIDIuNSwgMCkpO1xyXG4gICAgYm9kaWVzWzEyXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMikpO1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxMl0pO1xyXG5cclxuICAgIC8vQ2FyV2hlZWxzIC0gSW1wb3J0YW50IHRvIGJhbGFuY2UgdGhlIGNhciBvdXQgY29ycmVjdGx5XHJcbiAgICBib2RpZXNbMTNdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiQ2FyX1doZWVsUmlnaHRfRnJvbnRcIiwgbWF0ZXJpYWxQbGF5ZXIsIG5ldyBmLk1lc2hDdWJlKCksIDUsIGYuUEhZU0lDU19UWVBFLkRZTkFNSUMsIGYuUEhZU0lDU19HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuQ1lMSU5ERVIpO1xyXG4gICAgYm9kaWVzWzEzXS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygxLCAxLjUwLCAtMC43NSkpO1xyXG4gICAgYm9kaWVzWzEzXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDAuNSwgMC44NSwgMC44NSkpOyAvL1doZWVscyB0aGUgYXMgYSBjeWxpbmRlciB1c2UgdGhlIHgsIGZvciB0aGUgaGVpZ2h0IG9mIHRoZSBjeWxpbmRlciwgeSBmb3IgdGhlIGRpYW1ldGVyIGFuZCB6IGlzIGp1c3QgZm9yIHRoZSBmLk1lc2hDdWJlIHRvIHNjYWxlLlxyXG4gICAgYm9kaWVzWzEzXS5tdHhMb2NhbC5yb3RhdGVaKDkwLCBmYWxzZSk7XHJcbiAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzEzXSlcclxuXHJcbiAgICBib2RpZXNbMTRdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiQ2FyX1doZWVsUmlnaHRfQmFja1wiLCBtYXRlcmlhbFBsYXllciwgbmV3IGYuTWVzaEN1YmUoKSwgNSwgZi5QSFlTSUNTX1RZUEUuRFlOQU1JQywgZi5QSFlTSUNTX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5DWUxJTkRFUik7XHJcbiAgICBib2RpZXNbMTRdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDEsIDEuNTAsIDAuNzUpKTtcclxuICAgIGJvZGllc1sxNF0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjUsIDAuODUsIDAuODUpKTtcclxuICAgIGJvZGllc1sxNF0ubXR4TG9jYWwucm90YXRlWig5MCwgZmFsc2UpO1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxNF0pXHJcblxyXG4gICAgYm9kaWVzWzE1XSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkNhcl9XaGVlbExlZnRfRnJvbnRcIiwgbWF0ZXJpYWxQbGF5ZXIsIG5ldyBmLk1lc2hDdWJlKCksIDUsIGYuUEhZU0lDU19UWVBFLkRZTkFNSUMsIGYuUEhZU0lDU19HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuQ1lMSU5ERVIpO1xyXG4gICAgYm9kaWVzWzE1XS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygtMSwgMS41MCwgLTAuNzUpKTtcclxuICAgIGJvZGllc1sxNV0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjUsIDAuODUsIDAuODUpKTtcclxuICAgIGJvZGllc1sxNV0ubXR4TG9jYWwucm90YXRlWig5MCwgZmFsc2UpO1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxNV0pXHJcblxyXG4gICAgYm9kaWVzWzE2XSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkNhcl9XaGVlbExlZnRfQmFja1wiLCBtYXRlcmlhbFBsYXllciwgbmV3IGYuTWVzaEN1YmUoKSwgNSwgZi5QSFlTSUNTX1RZUEUuRFlOQU1JQywgZi5QSFlTSUNTX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5DWUxJTkRFUik7XHJcbiAgICBib2RpZXNbMTZdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC0xLCAxLjUwLCAwLjc1KSk7XHJcbiAgICBib2RpZXNbMTZdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMC41LCAwLjg1LCAwLjg1KSk7XHJcbiAgICBib2RpZXNbMTZdLm10eExvY2FsLnJvdGF0ZVooOTAsIGZhbHNlKTtcclxuICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMTZdKVxyXG5cclxuICAgIC8vU3VzcGVuc2lvbkhvbGRlcnNcclxuICAgIGJvZGllc1sxN10gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDYXJfSG9sZGVyUmlnaHRfRnJvbnRcIiwgbWF0ZXJpYWxQbGF5ZXIsIG5ldyBmLk1lc2hDdWJlKCksIDIwLCBmLlBIWVNJQ1NfVFlQRS5EWU5BTUlDKTtcclxuICAgIGJvZGllc1sxN10ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMC40LCAxLjUsIC0wLjc1KSk7XHJcbiAgICBib2RpZXNbMTddLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMC41LCAwLjUsIDAuNSkpO1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxN10pXHJcblxyXG4gICAgYm9kaWVzWzE4XSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkNhcl9Ib2xkZXJSaWdodF9CYWNrXCIsIG1hdGVyaWFsUGxheWVyLCBuZXcgZi5NZXNoQ3ViZSgpLCAyMCwgZi5QSFlTSUNTX1RZUEUuRFlOQU1JQyk7XHJcbiAgICBib2RpZXNbMThdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDAuNCwgMS41LCAwLjc1KSk7XHJcbiAgICBib2RpZXNbMThdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMC41LCAwLjUsIDAuNSkpO1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxOF0pXHJcblxyXG4gICAgYm9kaWVzWzE5XSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkNhcl9Ib2xkZXJMZWZ0X0Zyb250XCIsIG1hdGVyaWFsUGxheWVyLCBuZXcgZi5NZXNoQ3ViZSgpLCAyMCwgZi5QSFlTSUNTX1RZUEUuRFlOQU1JQyk7XHJcbiAgICBib2RpZXNbMTldLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC0wLjQsIDEuNSwgLTAuNzUpKTtcclxuICAgIGJvZGllc1sxOV0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjUsIDAuNSwgMC41KSk7XHJcbiAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzE5XSlcclxuXHJcbiAgICBib2RpZXNbMjBdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiQ2FyX0hvbGRlckxlZnRfQmFja1wiLCBtYXRlcmlhbFBsYXllciwgbmV3IGYuTWVzaEN1YmUoKSwgMjAsIGYuUEhZU0lDU19UWVBFLkRZTkFNSUMpO1xyXG4gICAgYm9kaWVzWzIwXS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygtMC40LCAxLjUsIDAuNzUpKTtcclxuICAgIGJvZGllc1syMF0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygwLjUsIDAuNSwgMC41KSk7XHJcbiAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzIwXSlcclxuXHJcblxyXG4gICAgLy9Db25uZWN0aW5nIHRoZW0gd2l0aCBqb2ludHNcclxuICAgIC8vU2xpZGluZywgUHJpc21hdGljLCBTcHJpbmcgSm9pbnQgYmV0d2VlbiB0aGUgYm9keSBhbmQgdGhlIHN1c3BlbnNpb25cclxuICAgIC8vSW4gLVktQXhpcyBwb3NpdGlvbmVkIHdoZXJlIHRoZSBob2xkZXIgaXMgbG9jYXRlZCBsb2NhbGx5IHRvIHRoZSBjYXJfYmFzZVxyXG4gICAgZnJvbnRTdXNwZW5zaW9uUmlnaHQgPSBuZXcgZi5Db21wb25lbnRKb2ludEN5bGluZHJpY2FsKGNhckJvZHksIGJvZGllc1sxN10uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygwLCAtMSwgMCksIG5ldyBmLlZlY3RvcjMoMC41MCwgLTEsIC0wLjc1KSk7XHJcbiAgICBjYXJCb2R5LmdldENvbnRhaW5lcigpLmFkZENvbXBvbmVudChmcm9udFN1c3BlbnNpb25SaWdodCk7XHJcbiAgICBmcm9udFN1c3BlbnNpb25SaWdodC5zcHJpbmdEYW1waW5nID0gMTAwO1xyXG4gICAgZnJvbnRTdXNwZW5zaW9uUmlnaHQuc3ByaW5nRnJlcXVlbmN5ID0gMjtcclxuICAgIGZyb250U3VzcGVuc2lvblJpZ2h0LnRyYW5zbGF0aW9uTW90b3JMaW1pdFVwcGVyID0gMDtcclxuICAgIGZyb250U3VzcGVuc2lvblJpZ2h0LnRyYW5zbGF0aW9uTW90b3JMaW1pdExvd2VyID0gMDtcclxuICAgIGZyb250U3VzcGVuc2lvblJpZ2h0LnJvdGF0aW9uYWxNb3RvckxpbWl0VXBwZXIgPSAwO1xyXG4gICAgZnJvbnRTdXNwZW5zaW9uUmlnaHQucm90YXRpb25hbE1vdG9yTGltaXRMb3dlciA9IDA7XHJcbiAgICBmcm9udFN1c3BlbnNpb25SaWdodC5pbnRlcm5hbENvbGxpc2lvbiA9IHRydWU7XHJcbiAgICBmcm9udFN1c3BlbnNpb25MZWZ0ID0gbmV3IGYuQ29tcG9uZW50Sm9pbnRDeWxpbmRyaWNhbChjYXJCb2R5LCBib2RpZXNbMTldLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIG5ldyBmLlZlY3RvcjMoMCwgLTEsIDApLCBuZXcgZi5WZWN0b3IzKC0wLjUwLCAtMSwgLTAuNzUpKTtcclxuICAgIGNhckJvZHkuZ2V0Q29udGFpbmVyKCkuYWRkQ29tcG9uZW50KGZyb250U3VzcGVuc2lvbkxlZnQpO1xyXG4gICAgZnJvbnRTdXNwZW5zaW9uTGVmdC5zcHJpbmdEYW1waW5nID0gMTAwO1xyXG4gICAgZnJvbnRTdXNwZW5zaW9uTGVmdC5zcHJpbmdGcmVxdWVuY3kgPSAyO1xyXG4gICAgZnJvbnRTdXNwZW5zaW9uTGVmdC50cmFuc2xhdGlvbk1vdG9yTGltaXRVcHBlciA9IDA7XHJcbiAgICBmcm9udFN1c3BlbnNpb25MZWZ0LnRyYW5zbGF0aW9uTW90b3JMaW1pdExvd2VyID0gMDtcclxuICAgIGZyb250U3VzcGVuc2lvbkxlZnQucm90YXRpb25hbE1vdG9yTGltaXRVcHBlciA9IDA7XHJcbiAgICBmcm9udFN1c3BlbnNpb25MZWZ0LnJvdGF0aW9uYWxNb3RvckxpbWl0TG93ZXIgPSAwO1xyXG4gICAgZnJvbnRTdXNwZW5zaW9uTGVmdC5pbnRlcm5hbENvbGxpc2lvbiA9IHRydWU7XHJcbiAgICBiYWNrU3VzcGVuc2lvbkxlZnQgPSBuZXcgZi5Db21wb25lbnRKb2ludEN5bGluZHJpY2FsKGNhckJvZHksIGJvZGllc1syMF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygwLCAtMSwgMCksIG5ldyBmLlZlY3RvcjMoLTAuNTAsIC0xLCAwLjc1KSk7XHJcbiAgICBjYXJCb2R5LmdldENvbnRhaW5lcigpLmFkZENvbXBvbmVudChiYWNrU3VzcGVuc2lvbkxlZnQpO1xyXG4gICAgYmFja1N1c3BlbnNpb25MZWZ0LnNwcmluZ0RhbXBpbmcgPSAxMDA7XHJcbiAgICBiYWNrU3VzcGVuc2lvbkxlZnQuc3ByaW5nRnJlcXVlbmN5ID0gMjtcclxuICAgIGJhY2tTdXNwZW5zaW9uTGVmdC50cmFuc2xhdGlvbk1vdG9yTGltaXRVcHBlciA9IDA7XHJcbiAgICBiYWNrU3VzcGVuc2lvbkxlZnQudHJhbnNsYXRpb25Nb3RvckxpbWl0TG93ZXIgPSAwO1xyXG4gICAgYmFja1N1c3BlbnNpb25MZWZ0LnJvdGF0aW9uYWxNb3RvckxpbWl0VXBwZXIgPSAwO1xyXG4gICAgYmFja1N1c3BlbnNpb25MZWZ0LnJvdGF0aW9uYWxNb3RvckxpbWl0TG93ZXIgPSAwO1xyXG4gICAgYmFja1N1c3BlbnNpb25MZWZ0LmludGVybmFsQ29sbGlzaW9uID0gdHJ1ZTtcclxuICAgIGJhY2tTdXNwZW5zaW9uUmlnaHQgPSBuZXcgZi5Db21wb25lbnRKb2ludEN5bGluZHJpY2FsKGNhckJvZHksIGJvZGllc1sxOF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygwLCAtMSwgMCksIG5ldyBmLlZlY3RvcjMoMC41MCwgLTEsIDAuNzUpKTtcclxuICAgIGNhckJvZHkuZ2V0Q29udGFpbmVyKCkuYWRkQ29tcG9uZW50KGJhY2tTdXNwZW5zaW9uUmlnaHQpO1xyXG4gICAgYmFja1N1c3BlbnNpb25SaWdodC5zcHJpbmdEYW1waW5nID0gMTAwO1xyXG4gICAgYmFja1N1c3BlbnNpb25SaWdodC5zcHJpbmdGcmVxdWVuY3kgPSAyO1xyXG4gICAgYmFja1N1c3BlbnNpb25SaWdodC50cmFuc2xhdGlvbk1vdG9yTGltaXRVcHBlciA9IDA7XHJcbiAgICBiYWNrU3VzcGVuc2lvblJpZ2h0LnRyYW5zbGF0aW9uTW90b3JMaW1pdExvd2VyID0gMDtcclxuICAgIGJhY2tTdXNwZW5zaW9uUmlnaHQucm90YXRpb25hbE1vdG9yTGltaXRVcHBlciA9IDA7XHJcbiAgICBiYWNrU3VzcGVuc2lvblJpZ2h0LnJvdGF0aW9uYWxNb3RvckxpbWl0TG93ZXIgPSAwO1xyXG4gICAgYmFja1N1c3BlbnNpb25SaWdodC5pbnRlcm5hbENvbGxpc2lvbiA9IHRydWU7XHJcblxyXG4gICAgLy9Db25uZWN0IFdoZWVscyB0byBzdXNwZW5zaW9uIC0gSGluZ2UgKHJldm9sdXRlKSBqb2ludHMgdGhhdCBjYW4gcm90YXRlIDM2MMKwIGluIFgtQXhpcyBidXQgbm90IG1vdmVcclxuICAgIHdoZWVsSm9pbnRfZnJvbnRSID0gbmV3IGYuQ29tcG9uZW50Sm9pbnRSZXZvbHV0ZShib2RpZXNbMTddLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZGllc1sxM10uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygtMSwgMCwgMCkpO1xyXG4gICAgYm9kaWVzWzE3XS5hZGRDb21wb25lbnQod2hlZWxKb2ludF9mcm9udFIpO1xyXG4gICAgd2hlZWxKb2ludF9mcm9udEwgPSBuZXcgZi5Db21wb25lbnRKb2ludFJldm9sdXRlKGJvZGllc1sxOV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgYm9kaWVzWzE1XS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLCBuZXcgZi5WZWN0b3IzKC0xLCAwLCAwKSk7XHJcbiAgICBib2RpZXNbMTldLmFkZENvbXBvbmVudCh3aGVlbEpvaW50X2Zyb250TCk7XHJcbiAgICB3aGVlbEpvaW50X2JhY2tSID0gbmV3IGYuQ29tcG9uZW50Sm9pbnRSZXZvbHV0ZShib2RpZXNbMThdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZGllc1sxNF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygtMSwgMCwgMCkpO1xyXG4gICAgYm9kaWVzWzE4XS5hZGRDb21wb25lbnQod2hlZWxKb2ludF9iYWNrUik7XHJcbiAgICB3aGVlbEpvaW50X2JhY2tMID0gbmV3IGYuQ29tcG9uZW50Sm9pbnRSZXZvbHV0ZShib2RpZXNbMjBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSksIGJvZGllc1sxNl0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSwgbmV3IGYuVmVjdG9yMygtMSwgMCwgMCkpO1xyXG4gICAgYm9kaWVzWzIwXS5hZGRDb21wb25lbnQod2hlZWxKb2ludF9iYWNrTCk7XHJcblxyXG4gICAgd2hlZWxKb2ludF9mcm9udFIubW90b3JTcGVlZCA9IC01O1xyXG4gICAgd2hlZWxKb2ludF9mcm9udFIubW90b3JUb3JxdWUgPSA1MDtcclxuICAgIHdoZWVsSm9pbnRfZnJvbnRMLm1vdG9yU3BlZWQgPSAtNTtcclxuICAgIHdoZWVsSm9pbnRfZnJvbnRMLm1vdG9yVG9ycXVlID0gNTA7XHJcbiAgICAvLyB3aGVlbEpvaW50X2JhY2tSLm1vdG9yU3BlZWQgPSAtNTtcclxuICAgIC8vIHdoZWVsSm9pbnRfYmFja1IubW90b3JUb3JxdWUgPSA1MDtcclxuICAgIC8vIHdoZWVsSm9pbnRfYmFja0wubW90b3JTcGVlZCA9IC01O1xyXG4gICAgLy8gd2hlZWxKb2ludF9iYWNrTC5tb3RvclRvcnF1ZSA9IDUwO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIEV2ZW50IEZ1bmN0aW9uIGhhbmRsaW5nIGtleWJvYXJkIGlucHV0XHJcbiAgZnVuY3Rpb24gaG5kS2V5KF9ldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG5cclxuICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuQSkgeyAvL1N0ZWVyaW5nIHRoZSB3aGVlbHMgYnkgZ2l2aW5nIHRoZW0gYSBuZXcgYW5nbGUgbGltaXQgc28gdGhleSBhcmUgZml4ZWQgb24gdGhpcyBhbmdsZVxyXG4gICAgICBmcm9udFN1c3BlbnNpb25MZWZ0LnJvdGF0aW9uYWxNb3RvckxpbWl0VXBwZXIgPSBjdXJyZW50QW5nbGUgPCBtYXhBbmdsZSA/IGN1cnJlbnRBbmdsZSsrIDogY3VycmVudEFuZ2xlO1xyXG4gICAgICBmcm9udFN1c3BlbnNpb25MZWZ0LnJvdGF0aW9uYWxNb3RvckxpbWl0TG93ZXIgPSBjdXJyZW50QW5nbGUgPCBtYXhBbmdsZSA/IGN1cnJlbnRBbmdsZSsrIDogY3VycmVudEFuZ2xlO1xyXG4gICAgICBmcm9udFN1c3BlbnNpb25SaWdodC5yb3RhdGlvbmFsTW90b3JMaW1pdFVwcGVyID0gY3VycmVudEFuZ2xlIDwgbWF4QW5nbGUgPyBjdXJyZW50QW5nbGUrKyA6IGN1cnJlbnRBbmdsZTtcclxuICAgICAgZnJvbnRTdXNwZW5zaW9uUmlnaHQucm90YXRpb25hbE1vdG9yTGltaXRMb3dlciA9IGN1cnJlbnRBbmdsZSA8IG1heEFuZ2xlID8gY3VycmVudEFuZ2xlKysgOiBjdXJyZW50QW5nbGU7XHJcbiAgICB9XHJcbiAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLlcpIHtcclxuICAgICAgYm9kaWVzWzEyXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpLmFwcGx5Rm9yY2UobmV3IGYuVmVjdG9yMygwLCAxMCwgMCkpO1xyXG4gICAgICB3aGVlbEpvaW50X2Zyb250Ui5tb3RvclNwZWVkKys7XHJcbiAgICAgIHdoZWVsSm9pbnRfZnJvbnRMLm1vdG9yU3BlZWQrKztcclxuICAgIH1cclxuICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuUykge1xyXG5cclxuICAgIH1cclxuICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuRCkge1xyXG4gICAgICBmcm9udFN1c3BlbnNpb25MZWZ0LnJvdGF0aW9uYWxNb3RvckxpbWl0VXBwZXIgPSBjdXJyZW50QW5nbGUgPiAtbWF4QW5nbGUgPyBjdXJyZW50QW5nbGUtLSA6IGN1cnJlbnRBbmdsZTtcclxuICAgICAgZnJvbnRTdXNwZW5zaW9uTGVmdC5yb3RhdGlvbmFsTW90b3JMaW1pdExvd2VyID0gY3VycmVudEFuZ2xlID4gLW1heEFuZ2xlID8gY3VycmVudEFuZ2xlLS0gOiBjdXJyZW50QW5nbGU7XHJcbiAgICAgIGZyb250U3VzcGVuc2lvblJpZ2h0LnJvdGF0aW9uYWxNb3RvckxpbWl0VXBwZXIgPSBjdXJyZW50QW5nbGUgPCBtYXhBbmdsZSA/IGN1cnJlbnRBbmdsZS0tIDogY3VycmVudEFuZ2xlO1xyXG4gICAgICBmcm9udFN1c3BlbnNpb25SaWdodC5yb3RhdGlvbmFsTW90b3JMaW1pdExvd2VyID0gY3VycmVudEFuZ2xlIDwgbWF4QW5nbGUgPyBjdXJyZW50QW5nbGUtLSA6IGN1cnJlbnRBbmdsZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLlQpIHtcclxuICAgICAgZi5QaHlzaWNzLnNldHRpbmdzLmRlYnVnTW9kZSA9IGYuUGh5c2ljcy5zZXR0aW5ncy5kZWJ1Z01vZGUgPT0gZi5QSFlTSUNTX0RFQlVHTU9ERS5KT0lOVFNfQU5EX0NPTExJREVSID8gZi5QSFlTSUNTX0RFQlVHTU9ERS5QSFlTSUNfT0JKRUNUU19PTkxZIDogZi5QSFlTSUNTX0RFQlVHTU9ERS5KT0lOVFNfQU5EX0NPTExJREVSO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG5cclxufSJdfQ==