"use strict";
//Reference Fudge, getting code completion ready and creating a shortcut f to write FudgeCode more comfortably
var Tutorials_FUDGEPhysics_Lesson1;
//Reference Fudge, getting code completion ready and creating a shortcut f to write FudgeCode more comfortably
(function (Tutorials_FUDGEPhysics_Lesson1) {
    var f = FudgeCore;
    //GOALS: Learning how to define shpes to create a not predefined collider shape.
    //Built a simple physical player like you would find in a adventure or 3d platformer.
    //Hint! -> These concepts are only a basic start, expand on it yourself to improve on results.
    //Fudge Basic Variables
    window.addEventListener("load", init);
    const app = document.querySelector("canvas"); // The html element where the scene is drawn to
    let viewPort; // The scene visualization
    let hierarchy; // You're object scene tree
    //Physical Objects
    let bodies = new Array(); // Array of all physical objects in the scene to have a quick reference
    let player;
    let playerBody;
    //Setting Variables
    let materialConvexShape = new f.Material("MorningStarThingy", f.ShaderFlat, new f.CoatColored(new f.Color(0.5, 0.4, 0.35, 1)));
    let materialPlayer = new f.Material("Player", f.ShaderFlat, new f.CoatColored(new f.Color(0.7, 0.8, 0.6, 1)));
    let environmentMat = new f.Material("Environment", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1)));
    //Physical Player Variables
    let isGrounded;
    let movementspeed = 8;
    let turningspeed = 80;
    let playerWeight = 75;
    let playerJumpForce = 500;
    let cmpCamera; //We let the camera look at our player in update
    let yTurn = 0; //How high the turning input currently is
    let forwardMovement = 0; //How high the forward movement input currently is
    //Function to initialize the Fudge Scene with a camera, light, viewport and PHYSCIAL Objects
    function init(_event) {
        hierarchy = new f.Node("Scene"); //create the root Node where every object is parented to. Should never be changed
        //#region PHYSICS
        //OimoPhysics which is integrated in Fudge is using a correctionAlgorithm on solver iterations instead of fully recalculate physics too often, 
        //so you can crank the number of solver iterations higher than with most engines. But Oimo is in general less accurate.
        //This is not needed but we just do it to show it.
        f.Physics.settings.defaultRestitution = 0.15;
        f.Physics.settings.defaultFriction = 0.8;
        //PHYSICS 
        //Creating a physically static ground plane for our physics playground. A simple scaled cube but with physics type set to static
        bodies[0] = createCompleteNode("Ground", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[0].mtxLocal.scale(new f.Vector3(14, 0.3, 14)); //Scale the body with it's standard ComponentTransform
        //bodies[0].mtxLocal.rotateX(4, true); //Give it a slight rotation so the physical objects are sliding, always from left when it's after a scaling
        hierarchy.appendChild(bodies[0]); //Add the node to the scene by adding it to the scene-root
        //CONCEPT 1 - Convex Colliders / Compound Collider - A Collider Shape that is not predefined and has no holes in it
        //e.g. something like a morning star shape a cube with pyramides as spikes on the side
        createConvexCompountCollider();
        //CONCEPT 2 - Setting Up a physical player
        //A physical player is a standard physical object of the type dynamic, BUT, you only want to rotate on Y axis, and you want to setup things
        //like a grounded variable and other movement related stuff.
        settingUpAPlayer();
        //Setting up some environment objects for our player to jump on
        bodies[100] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[100].mtxLocal.translate(new f.Vector3(5, 1, 3));
        bodies[100].mtxLocal.scale(new f.Vector3(1, 1, 1));
        //bodies[100].mtxLocal.rotateX(4, true); 
        hierarchy.appendChild(bodies[100]); //Add the node to the scene by adding it to the scene-root
        bodies[101] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[101].mtxLocal.translate(new f.Vector3(-3, 3.5, 2));
        bodies[101].mtxLocal.scale(new f.Vector3(1, 1, 5));
        bodies[101].mtxLocal.rotateX(40, true);
        hierarchy.appendChild(bodies[101]);
        /*Stairs, keep in mind our player is only able to walk up stars because he is a capsule but it's not easy for him because we do not lift any feet,
        we are just pushing a capsule with force against a slope until it's pushed up, which we make easier by giving the player a low friction, the way
        we set the player up he can not slide on the ground but it helps to get him up the stairs.
        So you need to turn around a little while moving to climb these stairs
        advanced stairwalking is something you need to figure out yourself. Keyword raycast is a good start.
        */
        let slopeHeight = 0.20;
        bodies[102] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[102].mtxLocal.translate(new f.Vector3(-3, slopeHeight, -2));
        bodies[102].mtxLocal.scale(new f.Vector3(2, slopeHeight * 2, 0.35));
        hierarchy.appendChild(bodies[102]);
        bodies[103] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[103].mtxLocal.translate(new f.Vector3(-3, slopeHeight * 2, -2 - 0.35));
        bodies[103].mtxLocal.scale(new f.Vector3(2, slopeHeight * 2, 0.35));
        hierarchy.appendChild(bodies[103]);
        bodies[104] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[104].mtxLocal.translate(new f.Vector3(-3, slopeHeight * 3, -2 - 0.35 * 2));
        bodies[104].mtxLocal.scale(new f.Vector3(2, slopeHeight * 2, 0.35));
        hierarchy.appendChild(bodies[104]);
        bodies[105] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[105].mtxLocal.translate(new f.Vector3(-3, slopeHeight * 4, -2 - 0.35 * 3));
        bodies[105].mtxLocal.scale(new f.Vector3(2, slopeHeight * 2, 0.35));
        hierarchy.appendChild(bodies[105]);
        bodies[106] = createCompleteNode("Envinroment", environmentMat, new f.MeshCube(), 0, f.BODY_TYPE.STATIC, f.COLLISION_GROUP.GROUP_2);
        bodies[106].mtxLocal.translate(new f.Vector3(-3, slopeHeight * 5, -2 - 0.35 * 4));
        bodies[106].mtxLocal.scale(new f.Vector3(2, slopeHeight * 2, 0.35));
        hierarchy.appendChild(bodies[106]);
        //#endregion PHYSICS
        //Standard Fudge Scene Initialization - Creating a directional light, a camera and initialize the viewport
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.mtxPivot.lookAt(new f.Vector3(0.5, -1, -0.8)); //Set light direction
        hierarchy.addComponent(cmpLight);
        cmpCamera = new f.ComponentCamera();
        cmpCamera.clrBackground = f.Color.CSS("GREY");
        cmpCamera.mtxPivot.translate(new f.Vector3(17, 4, 17)); //Move camera far back so the whole scene is visible
        cmpCamera.mtxPivot.lookAt(f.Vector3.ZERO()); //Set the camera matrix so that it looks at the center of the scene
        viewPort = new f.Viewport(); //Creating a viewport that is rendered onto the html canvas element
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app); //initialize the viewport with the root node, camera and canvas
        viewPort.physicsDebugMode = f.PHYSICS_DEBUGMODE.JOINTS_AND_COLLIDER;
        document.addEventListener("keypress", hndKey); //Adding a listener for keypress handling
        document.addEventListener("keyup", hndKeyUp); //Adding a listener for keyUp
        //PHYSICS - Start using physics by telling the physics the scene root object. Physics will recalculate every transform and initialize
        f.Physics.adjustTransforms(hierarchy);
        //f.Physics.settings.debugDraw = true;
        //Important start the game loop after starting physics, so physics can use the current transform before it's first iteration
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update); //Tell the game loop to call the update function on each frame
        f.Loop.start(); //Stard the game loop
    }
    //Function to animate/update the Fudge scene, commonly known as gameloop
    function update() {
        //PHYSICS - Simulate physical changes each frame, parameter to set time between frames
        f.Physics.simulate(f.Loop.timeFrameReal / 1000);
        //Player constant update functions do it after physics calculation is best practice
        cmpCamera.mtxPivot.lookAt(player.mtxWorld.translation);
        playerIsGroundedRaycast();
        playerMovement(f.Loop.timeFrameReal / 1000);
        viewPort.draw(); // Draw the current Fudge Scene to the canvas
    }
    // Function to quickly create a node with multiple needed FudgeComponents, including a physics component
    function createCompleteNode(_name, _material, _mesh, _mass, _physicsType, _group = f.COLLISION_GROUP.DEFAULT, _colType = f.COLLIDER_TYPE.CUBE, _convexMesh = null) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        let cmpRigidbody = new f.ComponentRigidbody(_mass, _physicsType, _colType, _group, null, _convexMesh); //add a Float32 Array of points to the rb constructor to create a convex collider
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        node.addComponent(cmpRigidbody);
        return node;
    }
    function createConvexCompountCollider() {
        //Step 1 - define points that construct the shape you want for your collider - order is important so think about what point comes when in your shape
        let colliderVertices = new Float32Array([
            1, -1, 1,
            0, -2, 0,
            1, 1, 1,
            -1, 1, 1,
            -1, -1, 1,
            -2, 0, 0,
            1, 1, -1,
            -1, 1, -1,
            -1, -1, -1,
            0, 0, -2,
            1, -1, -1,
            2, 0, 0,
            0, 2, 0,
            0, 0, 2
        ]);
        //Step 2 - define the visual nodes that are part of your whole shape, since we have a cube that is surounded by pyramids:
        //Main Shape
        bodies[5] = createCompleteNode("Compound", materialConvexShape, new f.MeshCube(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.CONVEX, colliderVertices);
        hierarchy.appendChild(bodies[5]);
        bodies[5].mtxLocal.translate(new f.Vector3(2.5, 4, 3.5));
        bodies[5].mtxLocal.rotateX(27);
        bodies[5].mtxLocal.rotateY(32);
        //Components - Removing the Physics component on each of them since they all build one shape on the main Node only the visual nodes need to be there
        bodies[6] = createCompleteNode("CompoundUpper", materialConvexShape, new f.MeshPyramid(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[6].removeComponent(bodies[6].getComponent(f.ComponentRigidbody));
        bodies[6].mtxLocal.translateY(0.5);
        bodies[6].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[6]); //appending the Node not to the main hierarchy but the Node it is part of
        bodies[7] = createCompleteNode("CompoundLower", materialConvexShape, new f.MeshPyramid(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[7].removeComponent(bodies[7].getComponent(f.ComponentRigidbody));
        bodies[7].mtxLocal.rotateX(180);
        bodies[7].mtxLocal.translateY(0.5);
        bodies[7].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[7]);
        bodies[8] = createCompleteNode("CompoundLeft", materialConvexShape, new f.MeshPyramid(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[8].removeComponent(bodies[8].getComponent(f.ComponentRigidbody));
        bodies[8].mtxLocal.rotateZ(90);
        bodies[8].mtxLocal.translateY(0.5);
        bodies[8].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[8]);
        bodies[9] = createCompleteNode("CompoundRight", materialConvexShape, new f.MeshPyramid(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[9].removeComponent(bodies[9].getComponent(f.ComponentRigidbody));
        bodies[9].mtxLocal.rotateZ(-90);
        bodies[9].mtxLocal.translateY(0.5);
        bodies[9].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[9]);
        bodies[10] = createCompleteNode("CompoundFront", materialConvexShape, new f.MeshPyramid(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[10].removeComponent(bodies[10].getComponent(f.ComponentRigidbody));
        bodies[10].mtxLocal.rotateX(90);
        bodies[10].mtxLocal.translateY(0.5);
        bodies[10].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[10]);
        bodies[11] = createCompleteNode("CompoundBack", materialConvexShape, new f.MeshPyramid(), 1, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.PYRAMID);
        bodies[11].removeComponent(bodies[11].getComponent(f.ComponentRigidbody));
        bodies[11].mtxLocal.rotateX(-90);
        bodies[11].mtxLocal.translateY(0.5);
        bodies[11].mtxLocal.scale(new f.Vector3(1, 0.5, 1));
        bodies[5].appendChild(bodies[11]);
        bodies[5].getComponent(f.ComponentRigidbody).restitution = 3;
    }
    //Setting up a physical player which is nothign but a cube but able to platform in our little world and reacting to stuff
    function settingUpAPlayer() {
        player = createCompleteNode("Player", materialPlayer, new f.MeshCube(), playerWeight, f.BODY_TYPE.DYNAMIC, f.COLLISION_GROUP.DEFAULT, f.COLLIDER_TYPE.CAPSULE);
        hierarchy.appendChild(player);
        playerBody = player.getComponent(f.ComponentRigidbody);
        player.mtxLocal.scale(new f.Vector3(0.5, 1.8, 0.3));
        player.mtxLocal.translate(new f.Vector3(2.5, 4, 3.5));
        playerBody.effectRotation = new f.Vector3(0, 0, 0); //Physics not turn our player we do it ourselves
        //since our capsule collider is a box with half spheres on top and bottom it's a little higher than our box mesh, we need to scale the pivot on the rb itself
        playerBody.mtxPivot.scale(new f.Vector3(1, 0.85, 1));
        playerBody.friction = 0.01; //lower the friction to make it easier climbing stairs - this is only needed in this kind of player structure
        //addign a nose to our player so we know whats the forward direction - but it's not a physics object
        let playerNose = createCompleteNode("PlayerNose", materialPlayer, new f.MeshCube(), playerWeight, f.BODY_TYPE.DYNAMIC);
        playerNose.mtxLocal.translate(new f.Vector3(0, 0.2, 0.4));
        playerNose.mtxLocal.scale(new f.Vector3(0.1, 0.2, 1.5));
        playerNose.removeComponent(playerNose.getComponent(f.ComponentRigidbody));
        player.addChild(playerNose);
    }
    //Check if our physical player is hitting a surface with his feed, if yo let him be able to jump
    function playerIsGroundedRaycast() {
        let hitInfo;
        hitInfo = f.Physics.raycast(playerBody.getPosition(), new f.Vector3(0, -1, 0), 1.1);
        if (hitInfo.hit) {
            isGrounded = true;
        }
        else {
            isGrounded = false;
        }
    }
    // Event Function handling keyboard input
    function hndKey(_event) {
        if (_event.code == f.KEYBOARD_CODE.A) {
            yTurn = 1;
        }
        if (_event.code == f.KEYBOARD_CODE.W) {
            forwardMovement = 1;
        }
        if (_event.code == f.KEYBOARD_CODE.S) {
            forwardMovement = -1;
        }
        if (_event.code == f.KEYBOARD_CODE.D) {
            yTurn = -1;
        }
        if (_event.code == f.KEYBOARD_CODE.SPACE) {
            if (isGrounded) //Let the player only jumping when on the ground
                playerBody.applyLinearImpulse(new f.Vector3(0, playerJumpForce, 0));
        }
        if (_event.code == f.KEYBOARD_CODE.T) {
            viewPort.physicsDebugMode = viewPort.physicsDebugMode == f.PHYSICS_DEBUGMODE.JOINTS_AND_COLLIDER ? f.PHYSICS_DEBUGMODE.PHYSIC_OBJECTS_ONLY : f.PHYSICS_DEBUGMODE.JOINTS_AND_COLLIDER;
        }
    }
    //When the key is up we want to stop movement
    function hndKeyUp(_event) {
        if (_event.code == f.KEYBOARD_CODE.A) {
            yTurn = 0;
        }
        if (_event.code == f.KEYBOARD_CODE.W) {
            forwardMovement = 0;
        }
        if (_event.code == f.KEYBOARD_CODE.S) {
            forwardMovement = 0;
        }
        if (_event.code == f.KEYBOARD_CODE.D) {
            yTurn = 0;
        }
    }
    //Actually moving the player
    function playerMovement(_deltaTime) {
        let playerForward;
        playerForward = f.Vector3.Z();
        playerForward.transform(player.mtxWorld, false);
        //You can rotate a body like you would rotate a transform, incremental but keep in mind, normally we use forces in physics,
        //this is just a feature to make it easier to create player characters
        playerBody.rotateBody(new f.Vector3(0, yTurn * turningspeed * _deltaTime, 0));
        let movementVelocity = new f.Vector3();
        movementVelocity.x = playerForward.x * forwardMovement * movementspeed;
        movementVelocity.y = playerBody.getVelocity().y;
        movementVelocity.z = playerForward.z * forwardMovement * movementspeed;
        playerBody.setVelocity(movementVelocity);
        //Since we are resetting the velocity when releasing the key to have a instant stop our player is not able to slide. We would have
        //the player fade out have sliding instead you need to configure that for your own game.
    }
})(Tutorials_FUDGEPhysics_Lesson1 || (Tutorials_FUDGEPhysics_Lesson1 = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDhHQUE4RztBQUU5RyxJQUFVLDhCQUE4QixDQWlVdkM7QUFuVUQsOEdBQThHO0FBRTlHLFdBQVUsOEJBQThCO0lBQ3BDLElBQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUVyQixnRkFBZ0Y7SUFDaEYscUZBQXFGO0lBQ3JGLDhGQUE4RjtJQUU5Rix1QkFBdUI7SUFDdkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxNQUFNLEdBQUcsR0FBc0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLCtDQUErQztJQUNoSCxJQUFJLFFBQW9CLENBQUMsQ0FBQywwQkFBMEI7SUFDcEQsSUFBSSxTQUFpQixDQUFDLENBQUMsMkJBQTJCO0lBR2xELGtCQUFrQjtJQUNsQixJQUFJLE1BQU0sR0FBYSxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsdUVBQXVFO0lBQzNHLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksVUFBZ0MsQ0FBQztJQUVyQyxtQkFBbUI7SUFDbkIsSUFBSSxtQkFBbUIsR0FBZSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzSSxJQUFJLGNBQWMsR0FBZSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFD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YUFBYSxDQUFDO1FBQ3ZFLGdCQUFnQixDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hELGdCQUFnQixDQUFDLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxHQUFHLGVBQWUsR0FBRyxhQUFhLENBQUM7UUFDdkUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pDLGtJQUFrSTtRQUNsSSx3RkFBd0Y7SUFDNUYsQ0FBQztBQUVMLENBQUMsRUFqVVMsOEJBQThCLEtBQTlCLDhCQUE4QixRQWlVdkMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1JlZmVyZW5jZSBGdWRnZSwgZ2V0dGluZyBjb2RlIGNvbXBsZXRpb24gcmVhZHkgYW5kIGNyZWF0aW5nIGEgc2hvcnRjdXQgZiB0byB3cml0ZSBGdWRnZUNvZGUgbW9yZSBjb21mb3J0YWJseVxuXG5uYW1lc3BhY2UgVHV0b3JpYWxzX0ZVREdFUGh5c2ljc19MZXNzb24xIHtcbiAgICBpbXBvcnQgZiA9IEZ1ZGdlQ29yZTtcblxuICAgIC8vR09BTFM6IExlYXJuaW5nIGhvdyB0byBkZWZpbmUgc2hwZXMgdG8gY3JlYXRlIGEgbm90IHByZWRlZmluZWQgY29sbGlkZXIgc2hhcGUuXG4gICAgLy9CdWlsdCBhIHNpbXBsZSBwaHlzaWNhbCBwbGF5ZXIgbGlrZSB5b3Ugd291bGQgZmluZCBpbiBhIGFkdmVudHVyZSBvciAzZCBwbGF0Zm9ybWVyLlxuICAgIC8vSGludCEgLT4gVGhlc2UgY29uY2VwdHMgYXJlIG9ubHkgYSBiYXNpYyBzdGFydCwgZXhwYW5kIG9uIGl0IHlvdXJzZWxmIHRvIGltcHJvdmUgb24gcmVzdWx0cy5cblxuICAgIC8vRnVkZ2UgQmFzaWMgVmFyaWFibGVzXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGluaXQpO1xuICAgIGNvbnN0IGFwcDogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpOyAvLyBUaGUgaHRtbCBlbGVtZW50IHdoZXJlIHRoZSBzY2VuZSBpcyBkcmF3biB0b1xuICAgIGxldCB2aWV3UG9ydDogZi5WaWV3cG9ydDsgLy8gVGhlIHNjZW5lIHZpc3VhbGl6YXRpb25cbiAgICBsZXQgaGllcmFyY2h5OiBmLk5vZGU7IC8vIFlvdSdyZSBvYmplY3Qgc2NlbmUgdHJlZVxuXG5cbiAgICAvL1BoeXNpY2FsIE9iamVjdHNcbiAgICBsZXQgYm9kaWVzOiBmLk5vZGVbXSA9IG5ldyBBcnJheSgpOyAvLyBBcnJheSBvZiBhbGwgcGh5c2ljYWwgb2JqZWN0cyBpbiB0aGUgc2NlbmUgdG8gaGF2ZSBhIHF1aWNrIHJlZmVyZW5jZVxuICAgIGxldCBwbGF5ZXI6IGYuTm9kZTtcbiAgICBsZXQgcGxheWVyQm9keTogZi5Db21wb25lbnRSaWdpZGJvZHk7XG5cbiAgICAvL1NldHRpbmcgVmFyaWFibGVzXG4gICAgbGV0IG1hdGVyaWFsQ29udmV4U2hhcGU6IGYuTWF0ZXJpYWwgPSBuZXcgZi5NYXRlcmlhbChcIk1vcm5pbmdTdGFyVGhpbmd5XCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMC41LCAwLjQsIDAuMzUsIDEpKSk7XG4gICAgbGV0IG1hdGVyaWFsUGxheWVyOiBmLk1hdGVyaWFsID0gbmV3IGYuTWF0ZXJpYWwoXCJQbGF5ZXJcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjcsIDAuOCwgMC42LCAxKSkpO1xuICAgIGxldCBlbnZpcm9ubWVudE1hdDogZi5NYXRlcmlhbCA9IG5ldyBmLk1hdGVyaWFsKFwiRW52aXJvbm1lbnRcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjIsIDAuMiwgMC4yLCAxKSkpO1xuXG4gICAgLy9QaHlzaWNhbCBQbGF5ZXIgVmFyaWFibGVzXG4gICAgbGV0IGlzR3JvdW5kZWQ6IGJvb2xlYW47XG4gICAgbGV0IG1vdmVtZW50c3BlZWQ6IG51bWJlciA9IDg7XG4gICAgbGV0IHR1cm5pbmdzcGVlZDogbnVtYmVyID0gODA7XG4gICAgbGV0IHBsYXllcldlaWdodDogbnVtYmVyID0gNzU7XG4gICAgbGV0IHBsYXllckp1bXBGb3JjZTogbnVtYmVyID0gNTAwO1xuICAgIGxldCBjbXBDYW1lcmE6IGYuQ29tcG9uZW50Q2FtZXJhOyAvL1dlIGxldCB0aGUgY2FtZXJhIGxvb2sgYXQgb3VyIHBsYXllciBpbiB1cGRhdGVcbiAgICBsZXQgeVR1cm46IG51bWJlciA9IDA7IC8vSG93IGhpZ2ggdGhlIHR1cm5pbmcgaW5wdXQgY3VycmVudGx5IGlzXG4gICAgbGV0IGZvcndhcmRNb3ZlbWVudDogbnVtYmVyID0gMDsgLy9Ib3cgaGlnaCB0aGUgZm9yd2FyZCBtb3ZlbWVudCBpbnB1dCBjdXJyZW50bHkgaXNcblxuICAgIC8vRnVuY3Rpb24gdG8gaW5pdGlhbGl6ZSB0aGUgRnVkZ2UgU2NlbmUgd2l0aCBhIGNhbWVyYSwgbGlnaHQsIHZpZXdwb3J0IGFuZCBQSFlTQ0lBTCBPYmplY3RzXG4gICAgZnVuY3Rpb24gaW5pdChfZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG5cbiAgICAgICAgaGllcmFyY2h5ID0gbmV3IGYuTm9kZShcIlNjZW5lXCIpOyAvL2NyZWF0ZSB0aGUgcm9vdCBOb2RlIHdoZXJlIGV2ZXJ5IG9iamVjdCBpcyBwYXJlbnRlZCB0by4gU2hvdWxkIG5ldmVyIGJlIGNoYW5nZWRcblxuICAgICAgICAvLyNyZWdpb24gUEhZU0lDU1xuICAgICAgICAvL09pbW9QaHlzaWNzIHdoaWNoIGlzIGludGVncmF0ZWQgaW4gRnVkZ2UgaXMgdXNpbmcgYSBjb3JyZWN0aW9uQWxnb3JpdGhtIG9uIHNvbHZlciBpdGVyYXRpb25zIGluc3RlYWQgb2YgZnVsbHkgcmVjYWxjdWxhdGUgcGh5c2ljcyB0b28gb2Z0ZW4sIFxuICAgICAgICAvL3NvIHlvdSBjYW4gY3JhbmsgdGhlIG51bWJlciBvZiBzb2x2ZXIgaXRlcmF0aW9ucyBoaWdoZXIgdGhhbiB3aXRoIG1vc3QgZW5naW5lcy4gQnV0IE9pbW8gaXMgaW4gZ2VuZXJhbCBsZXNzIGFjY3VyYXRlLlxuICAgICAgICAvL1RoaXMgaXMgbm90IG5lZWRlZCBidXQgd2UganVzdCBkbyBpdCB0byBzaG93IGl0LlxuXG4gICAgICAgIGYuUGh5c2ljcy5zZXR0aW5ncy5kZWZhdWx0UmVzdGl0dXRpb24gPSAwLjE1O1xuICAgICAgICBmLlBoeXNpY3Muc2V0dGluZ3MuZGVmYXVsdEZyaWN0aW9uID0gMC44O1xuXG5cbiAgICAgICAgLy9QSFlTSUNTIFxuICAgICAgICAvL0NyZWF0aW5nIGEgcGh5c2ljYWxseSBzdGF0aWMgZ3JvdW5kIHBsYW5lIGZvciBvdXIgcGh5c2ljcyBwbGF5Z3JvdW5kLiBBIHNpbXBsZSBzY2FsZWQgY3ViZSBidXQgd2l0aCBwaHlzaWNzIHR5cGUgc2V0IHRvIHN0YXRpY1xuICAgICAgICBib2RpZXNbMF0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJHcm91bmRcIiwgZW52aXJvbm1lbnRNYXQsIG5ldyBmLk1lc2hDdWJlKCksIDAsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMik7XG4gICAgICAgIGJvZGllc1swXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDE0LCAwLjMsIDE0KSk7IC8vU2NhbGUgdGhlIGJvZHkgd2l0aCBpdCdzIHN0YW5kYXJkIENvbXBvbmVudFRyYW5zZm9ybVxuICAgICAgICAvL2JvZGllc1swXS5tdHhMb2NhbC5yb3RhdGVYKDQsIHRydWUpOyAvL0dpdmUgaXQgYSBzbGlnaHQgcm90YXRpb24gc28gdGhlIHBoeXNpY2FsIG9iamVjdHMgYXJlIHNsaWRpbmcsIGFsd2F5cyBmcm9tIGxlZnQgd2hlbiBpdCdzIGFmdGVyIGEgc2NhbGluZ1xuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzBdKTsgLy9BZGQgdGhlIG5vZGUgdG8gdGhlIHNjZW5lIGJ5IGFkZGluZyBpdCB0byB0aGUgc2NlbmUtcm9vdFxuXG5cbiAgICAgICAgLy9DT05DRVBUIDEgLSBDb252ZXggQ29sbGlkZXJzIC8gQ29tcG91bmQgQ29sbGlkZXIgLSBBIENvbGxpZGVyIFNoYXBlIHRoYXQgaXMgbm90IHByZWRlZmluZWQgYW5kIGhhcyBubyBob2xlcyBpbiBpdFxuICAgICAgICAvL2UuZy4gc29tZXRoaW5nIGxpa2UgYSBtb3JuaW5nIHN0YXIgc2hhcGUgYSBjdWJlIHdpdGggcHlyYW1pZGVzIGFzIHNwaWtlcyBvbiB0aGUgc2lkZVxuICAgICAgICBjcmVhdGVDb252ZXhDb21wb3VudENvbGxpZGVyKCk7XG5cbiAgICAgICAgLy9DT05DRVBUIDIgLSBTZXR0aW5nIFVwIGEgcGh5c2ljYWwgcGxheWVyXG4gICAgICAgIC8vQSBwaHlzaWNhbCBwbGF5ZXIgaXMgYSBzdGFuZGFyZCBwaHlzaWNhbCBvYmplY3Qgb2YgdGhlIHR5cGUgZHluYW1pYywgQlVULCB5b3Ugb25seSB3YW50IHRvIHJvdGF0ZSBvbiBZIGF4aXMsIGFuZCB5b3Ugd2FudCB0byBzZXR1cCB0aGluZ3NcbiAgICAgICAgLy9saWtlIGEgZ3JvdW5kZWQgdmFyaWFibGUgYW5kIG90aGVyIG1vdmVtZW50IHJlbGF0ZWQgc3R1ZmYuXG4gICAgICAgIHNldHRpbmdVcEFQbGF5ZXIoKTtcblxuICAgICAgICAvL1NldHRpbmcgdXAgc29tZSBlbnZpcm9ubWVudCBvYmplY3RzIGZvciBvdXIgcGxheWVyIHRvIGp1bXAgb25cbiAgICAgICAgYm9kaWVzWzEwMF0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJFbnZpbnJvbWVudFwiLCBlbnZpcm9ubWVudE1hdCwgbmV3IGYuTWVzaEN1YmUoKSwgMCwgZi5CT0RZX1RZUEUuU1RBVElDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8yKTtcbiAgICAgICAgYm9kaWVzWzEwMF0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoNSwgMSwgMykpO1xuICAgICAgICBib2RpZXNbMTAwXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDEsIDEpKTtcbiAgICAgICAgLy9ib2RpZXNbMTAwXS5tdHhMb2NhbC5yb3RhdGVYKDQsIHRydWUpOyBcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxMDBdKTsgLy9BZGQgdGhlIG5vZGUgdG8gdGhlIHNjZW5lIGJ5IGFkZGluZyBpdCB0byB0aGUgc2NlbmUtcm9vdFxuXG4gICAgICAgIGJvZGllc1sxMDFdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiRW52aW5yb21lbnRcIiwgZW52aXJvbm1lbnRNYXQsIG5ldyBmLk1lc2hDdWJlKCksIDAsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMik7XG4gICAgICAgIGJvZGllc1sxMDFdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC0zLCAzLjUsIDIpKTtcbiAgICAgICAgYm9kaWVzWzEwMV0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygxLCAxLCA1KSk7XG4gICAgICAgIGJvZGllc1sxMDFdLm10eExvY2FsLnJvdGF0ZVgoNDAsIHRydWUpO1xuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzEwMV0pO1xuXG4gICAgICAgIC8qU3RhaXJzLCBrZWVwIGluIG1pbmQgb3VyIHBsYXllciBpcyBvbmx5IGFibGUgdG8gd2FsayB1cCBzdGFycyBiZWNhdXNlIGhlIGlzIGEgY2Fwc3VsZSBidXQgaXQncyBub3QgZWFzeSBmb3IgaGltIGJlY2F1c2Ugd2UgZG8gbm90IGxpZnQgYW55IGZlZXQsXG4gICAgICAgIHdlIGFyZSBqdXN0IHB1c2hpbmcgYSBjYXBzdWxlIHdpdGggZm9yY2UgYWdhaW5zdCBhIHNsb3BlIHVudGlsIGl0J3MgcHVzaGVkIHVwLCB3aGljaCB3ZSBtYWtlIGVhc2llciBieSBnaXZpbmcgdGhlIHBsYXllciBhIGxvdyBmcmljdGlvbiwgdGhlIHdheVxuICAgICAgICB3ZSBzZXQgdGhlIHBsYXllciB1cCBoZSBjYW4gbm90IHNsaWRlIG9uIHRoZSBncm91bmQgYnV0IGl0IGhlbHBzIHRvIGdldCBoaW0gdXAgdGhlIHN0YWlycy5cbiAgICAgICAgU28geW91IG5lZWQgdG8gdHVybiBhcm91bmQgYSBsaXR0bGUgd2hpbGUgbW92aW5nIHRvIGNsaW1iIHRoZXNlIHN0YWlyc1xuICAgICAgICBhZHZhbmNlZCBzdGFpcndhbGtpbmcgaXMgc29tZXRoaW5nIHlvdSBuZWVkIHRvIGZpZ3VyZSBvdXQgeW91cnNlbGYuIEtleXdvcmQgcmF5Y2FzdCBpcyBhIGdvb2Qgc3RhcnQuIFxuICAgICAgICAqL1xuICAgICAgICBsZXQgc2xvcGVIZWlnaHQ6IG51bWJlciA9IDAuMjA7XG4gICAgICAgIGJvZGllc1sxMDJdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiRW52aW5yb21lbnRcIiwgZW52aXJvbm1lbnRNYXQsIG5ldyBmLk1lc2hDdWJlKCksIDAsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMik7XG4gICAgICAgIGJvZGllc1sxMDJdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC0zLCBzbG9wZUhlaWdodCwgLTIpKTtcbiAgICAgICAgYm9kaWVzWzEwMl0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygyLCBzbG9wZUhlaWdodCAqIDIsIDAuMzUpKTtcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxMDJdKTtcbiAgICAgICAgYm9kaWVzWzEwM10gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJFbnZpbnJvbWVudFwiLCBlbnZpcm9ubWVudE1hdCwgbmV3IGYuTWVzaEN1YmUoKSwgMCwgZi5CT0RZX1RZUEUuU1RBVElDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8yKTtcbiAgICAgICAgYm9kaWVzWzEwM10ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoLTMsIHNsb3BlSGVpZ2h0ICogMiwgLTIgLSAwLjM1KSk7XG4gICAgICAgIGJvZGllc1sxMDNdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMiwgc2xvcGVIZWlnaHQgKiAyLCAwLjM1KSk7XG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMTAzXSk7XG4gICAgICAgIGJvZGllc1sxMDRdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiRW52aW5yb21lbnRcIiwgZW52aXJvbm1lbnRNYXQsIG5ldyBmLk1lc2hDdWJlKCksIDAsIGYuQk9EWV9UWVBFLlNUQVRJQywgZi5DT0xMSVNJT05fR1JPVVAuR1JPVVBfMik7XG4gICAgICAgIGJvZGllc1sxMDRdLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKC0zLCBzbG9wZUhlaWdodCAqIDMsIC0yIC0gMC4zNSAqIDIpKTtcbiAgICAgICAgYm9kaWVzWzEwNF0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygyLCBzbG9wZUhlaWdodCAqIDIsIDAuMzUpKTtcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1sxMDRdKTtcbiAgICAgICAgYm9kaWVzWzEwNV0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJFbnZpbnJvbWVudFwiLCBlbnZpcm9ubWVudE1hdCwgbmV3IGYuTWVzaEN1YmUoKSwgMCwgZi5CT0RZX1RZUEUuU1RBVElDLCBmLkNPTExJU0lPTl9HUk9VUC5HUk9VUF8yKTtcbiAgICAgICAgYm9kaWVzWzEwNV0ubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoLTMsIHNsb3BlSGVpZ2h0ICogNCwgLTIgLSAwLjM1ICogMykpO1xuICAgICAgICBib2RpZXNbMTA1XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDIsIHNsb3BlSGVpZ2h0ICogMiwgMC4zNSkpO1xuICAgICAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoYm9kaWVzWzEwNV0pO1xuICAgICAgICBib2RpZXNbMTA2XSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkVudmlucm9tZW50XCIsIGVudmlyb25tZW50TWF0LCBuZXcgZi5NZXNoQ3ViZSgpLCAwLCBmLkJPRFlfVFlQRS5TVEFUSUMsIGYuQ09MTElTSU9OX0dST1VQLkdST1VQXzIpO1xuICAgICAgICBib2RpZXNbMTA2XS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygtMywgc2xvcGVIZWlnaHQgKiA1LCAtMiAtIDAuMzUgKiA0KSk7XG4gICAgICAgIGJvZGllc1sxMDZdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMiwgc2xvcGVIZWlnaHQgKiAyLCAwLjM1KSk7XG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChib2RpZXNbMTA2XSk7XG4gICAgICAgIC8vI2VuZHJlZ2lvbiBQSFlTSUNTXG5cblxuICAgICAgICAvL1N0YW5kYXJkIEZ1ZGdlIFNjZW5lIEluaXRpYWxpemF0aW9uIC0gQ3JlYXRpbmcgYSBkaXJlY3Rpb25hbCBsaWdodCwgYSBjYW1lcmEgYW5kIGluaXRpYWxpemUgdGhlIHZpZXdwb3J0XG4gICAgICAgIGxldCBjbXBMaWdodDogZi5Db21wb25lbnRMaWdodCA9IG5ldyBmLkNvbXBvbmVudExpZ2h0KG5ldyBmLkxpZ2h0RGlyZWN0aW9uYWwoZi5Db2xvci5DU1MoXCJXSElURVwiKSkpO1xuICAgICAgICBjbXBMaWdodC5tdHhQaXZvdC5sb29rQXQobmV3IGYuVmVjdG9yMygwLjUsIC0xLCAtMC44KSk7IC8vU2V0IGxpZ2h0IGRpcmVjdGlvblxuICAgICAgICBoaWVyYXJjaHkuYWRkQ29tcG9uZW50KGNtcExpZ2h0KTtcblxuICAgICAgICBjbXBDYW1lcmEgPSBuZXcgZi5Db21wb25lbnRDYW1lcmEoKTtcbiAgICAgICAgY21wQ2FtZXJhLmNsckJhY2tncm91bmQgPSBmLkNvbG9yLkNTUyhcIkdSRVlcIik7XG4gICAgICAgIGNtcENhbWVyYS5tdHhQaXZvdC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygxNywgNCwgMTcpKTsgLy9Nb3ZlIGNhbWVyYSBmYXIgYmFjayBzbyB0aGUgd2hvbGUgc2NlbmUgaXMgdmlzaWJsZVxuICAgICAgICBjbXBDYW1lcmEubXR4UGl2b3QubG9va0F0KGYuVmVjdG9yMy5aRVJPKCkpOyAvL1NldCB0aGUgY2FtZXJhIG1hdHJpeCBzbyB0aGF0IGl0IGxvb2tzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIHNjZW5lXG5cbiAgICAgICAgdmlld1BvcnQgPSBuZXcgZi5WaWV3cG9ydCgpOyAvL0NyZWF0aW5nIGEgdmlld3BvcnQgdGhhdCBpcyByZW5kZXJlZCBvbnRvIHRoZSBodG1sIGNhbnZhcyBlbGVtZW50XG4gICAgICAgIHZpZXdQb3J0LmluaXRpYWxpemUoXCJWaWV3cG9ydFwiLCBoaWVyYXJjaHksIGNtcENhbWVyYSwgYXBwKTsgLy9pbml0aWFsaXplIHRoZSB2aWV3cG9ydCB3aXRoIHRoZSByb290IG5vZGUsIGNhbWVyYSBhbmQgY2FudmFzXG4gICAgICAgIHZpZXdQb3J0LnBoeXNpY3NEZWJ1Z01vZGUgPSBmLlBIWVNJQ1NfREVCVUdNT0RFLkpPSU5UU19BTkRfQ09MTElERVI7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGhuZEtleSk7IC8vQWRkaW5nIGEgbGlzdGVuZXIgZm9yIGtleXByZXNzIGhhbmRsaW5nXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBobmRLZXlVcCk7IC8vQWRkaW5nIGEgbGlzdGVuZXIgZm9yIGtleVVwXG5cbiAgICAgICAgLy9QSFlTSUNTIC0gU3RhcnQgdXNpbmcgcGh5c2ljcyBieSB0ZWxsaW5nIHRoZSBwaHlzaWNzIHRoZSBzY2VuZSByb290IG9iamVjdC4gUGh5c2ljcyB3aWxsIHJlY2FsY3VsYXRlIGV2ZXJ5IHRyYW5zZm9ybSBhbmQgaW5pdGlhbGl6ZVxuICAgICAgICBmLlBoeXNpY3MuYWRqdXN0VHJhbnNmb3JtcyhoaWVyYXJjaHkpO1xuXG4gICAgICAgIC8vZi5QaHlzaWNzLnNldHRpbmdzLmRlYnVnRHJhdyA9IHRydWU7XG5cbiAgICAgICAgLy9JbXBvcnRhbnQgc3RhcnQgdGhlIGdhbWUgbG9vcCBhZnRlciBzdGFydGluZyBwaHlzaWNzLCBzbyBwaHlzaWNzIGNhbiB1c2UgdGhlIGN1cnJlbnQgdHJhbnNmb3JtIGJlZm9yZSBpdCdzIGZpcnN0IGl0ZXJhdGlvblxuICAgICAgICBmLkxvb3AuYWRkRXZlbnRMaXN0ZW5lcihmLkVWRU5ULkxPT1BfRlJBTUUsIHVwZGF0ZSk7IC8vVGVsbCB0aGUgZ2FtZSBsb29wIHRvIGNhbGwgdGhlIHVwZGF0ZSBmdW5jdGlvbiBvbiBlYWNoIGZyYW1lXG4gICAgICAgIGYuTG9vcC5zdGFydCgpOyAvL1N0YXJkIHRoZSBnYW1lIGxvb3BcbiAgICB9XG5cbiAgICAvL0Z1bmN0aW9uIHRvIGFuaW1hdGUvdXBkYXRlIHRoZSBGdWRnZSBzY2VuZSwgY29tbW9ubHkga25vd24gYXMgZ2FtZWxvb3BcbiAgICBmdW5jdGlvbiB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIC8vUEhZU0lDUyAtIFNpbXVsYXRlIHBoeXNpY2FsIGNoYW5nZXMgZWFjaCBmcmFtZSwgcGFyYW1ldGVyIHRvIHNldCB0aW1lIGJldHdlZW4gZnJhbWVzXG4gICAgICAgIGYuUGh5c2ljcy5zaW11bGF0ZShmLkxvb3AudGltZUZyYW1lUmVhbCAvIDEwMDApO1xuXG4gICAgICAgIC8vUGxheWVyIGNvbnN0YW50IHVwZGF0ZSBmdW5jdGlvbnMgZG8gaXQgYWZ0ZXIgcGh5c2ljcyBjYWxjdWxhdGlvbiBpcyBiZXN0IHByYWN0aWNlXG4gICAgICAgIGNtcENhbWVyYS5tdHhQaXZvdC5sb29rQXQocGxheWVyLm10eFdvcmxkLnRyYW5zbGF0aW9uKTtcbiAgICAgICAgcGxheWVySXNHcm91bmRlZFJheWNhc3QoKTtcbiAgICAgICAgcGxheWVyTW92ZW1lbnQoZi5Mb29wLnRpbWVGcmFtZVJlYWwgLyAxMDAwKTtcblxuICAgICAgICB2aWV3UG9ydC5kcmF3KCk7IC8vIERyYXcgdGhlIGN1cnJlbnQgRnVkZ2UgU2NlbmUgdG8gdGhlIGNhbnZhc1xuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9uIHRvIHF1aWNrbHkgY3JlYXRlIGEgbm9kZSB3aXRoIG11bHRpcGxlIG5lZWRlZCBGdWRnZUNvbXBvbmVudHMsIGluY2x1ZGluZyBhIHBoeXNpY3MgY29tcG9uZW50XG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcGxldGVOb2RlKF9uYW1lOiBzdHJpbmcsIF9tYXRlcmlhbDogZi5NYXRlcmlhbCwgX21lc2g6IGYuTWVzaCwgX21hc3M6IG51bWJlciwgX3BoeXNpY3NUeXBlOiBmLkJPRFlfVFlQRSwgX2dyb3VwOiBmLkNPTExJU0lPTl9HUk9VUCA9IGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIF9jb2xUeXBlOiBmLkNPTExJREVSX1RZUEUgPSBmLkNPTExJREVSX1RZUEUuQ1VCRSwgX2NvbnZleE1lc2g6IEZsb2F0MzJBcnJheSA9IG51bGwpOiBmLk5vZGUge1xuICAgICAgICBsZXQgbm9kZTogZi5Ob2RlID0gbmV3IGYuTm9kZShfbmFtZSk7XG4gICAgICAgIGxldCBjbXBNZXNoOiBmLkNvbXBvbmVudE1lc2ggPSBuZXcgZi5Db21wb25lbnRNZXNoKF9tZXNoKTtcbiAgICAgICAgbGV0IGNtcE1hdGVyaWFsOiBmLkNvbXBvbmVudE1hdGVyaWFsID0gbmV3IGYuQ29tcG9uZW50TWF0ZXJpYWwoX21hdGVyaWFsKTtcblxuICAgICAgICBsZXQgY21wVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IG5ldyBmLkNvbXBvbmVudFRyYW5zZm9ybSgpO1xuICAgICAgICBsZXQgY21wUmlnaWRib2R5OiBmLkNvbXBvbmVudFJpZ2lkYm9keSA9IG5ldyBmLkNvbXBvbmVudFJpZ2lkYm9keShfbWFzcywgX3BoeXNpY3NUeXBlLCBfY29sVHlwZSwgX2dyb3VwLCBudWxsLCBfY29udmV4TWVzaCk7IC8vYWRkIGEgRmxvYXQzMiBBcnJheSBvZiBwb2ludHMgdG8gdGhlIHJiIGNvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIGNvbnZleCBjb2xsaWRlclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBNZXNoKTtcbiAgICAgICAgbm9kZS5hZGRDb21wb25lbnQoY21wTWF0ZXJpYWwpO1xuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBUcmFuc2Zvcm0pO1xuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBSaWdpZGJvZHkpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDb252ZXhDb21wb3VudENvbGxpZGVyKCk6IHZvaWQge1xuICAgICAgICAvL1N0ZXAgMSAtIGRlZmluZSBwb2ludHMgdGhhdCBjb25zdHJ1Y3QgdGhlIHNoYXBlIHlvdSB3YW50IGZvciB5b3VyIGNvbGxpZGVyIC0gb3JkZXIgaXMgaW1wb3J0YW50IHNvIHRoaW5rIGFib3V0IHdoYXQgcG9pbnQgY29tZXMgd2hlbiBpbiB5b3VyIHNoYXBlXG4gICAgICAgIGxldCBjb2xsaWRlclZlcnRpY2VzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5XG4gICAgICAgICAgICAoW1xuICAgICAgICAgICAgICAgIDEsIC0xLCAxLCAgICAgLy9TdGFydCBvZiB3aXRoIGEgY3ViZSBwb2ludFxuICAgICAgICAgICAgICAgIDAsIC0yLCAwLCAgICAgLy9nbyB0byBhIHB5cmFtaWQgcG9pbnRcbiAgICAgICAgICAgICAgICAxLCAxLCAxLCAgICAgIC8vYmFjayB0byB0aGUgY3ViZVxuICAgICAgICAgICAgICAgIC0gMSwgMSwgMSwgICAgLy9hbG9uZyB0aGUgY3ViZVxuICAgICAgICAgICAgICAgIC0gMSwgLTEsIDEsICAgLy9hbG9uZyB0aGUgY3ViZSBvbiBhIGRpZmZlcmVudCBzaWRlXG4gICAgICAgICAgICAgICAgLTIsIDAsIDAsICAgICAvL2dvIHRvIGFub3RoZXIgcHlyYW1pZCBwb2ludFxuICAgICAgICAgICAgICAgIDEsIDEsIC0xLCAgICAgLy9iYWNrIG9uIHRoZSBjdWJlXG4gICAgICAgICAgICAgICAgLSAxLCAxLCAtMSwgICAvL2FuZCBzbyBvbi4uIGl0IGlzIG5vdCBpbXBvcnRhbnQgdGhhdCBhbGwgcG9pbnRzIGFyZSBpbiBhIGNvcnJlY3Qgb3JkZXIsXG4gICAgICAgICAgICAgICAgLSAxLCAtMSwgLTEsICAvL2J1dCBzaW5jZSB0aGUgcGh5c2ljcyBlbmdpbmUgaXMgdHJ5aW5nIHRvIGNvbnN0cnVjdCBhIHNoYXBlIG91dCBvZiB5b3VyIHBvaW50cyB0aGF0IGlzIGNsb3NlZCBvZiBpdCBzaG91bGQgbWFrZSBzb21lIHNlbnNlXG4gICAgICAgICAgICAgICAgMCwgMCwgLTIsXG4gICAgICAgICAgICAgICAgMSwgLTEsIC0xLFxuICAgICAgICAgICAgICAgIDIsIDAsIDAsXG4gICAgICAgICAgICAgICAgMCwgMiwgMCxcbiAgICAgICAgICAgICAgICAwLCAwLCAyXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAvL1N0ZXAgMiAtIGRlZmluZSB0aGUgdmlzdWFsIG5vZGVzIHRoYXQgYXJlIHBhcnQgb2YgeW91ciB3aG9sZSBzaGFwZSwgc2luY2Ugd2UgaGF2ZSBhIGN1YmUgdGhhdCBpcyBzdXJvdW5kZWQgYnkgcHlyYW1pZHM6XG4gICAgICAgIC8vTWFpbiBTaGFwZVxuICAgICAgICBib2RpZXNbNV0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDb21wb3VuZFwiLCBtYXRlcmlhbENvbnZleFNoYXBlLCBuZXcgZi5NZXNoQ3ViZSgpLCAxLCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuQ09OVkVYLCBjb2xsaWRlclZlcnRpY2VzKTtcbiAgICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGJvZGllc1s1XSk7XG4gICAgICAgIGJvZGllc1s1XS5tdHhMb2NhbC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygyLjUsIDQsIDMuNSkpO1xuICAgICAgICBib2RpZXNbNV0ubXR4TG9jYWwucm90YXRlWCgyNyk7XG4gICAgICAgIGJvZGllc1s1XS5tdHhMb2NhbC5yb3RhdGVZKDMyKTtcbiAgICAgICAgLy9Db21wb25lbnRzIC0gUmVtb3ZpbmcgdGhlIFBoeXNpY3MgY29tcG9uZW50IG9uIGVhY2ggb2YgdGhlbSBzaW5jZSB0aGV5IGFsbCBidWlsZCBvbmUgc2hhcGUgb24gdGhlIG1haW4gTm9kZSBvbmx5IHRoZSB2aXN1YWwgbm9kZXMgbmVlZCB0byBiZSB0aGVyZVxuICAgICAgICBib2RpZXNbNl0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDb21wb3VuZFVwcGVyXCIsIG1hdGVyaWFsQ29udmV4U2hhcGUsIG5ldyBmLk1lc2hQeXJhbWlkKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcbiAgICAgICAgYm9kaWVzWzZdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbNl0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XG4gICAgICAgIGJvZGllc1s2XS5tdHhMb2NhbC50cmFuc2xhdGVZKDAuNSk7XG4gICAgICAgIGJvZGllc1s2XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xuICAgICAgICBib2RpZXNbNV0uYXBwZW5kQ2hpbGQoYm9kaWVzWzZdKTsgLy9hcHBlbmRpbmcgdGhlIE5vZGUgbm90IHRvIHRoZSBtYWluIGhpZXJhcmNoeSBidXQgdGhlIE5vZGUgaXQgaXMgcGFydCBvZlxuICAgICAgICBib2RpZXNbN10gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDb21wb3VuZExvd2VyXCIsIG1hdGVyaWFsQ29udmV4U2hhcGUsIG5ldyBmLk1lc2hQeXJhbWlkKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcbiAgICAgICAgYm9kaWVzWzddLnJlbW92ZUNvbXBvbmVudChib2RpZXNbN10uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XG4gICAgICAgIGJvZGllc1s3XS5tdHhMb2NhbC5yb3RhdGVYKDE4MCk7XG4gICAgICAgIGJvZGllc1s3XS5tdHhMb2NhbC50cmFuc2xhdGVZKDAuNSk7XG4gICAgICAgIGJvZGllc1s3XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xuICAgICAgICBib2RpZXNbNV0uYXBwZW5kQ2hpbGQoYm9kaWVzWzddKTtcbiAgICAgICAgYm9kaWVzWzhdID0gY3JlYXRlQ29tcGxldGVOb2RlKFwiQ29tcG91bmRMZWZ0XCIsIG1hdGVyaWFsQ29udmV4U2hhcGUsIG5ldyBmLk1lc2hQeXJhbWlkKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcbiAgICAgICAgYm9kaWVzWzhdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbOF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XG4gICAgICAgIGJvZGllc1s4XS5tdHhMb2NhbC5yb3RhdGVaKDkwKTtcbiAgICAgICAgYm9kaWVzWzhdLm10eExvY2FsLnRyYW5zbGF0ZVkoMC41KTtcbiAgICAgICAgYm9kaWVzWzhdLm10eExvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMSwgMC41LCAxKSk7XG4gICAgICAgIGJvZGllc1s1XS5hcHBlbmRDaGlsZChib2RpZXNbOF0pO1xuICAgICAgICBib2RpZXNbOV0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDb21wb3VuZFJpZ2h0XCIsIG1hdGVyaWFsQ29udmV4U2hhcGUsIG5ldyBmLk1lc2hQeXJhbWlkKCksIDEsIGYuQk9EWV9UWVBFLkRZTkFNSUMsIGYuQ09MTElTSU9OX0dST1VQLkRFRkFVTFQsIGYuQ09MTElERVJfVFlQRS5QWVJBTUlEKTtcbiAgICAgICAgYm9kaWVzWzldLnJlbW92ZUNvbXBvbmVudChib2RpZXNbOV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KSk7XG4gICAgICAgIGJvZGllc1s5XS5tdHhMb2NhbC5yb3RhdGVaKC05MCk7XG4gICAgICAgIGJvZGllc1s5XS5tdHhMb2NhbC50cmFuc2xhdGVZKDAuNSk7XG4gICAgICAgIGJvZGllc1s5XS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xuICAgICAgICBib2RpZXNbNV0uYXBwZW5kQ2hpbGQoYm9kaWVzWzldKTtcbiAgICAgICAgYm9kaWVzWzEwXSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIkNvbXBvdW5kRnJvbnRcIiwgbWF0ZXJpYWxDb252ZXhTaGFwZSwgbmV3IGYuTWVzaFB5cmFtaWQoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuREVGQVVMVCwgZi5DT0xMSURFUl9UWVBFLlBZUkFNSUQpO1xuICAgICAgICBib2RpZXNbMTBdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbMTBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSkpO1xuICAgICAgICBib2RpZXNbMTBdLm10eExvY2FsLnJvdGF0ZVgoOTApO1xuICAgICAgICBib2RpZXNbMTBdLm10eExvY2FsLnRyYW5zbGF0ZVkoMC41KTtcbiAgICAgICAgYm9kaWVzWzEwXS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDEsIDAuNSwgMSkpO1xuICAgICAgICBib2RpZXNbNV0uYXBwZW5kQ2hpbGQoYm9kaWVzWzEwXSk7XG4gICAgICAgIGJvZGllc1sxMV0gPSBjcmVhdGVDb21wbGV0ZU5vZGUoXCJDb21wb3VuZEJhY2tcIiwgbWF0ZXJpYWxDb252ZXhTaGFwZSwgbmV3IGYuTWVzaFB5cmFtaWQoKSwgMSwgZi5CT0RZX1RZUEUuRFlOQU1JQywgZi5DT0xMSVNJT05fR1JPVVAuREVGQVVMVCwgZi5DT0xMSURFUl9UWVBFLlBZUkFNSUQpO1xuICAgICAgICBib2RpZXNbMTFdLnJlbW92ZUNvbXBvbmVudChib2RpZXNbMTFdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSkpO1xuICAgICAgICBib2RpZXNbMTFdLm10eExvY2FsLnJvdGF0ZVgoLTkwKTtcbiAgICAgICAgYm9kaWVzWzExXS5tdHhMb2NhbC50cmFuc2xhdGVZKDAuNSk7XG4gICAgICAgIGJvZGllc1sxMV0ubXR4TG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygxLCAwLjUsIDEpKTtcbiAgICAgICAgYm9kaWVzWzVdLmFwcGVuZENoaWxkKGJvZGllc1sxMV0pO1xuICAgICAgICBib2RpZXNbNV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50UmlnaWRib2R5KS5yZXN0aXR1dGlvbiA9IDM7XG4gICAgfVxuXG4gICAgLy9TZXR0aW5nIHVwIGEgcGh5c2ljYWwgcGxheWVyIHdoaWNoIGlzIG5vdGhpZ24gYnV0IGEgY3ViZSBidXQgYWJsZSB0byBwbGF0Zm9ybSBpbiBvdXIgbGl0dGxlIHdvcmxkIGFuZCByZWFjdGluZyB0byBzdHVmZlxuICAgIGZ1bmN0aW9uIHNldHRpbmdVcEFQbGF5ZXIoKTogdm9pZCB7XG4gICAgICAgIHBsYXllciA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIlBsYXllclwiLCBtYXRlcmlhbFBsYXllciwgbmV3IGYuTWVzaEN1YmUoKSwgcGxheWVyV2VpZ2h0LCBmLkJPRFlfVFlQRS5EWU5BTUlDLCBmLkNPTExJU0lPTl9HUk9VUC5ERUZBVUxULCBmLkNPTExJREVSX1RZUEUuQ0FQU1VMRSk7XG4gICAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChwbGF5ZXIpO1xuICAgICAgICBwbGF5ZXJCb2R5ID0gcGxheWVyLmdldENvbXBvbmVudChmLkNvbXBvbmVudFJpZ2lkYm9keSk7XG4gICAgICAgIHBsYXllci5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDAuNSwgMS44LCAwLjMpKTtcbiAgICAgICAgcGxheWVyLm10eExvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDIuNSwgNCwgMy41KSk7XG4gICAgICAgIHBsYXllckJvZHkuZWZmZWN0Um90YXRpb24gPSBuZXcgZi5WZWN0b3IzKDAsIDAsIDApOyAvL1BoeXNpY3Mgbm90IHR1cm4gb3VyIHBsYXllciB3ZSBkbyBpdCBvdXJzZWx2ZXNcbiAgICAgICAgLy9zaW5jZSBvdXIgY2Fwc3VsZSBjb2xsaWRlciBpcyBhIGJveCB3aXRoIGhhbGYgc3BoZXJlcyBvbiB0b3AgYW5kIGJvdHRvbSBpdCdzIGEgbGl0dGxlIGhpZ2hlciB0aGFuIG91ciBib3ggbWVzaCwgd2UgbmVlZCB0byBzY2FsZSB0aGUgcGl2b3Qgb24gdGhlIHJiIGl0c2VsZlxuICAgICAgICBwbGF5ZXJCb2R5Lm10eFBpdm90LnNjYWxlKG5ldyBmLlZlY3RvcjMoMSwgMC44NSwgMSkpO1xuICAgICAgICBwbGF5ZXJCb2R5LmZyaWN0aW9uID0gMC4wMTsgLy9sb3dlciB0aGUgZnJpY3Rpb24gdG8gbWFrZSBpdCBlYXNpZXIgY2xpbWJpbmcgc3RhaXJzIC0gdGhpcyBpcyBvbmx5IG5lZWRlZCBpbiB0aGlzIGtpbmQgb2YgcGxheWVyIHN0cnVjdHVyZVxuXG4gICAgICAgIC8vYWRkaWduIGEgbm9zZSB0byBvdXIgcGxheWVyIHNvIHdlIGtub3cgd2hhdHMgdGhlIGZvcndhcmQgZGlyZWN0aW9uIC0gYnV0IGl0J3Mgbm90IGEgcGh5c2ljcyBvYmplY3RcbiAgICAgICAgbGV0IHBsYXllck5vc2U6IGYuTm9kZSA9IGNyZWF0ZUNvbXBsZXRlTm9kZShcIlBsYXllck5vc2VcIiwgbWF0ZXJpYWxQbGF5ZXIsIG5ldyBmLk1lc2hDdWJlKCksIHBsYXllcldlaWdodCwgZi5CT0RZX1RZUEUuRFlOQU1JQyk7XG4gICAgICAgIHBsYXllck5vc2UubXR4TG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgMC4yLCAwLjQpKTtcbiAgICAgICAgcGxheWVyTm9zZS5tdHhMb2NhbC5zY2FsZShuZXcgZi5WZWN0b3IzKDAuMSwgMC4yLCAxLjUpKTtcbiAgICAgICAgcGxheWVyTm9zZS5yZW1vdmVDb21wb25lbnQocGxheWVyTm9zZS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRSaWdpZGJvZHkpKTtcbiAgICAgICAgcGxheWVyLmFkZENoaWxkKHBsYXllck5vc2UpO1xuICAgIH1cblxuICAgIC8vQ2hlY2sgaWYgb3VyIHBoeXNpY2FsIHBsYXllciBpcyBoaXR0aW5nIGEgc3VyZmFjZSB3aXRoIGhpcyBmZWVkLCBpZiB5byBsZXQgaGltIGJlIGFibGUgdG8ganVtcFxuICAgIGZ1bmN0aW9uIHBsYXllcklzR3JvdW5kZWRSYXljYXN0KCk6IHZvaWQge1xuICAgICAgICBsZXQgaGl0SW5mbzogZi5SYXlIaXRJbmZvO1xuICAgICAgICBoaXRJbmZvID0gZi5QaHlzaWNzLnJheWNhc3QocGxheWVyQm9keS5nZXRQb3NpdGlvbigpLCBuZXcgZi5WZWN0b3IzKDAsIC0xLCAwKSwgMS4xKTtcbiAgICAgICAgaWYgKGhpdEluZm8uaGl0KSB7XG4gICAgICAgICAgICBpc0dyb3VuZGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzR3JvdW5kZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gRXZlbnQgRnVuY3Rpb24gaGFuZGxpbmcga2V5Ym9hcmQgaW5wdXRcbiAgICBmdW5jdGlvbiBobmRLZXkoX2V2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG5cbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5BKSB7XG4gICAgICAgICAgICB5VHVybiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5XKSB7XG4gICAgICAgICAgICBmb3J3YXJkTW92ZW1lbnQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuUykge1xuICAgICAgICAgICAgZm9yd2FyZE1vdmVtZW50ID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5EKSB7XG4gICAgICAgICAgICB5VHVybiA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChpc0dyb3VuZGVkKSAvL0xldCB0aGUgcGxheWVyIG9ubHkganVtcGluZyB3aGVuIG9uIHRoZSBncm91bmRcbiAgICAgICAgICAgICAgICBwbGF5ZXJCb2R5LmFwcGx5TGluZWFySW1wdWxzZShuZXcgZi5WZWN0b3IzKDAsIHBsYXllckp1bXBGb3JjZSwgMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5UKSB7XG4gICAgICAgICAgICB2aWV3UG9ydC5waHlzaWNzRGVidWdNb2RlID0gdmlld1BvcnQucGh5c2ljc0RlYnVnTW9kZSA9PSBmLlBIWVNJQ1NfREVCVUdNT0RFLkpPSU5UU19BTkRfQ09MTElERVIgPyBmLlBIWVNJQ1NfREVCVUdNT0RFLlBIWVNJQ19PQkpFQ1RTX09OTFkgOiBmLlBIWVNJQ1NfREVCVUdNT0RFLkpPSU5UU19BTkRfQ09MTElERVI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL1doZW4gdGhlIGtleSBpcyB1cCB3ZSB3YW50IHRvIHN0b3AgbW92ZW1lbnRcbiAgICBmdW5jdGlvbiBobmRLZXlVcChfZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5BKSB7XG4gICAgICAgICAgICB5VHVybiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9ldmVudC5jb2RlID09IGYuS0VZQk9BUkRfQ09ERS5XKSB7XG4gICAgICAgICAgICBmb3J3YXJkTW92ZW1lbnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfZXZlbnQuY29kZSA9PSBmLktFWUJPQVJEX0NPREUuUykge1xuICAgICAgICAgICAgZm9yd2FyZE1vdmVtZW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2V2ZW50LmNvZGUgPT0gZi5LRVlCT0FSRF9DT0RFLkQpIHtcbiAgICAgICAgICAgIHlUdXJuID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vQWN0dWFsbHkgbW92aW5nIHRoZSBwbGF5ZXJcbiAgICBmdW5jdGlvbiBwbGF5ZXJNb3ZlbWVudChfZGVsdGFUaW1lOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IHBsYXllckZvcndhcmQ6IGYuVmVjdG9yMztcbiAgICAgICAgcGxheWVyRm9yd2FyZCA9IGYuVmVjdG9yMy5aKCk7XG4gICAgICAgIHBsYXllckZvcndhcmQudHJhbnNmb3JtKHBsYXllci5tdHhXb3JsZCwgZmFsc2UpO1xuXG4gICAgICAgIC8vWW91IGNhbiByb3RhdGUgYSBib2R5IGxpa2UgeW91IHdvdWxkIHJvdGF0ZSBhIHRyYW5zZm9ybSwgaW5jcmVtZW50YWwgYnV0IGtlZXAgaW4gbWluZCwgbm9ybWFsbHkgd2UgdXNlIGZvcmNlcyBpbiBwaHlzaWNzLFxuICAgICAgICAvL3RoaXMgaXMganVzdCBhIGZlYXR1cmUgdG8gbWFrZSBpdCBlYXNpZXIgdG8gY3JlYXRlIHBsYXllciBjaGFyYWN0ZXJzXG4gICAgICAgIHBsYXllckJvZHkucm90YXRlQm9keShuZXcgZi5WZWN0b3IzKDAsIHlUdXJuICogdHVybmluZ3NwZWVkICogX2RlbHRhVGltZSwgMCkpO1xuXG4gICAgICAgIGxldCBtb3ZlbWVudFZlbG9jaXR5OiBmLlZlY3RvcjMgPSBuZXcgZi5WZWN0b3IzKCk7XG4gICAgICAgIG1vdmVtZW50VmVsb2NpdHkueCA9IHBsYXllckZvcndhcmQueCAqIGZvcndhcmRNb3ZlbWVudCAqIG1vdmVtZW50c3BlZWQ7XG4gICAgICAgIG1vdmVtZW50VmVsb2NpdHkueSA9IHBsYXllckJvZHkuZ2V0VmVsb2NpdHkoKS55O1xuICAgICAgICBtb3ZlbWVudFZlbG9jaXR5LnogPSBwbGF5ZXJGb3J3YXJkLnogKiBmb3J3YXJkTW92ZW1lbnQgKiBtb3ZlbWVudHNwZWVkO1xuICAgICAgICBwbGF5ZXJCb2R5LnNldFZlbG9jaXR5KG1vdmVtZW50VmVsb2NpdHkpO1xuICAgICAgICAvL1NpbmNlIHdlIGFyZSByZXNldHRpbmcgdGhlIHZlbG9jaXR5IHdoZW4gcmVsZWFzaW5nIHRoZSBrZXkgdG8gaGF2ZSBhIGluc3RhbnQgc3RvcCBvdXIgcGxheWVyIGlzIG5vdCBhYmxlIHRvIHNsaWRlLiBXZSB3b3VsZCBoYXZlXG4gICAgICAgIC8vdGhlIHBsYXllciBmYWRlIG91dCBoYXZlIHNsaWRpbmcgaW5zdGVhZCB5b3UgbmVlZCB0byBjb25maWd1cmUgdGhhdCBmb3IgeW91ciBvd24gZ2FtZS5cbiAgICB9XG5cbn0iXX0=